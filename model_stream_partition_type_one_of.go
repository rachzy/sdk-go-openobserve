/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreamPartitionTypeOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamPartitionTypeOneOf{}

// StreamPartitionTypeOneOf struct for StreamPartitionTypeOneOf
type StreamPartitionTypeOneOf struct {
	Hash int64 `json:"hash"`
}

type _StreamPartitionTypeOneOf StreamPartitionTypeOneOf

// NewStreamPartitionTypeOneOf instantiates a new StreamPartitionTypeOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamPartitionTypeOneOf(hash int64) *StreamPartitionTypeOneOf {
	this := StreamPartitionTypeOneOf{}
	this.Hash = hash
	return &this
}

// NewStreamPartitionTypeOneOfWithDefaults instantiates a new StreamPartitionTypeOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamPartitionTypeOneOfWithDefaults() *StreamPartitionTypeOneOf {
	this := StreamPartitionTypeOneOf{}
	return &this
}

// GetHash returns the Hash field value
func (o *StreamPartitionTypeOneOf) GetHash() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *StreamPartitionTypeOneOf) GetHashOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *StreamPartitionTypeOneOf) SetHash(v int64) {
	o.Hash = v
}

func (o StreamPartitionTypeOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamPartitionTypeOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	return toSerialize, nil
}

func (o *StreamPartitionTypeOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamPartitionTypeOneOf := _StreamPartitionTypeOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamPartitionTypeOneOf)

	if err != nil {
		return err
	}

	*o = StreamPartitionTypeOneOf(varStreamPartitionTypeOneOf)

	return err
}

type NullableStreamPartitionTypeOneOf struct {
	value *StreamPartitionTypeOneOf
	isSet bool
}

func (v NullableStreamPartitionTypeOneOf) Get() *StreamPartitionTypeOneOf {
	return v.value
}

func (v *NullableStreamPartitionTypeOneOf) Set(val *StreamPartitionTypeOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamPartitionTypeOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamPartitionTypeOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamPartitionTypeOneOf(val *StreamPartitionTypeOneOf) *NullableStreamPartitionTypeOneOf {
	return &NullableStreamPartitionTypeOneOf{value: val, isSet: true}
}

func (v NullableStreamPartitionTypeOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamPartitionTypeOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


