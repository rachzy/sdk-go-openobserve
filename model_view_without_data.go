/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewWithoutData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewWithoutData{}

// ViewWithoutData Save the bandwidth for a given view, without sending the actual data This is expected to be used for listing views.
type ViewWithoutData struct {
	OrgId string `json:"org_id"`
	ViewId string `json:"view_id"`
	ViewName string `json:"view_name"`
}

type _ViewWithoutData ViewWithoutData

// NewViewWithoutData instantiates a new ViewWithoutData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewWithoutData(orgId string, viewId string, viewName string) *ViewWithoutData {
	this := ViewWithoutData{}
	this.OrgId = orgId
	this.ViewId = viewId
	this.ViewName = viewName
	return &this
}

// NewViewWithoutDataWithDefaults instantiates a new ViewWithoutData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithoutDataWithDefaults() *ViewWithoutData {
	this := ViewWithoutData{}
	return &this
}

// GetOrgId returns the OrgId field value
func (o *ViewWithoutData) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ViewWithoutData) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ViewWithoutData) SetOrgId(v string) {
	o.OrgId = v
}

// GetViewId returns the ViewId field value
func (o *ViewWithoutData) GetViewId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value
// and a boolean to check if the value has been set.
func (o *ViewWithoutData) GetViewIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewId, true
}

// SetViewId sets field value
func (o *ViewWithoutData) SetViewId(v string) {
	o.ViewId = v
}

// GetViewName returns the ViewName field value
func (o *ViewWithoutData) GetViewName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value
// and a boolean to check if the value has been set.
func (o *ViewWithoutData) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewName, true
}

// SetViewName sets field value
func (o *ViewWithoutData) SetViewName(v string) {
	o.ViewName = v
}

func (o ViewWithoutData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewWithoutData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["org_id"] = o.OrgId
	toSerialize["view_id"] = o.ViewId
	toSerialize["view_name"] = o.ViewName
	return toSerialize, nil
}

func (o *ViewWithoutData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"org_id",
		"view_id",
		"view_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewWithoutData := _ViewWithoutData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewWithoutData)

	if err != nil {
		return err
	}

	*o = ViewWithoutData(varViewWithoutData)

	return err
}

type NullableViewWithoutData struct {
	value *ViewWithoutData
	isSet bool
}

func (v NullableViewWithoutData) Get() *ViewWithoutData {
	return v.value
}

func (v *NullableViewWithoutData) Set(val *ViewWithoutData) {
	v.value = val
	v.isSet = true
}

func (v NullableViewWithoutData) IsSet() bool {
	return v.isSet
}

func (v *NullableViewWithoutData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewWithoutData(val *ViewWithoutData) *NullableViewWithoutData {
	return &NullableViewWithoutData{value: val, isSet: true}
}

func (v NullableViewWithoutData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewWithoutData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


