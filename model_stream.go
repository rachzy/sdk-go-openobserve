/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Stream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stream{}

// Stream struct for Stream
type Stream struct {
	MetricsMeta NullableMetadata `json:"metrics_meta,omitempty"`
	Name string `json:"name"`
	Schema []StreamProperty `json:"schema,omitempty"`
	Settings StreamSettings `json:"settings"`
	Stats StreamStats `json:"stats"`
	StorageType string `json:"storage_type"`
	StreamType StreamType `json:"stream_type"`
	TotalFields int32 `json:"total_fields"`
	UdsSchema []StreamProperty `json:"uds_schema,omitempty"`
}

type _Stream Stream

// NewStream instantiates a new Stream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStream(name string, settings StreamSettings, stats StreamStats, storageType string, streamType StreamType, totalFields int32) *Stream {
	this := Stream{}
	this.Name = name
	this.Settings = settings
	this.Stats = stats
	this.StorageType = storageType
	this.StreamType = streamType
	this.TotalFields = totalFields
	return &this
}

// NewStreamWithDefaults instantiates a new Stream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamWithDefaults() *Stream {
	this := Stream{}
	return &this
}

// GetMetricsMeta returns the MetricsMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Stream) GetMetricsMeta() Metadata {
	if o == nil || IsNil(o.MetricsMeta.Get()) {
		var ret Metadata
		return ret
	}
	return *o.MetricsMeta.Get()
}

// GetMetricsMetaOk returns a tuple with the MetricsMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Stream) GetMetricsMetaOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetricsMeta.Get(), o.MetricsMeta.IsSet()
}

// HasMetricsMeta returns a boolean if a field has been set.
func (o *Stream) HasMetricsMeta() bool {
	if o != nil && o.MetricsMeta.IsSet() {
		return true
	}

	return false
}

// SetMetricsMeta gets a reference to the given NullableMetadata and assigns it to the MetricsMeta field.
func (o *Stream) SetMetricsMeta(v Metadata) {
	o.MetricsMeta.Set(&v)
}
// SetMetricsMetaNil sets the value for MetricsMeta to be an explicit nil
func (o *Stream) SetMetricsMetaNil() {
	o.MetricsMeta.Set(nil)
}

// UnsetMetricsMeta ensures that no value is present for MetricsMeta, not even an explicit nil
func (o *Stream) UnsetMetricsMeta() {
	o.MetricsMeta.Unset()
}

// GetName returns the Name field value
func (o *Stream) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Stream) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Stream) SetName(v string) {
	o.Name = v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *Stream) GetSchema() []StreamProperty {
	if o == nil || IsNil(o.Schema) {
		var ret []StreamProperty
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stream) GetSchemaOk() ([]StreamProperty, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *Stream) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given []StreamProperty and assigns it to the Schema field.
func (o *Stream) SetSchema(v []StreamProperty) {
	o.Schema = v
}

// GetSettings returns the Settings field value
func (o *Stream) GetSettings() StreamSettings {
	if o == nil {
		var ret StreamSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *Stream) GetSettingsOk() (*StreamSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *Stream) SetSettings(v StreamSettings) {
	o.Settings = v
}

// GetStats returns the Stats field value
func (o *Stream) GetStats() StreamStats {
	if o == nil {
		var ret StreamStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *Stream) GetStatsOk() (*StreamStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *Stream) SetStats(v StreamStats) {
	o.Stats = v
}

// GetStorageType returns the StorageType field value
func (o *Stream) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *Stream) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *Stream) SetStorageType(v string) {
	o.StorageType = v
}

// GetStreamType returns the StreamType field value
func (o *Stream) GetStreamType() StreamType {
	if o == nil {
		var ret StreamType
		return ret
	}

	return o.StreamType
}

// GetStreamTypeOk returns a tuple with the StreamType field value
// and a boolean to check if the value has been set.
func (o *Stream) GetStreamTypeOk() (*StreamType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamType, true
}

// SetStreamType sets field value
func (o *Stream) SetStreamType(v StreamType) {
	o.StreamType = v
}

// GetTotalFields returns the TotalFields field value
func (o *Stream) GetTotalFields() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFields
}

// GetTotalFieldsOk returns a tuple with the TotalFields field value
// and a boolean to check if the value has been set.
func (o *Stream) GetTotalFieldsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFields, true
}

// SetTotalFields sets field value
func (o *Stream) SetTotalFields(v int32) {
	o.TotalFields = v
}

// GetUdsSchema returns the UdsSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Stream) GetUdsSchema() []StreamProperty {
	if o == nil {
		var ret []StreamProperty
		return ret
	}
	return o.UdsSchema
}

// GetUdsSchemaOk returns a tuple with the UdsSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Stream) GetUdsSchemaOk() ([]StreamProperty, bool) {
	if o == nil || IsNil(o.UdsSchema) {
		return nil, false
	}
	return o.UdsSchema, true
}

// HasUdsSchema returns a boolean if a field has been set.
func (o *Stream) HasUdsSchema() bool {
	if o != nil && !IsNil(o.UdsSchema) {
		return true
	}

	return false
}

// SetUdsSchema gets a reference to the given []StreamProperty and assigns it to the UdsSchema field.
func (o *Stream) SetUdsSchema(v []StreamProperty) {
	o.UdsSchema = v
}

func (o Stream) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricsMeta.IsSet() {
		toSerialize["metrics_meta"] = o.MetricsMeta.Get()
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	toSerialize["settings"] = o.Settings
	toSerialize["stats"] = o.Stats
	toSerialize["storage_type"] = o.StorageType
	toSerialize["stream_type"] = o.StreamType
	toSerialize["total_fields"] = o.TotalFields
	if o.UdsSchema != nil {
		toSerialize["uds_schema"] = o.UdsSchema
	}
	return toSerialize, nil
}

func (o *Stream) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"settings",
		"stats",
		"storage_type",
		"stream_type",
		"total_fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStream := _Stream{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStream)

	if err != nil {
		return err
	}

	*o = Stream(varStream)

	return err
}

type NullableStream struct {
	value *Stream
	isSet bool
}

func (v NullableStream) Get() *Stream {
	return v.value
}

func (v *NullableStream) Set(val *Stream) {
	v.value = val
	v.isSet = true
}

func (v NullableStream) IsSet() bool {
	return v.isSet
}

func (v *NullableStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStream(val *Stream) *NullableStream {
	return &NullableStream{value: val, isSet: true}
}

func (v NullableStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


