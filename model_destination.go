/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Destination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Destination{}

// Destination struct for Destination
type Destination struct {
	AwsRegion NullableString `json:"aws_region,omitempty"`
	// Required when `destination_type` is `Email`
	Emails []string `json:"emails,omitempty"`
	Headers map[string]string `json:"headers,omitempty"`
	Method *MetaDestHTTPType `json:"method,omitempty"`
	Name *string `json:"name,omitempty"`
	SkipTlsVerify *bool `json:"skip_tls_verify,omitempty"`
	SnsTopicArn NullableString `json:"sns_topic_arn,omitempty"`
	Template NullableString `json:"template,omitempty"`
	Type *DestinationType `json:"type,omitempty"`
	// Required for `Http` destination_type
	Url *string `json:"url,omitempty"`
}

// NewDestination instantiates a new Destination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestination() *Destination {
	this := Destination{}
	return &this
}

// NewDestinationWithDefaults instantiates a new Destination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationWithDefaults() *Destination {
	this := Destination{}
	return &this
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Destination) GetAwsRegion() string {
	if o == nil || IsNil(o.AwsRegion.Get()) {
		var ret string
		return ret
	}
	return *o.AwsRegion.Get()
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Destination) GetAwsRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsRegion.Get(), o.AwsRegion.IsSet()
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *Destination) HasAwsRegion() bool {
	if o != nil && o.AwsRegion.IsSet() {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given NullableString and assigns it to the AwsRegion field.
func (o *Destination) SetAwsRegion(v string) {
	o.AwsRegion.Set(&v)
}
// SetAwsRegionNil sets the value for AwsRegion to be an explicit nil
func (o *Destination) SetAwsRegionNil() {
	o.AwsRegion.Set(nil)
}

// UnsetAwsRegion ensures that no value is present for AwsRegion, not even an explicit nil
func (o *Destination) UnsetAwsRegion() {
	o.AwsRegion.Unset()
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *Destination) GetEmails() []string {
	if o == nil || IsNil(o.Emails) {
		var ret []string
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Destination) GetEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *Destination) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *Destination) SetEmails(v []string) {
	o.Emails = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Destination) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Destination) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Destination) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *Destination) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Destination) GetMethod() MetaDestHTTPType {
	if o == nil || IsNil(o.Method) {
		var ret MetaDestHTTPType
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Destination) GetMethodOk() (*MetaDestHTTPType, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Destination) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given MetaDestHTTPType and assigns it to the Method field.
func (o *Destination) SetMethod(v MetaDestHTTPType) {
	o.Method = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Destination) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Destination) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Destination) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Destination) SetName(v string) {
	o.Name = &v
}

// GetSkipTlsVerify returns the SkipTlsVerify field value if set, zero value otherwise.
func (o *Destination) GetSkipTlsVerify() bool {
	if o == nil || IsNil(o.SkipTlsVerify) {
		var ret bool
		return ret
	}
	return *o.SkipTlsVerify
}

// GetSkipTlsVerifyOk returns a tuple with the SkipTlsVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Destination) GetSkipTlsVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipTlsVerify) {
		return nil, false
	}
	return o.SkipTlsVerify, true
}

// HasSkipTlsVerify returns a boolean if a field has been set.
func (o *Destination) HasSkipTlsVerify() bool {
	if o != nil && !IsNil(o.SkipTlsVerify) {
		return true
	}

	return false
}

// SetSkipTlsVerify gets a reference to the given bool and assigns it to the SkipTlsVerify field.
func (o *Destination) SetSkipTlsVerify(v bool) {
	o.SkipTlsVerify = &v
}

// GetSnsTopicArn returns the SnsTopicArn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Destination) GetSnsTopicArn() string {
	if o == nil || IsNil(o.SnsTopicArn.Get()) {
		var ret string
		return ret
	}
	return *o.SnsTopicArn.Get()
}

// GetSnsTopicArnOk returns a tuple with the SnsTopicArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Destination) GetSnsTopicArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnsTopicArn.Get(), o.SnsTopicArn.IsSet()
}

// HasSnsTopicArn returns a boolean if a field has been set.
func (o *Destination) HasSnsTopicArn() bool {
	if o != nil && o.SnsTopicArn.IsSet() {
		return true
	}

	return false
}

// SetSnsTopicArn gets a reference to the given NullableString and assigns it to the SnsTopicArn field.
func (o *Destination) SetSnsTopicArn(v string) {
	o.SnsTopicArn.Set(&v)
}
// SetSnsTopicArnNil sets the value for SnsTopicArn to be an explicit nil
func (o *Destination) SetSnsTopicArnNil() {
	o.SnsTopicArn.Set(nil)
}

// UnsetSnsTopicArn ensures that no value is present for SnsTopicArn, not even an explicit nil
func (o *Destination) UnsetSnsTopicArn() {
	o.SnsTopicArn.Unset()
}

// GetTemplate returns the Template field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Destination) GetTemplate() string {
	if o == nil || IsNil(o.Template.Get()) {
		var ret string
		return ret
	}
	return *o.Template.Get()
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Destination) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Template.Get(), o.Template.IsSet()
}

// HasTemplate returns a boolean if a field has been set.
func (o *Destination) HasTemplate() bool {
	if o != nil && o.Template.IsSet() {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given NullableString and assigns it to the Template field.
func (o *Destination) SetTemplate(v string) {
	o.Template.Set(&v)
}
// SetTemplateNil sets the value for Template to be an explicit nil
func (o *Destination) SetTemplateNil() {
	o.Template.Set(nil)
}

// UnsetTemplate ensures that no value is present for Template, not even an explicit nil
func (o *Destination) UnsetTemplate() {
	o.Template.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Destination) GetType() DestinationType {
	if o == nil || IsNil(o.Type) {
		var ret DestinationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Destination) GetTypeOk() (*DestinationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Destination) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DestinationType and assigns it to the Type field.
func (o *Destination) SetType(v DestinationType) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Destination) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Destination) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Destination) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Destination) SetUrl(v string) {
	o.Url = &v
}

func (o Destination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Destination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsRegion.IsSet() {
		toSerialize["aws_region"] = o.AwsRegion.Get()
	}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SkipTlsVerify) {
		toSerialize["skip_tls_verify"] = o.SkipTlsVerify
	}
	if o.SnsTopicArn.IsSet() {
		toSerialize["sns_topic_arn"] = o.SnsTopicArn.Get()
	}
	if o.Template.IsSet() {
		toSerialize["template"] = o.Template.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableDestination struct {
	value *Destination
	isSet bool
}

func (v NullableDestination) Get() *Destination {
	return v.value
}

func (v *NullableDestination) Set(val *Destination) {
	v.value = val
	v.isSet = true
}

func (v NullableDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestination(val *Destination) *NullableDestination {
	return &NullableDestination{value: val, isSet: true}
}

func (v NullableDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


