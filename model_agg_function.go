/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AggFunction the model 'AggFunction'
type AggFunction string

// List of AggFunction
const (
	AVG AggFunction = "avg"
	MIN AggFunction = "min"
	MAX AggFunction = "max"
	SUM AggFunction = "sum"
	COUNT AggFunction = "count"
	MEDIAN AggFunction = "median"
	P50 AggFunction = "p50"
	P75 AggFunction = "p75"
	P90 AggFunction = "p90"
	P95 AggFunction = "p95"
	P99 AggFunction = "p99"
)

// All allowed values of AggFunction enum
var AllowedAggFunctionEnumValues = []AggFunction{
	"avg",
	"min",
	"max",
	"sum",
	"count",
	"median",
	"p50",
	"p75",
	"p90",
	"p95",
	"p99",
}

func (v *AggFunction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggFunction(value)
	for _, existing := range AllowedAggFunctionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggFunction", value)
}

// NewAggFunctionFromValue returns a pointer to a valid AggFunction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggFunctionFromValue(v string) (*AggFunction, error) {
	ev := AggFunction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggFunction: valid values are %v", v, AllowedAggFunctionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggFunction) IsValid() bool {
	for _, existing := range AllowedAggFunctionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggFunction value
func (v AggFunction) Ptr() *AggFunction {
	return &v
}

type NullableAggFunction struct {
	value *AggFunction
	isSet bool
}

func (v NullableAggFunction) Get() *AggFunction {
	return v.value
}

func (v *NullableAggFunction) Set(val *AggFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableAggFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableAggFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggFunction(val *AggFunction) *NullableAggFunction {
	return &NullableAggFunction{value: val, isSet: true}
}

func (v NullableAggFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

