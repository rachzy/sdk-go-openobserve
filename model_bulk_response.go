/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BulkResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkResponse{}

// BulkResponse struct for BulkResponse
type BulkResponse struct {
	Errors bool `json:"errors"`
	Items []map[string]BulkResponseItem `json:"items"`
	Took int32 `json:"took"`
}

type _BulkResponse BulkResponse

// NewBulkResponse instantiates a new BulkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkResponse(errors bool, items []map[string]BulkResponseItem, took int32) *BulkResponse {
	this := BulkResponse{}
	this.Errors = errors
	this.Items = items
	this.Took = took
	return &this
}

// NewBulkResponseWithDefaults instantiates a new BulkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkResponseWithDefaults() *BulkResponse {
	this := BulkResponse{}
	return &this
}

// GetErrors returns the Errors field value
func (o *BulkResponse) GetErrors() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetErrorsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *BulkResponse) SetErrors(v bool) {
	o.Errors = v
}

// GetItems returns the Items field value
func (o *BulkResponse) GetItems() []map[string]BulkResponseItem {
	if o == nil {
		var ret []map[string]BulkResponseItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetItemsOk() ([]map[string]BulkResponseItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *BulkResponse) SetItems(v []map[string]BulkResponseItem) {
	o.Items = v
}

// GetTook returns the Took field value
func (o *BulkResponse) GetTook() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Took
}

// GetTookOk returns a tuple with the Took field value
// and a boolean to check if the value has been set.
func (o *BulkResponse) GetTookOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Took, true
}

// SetTook sets field value
func (o *BulkResponse) SetTook(v int32) {
	o.Took = v
}

func (o BulkResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errors"] = o.Errors
	toSerialize["items"] = o.Items
	toSerialize["took"] = o.Took
	return toSerialize, nil
}

func (o *BulkResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errors",
		"items",
		"took",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkResponse := _BulkResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBulkResponse)

	if err != nil {
		return err
	}

	*o = BulkResponse(varBulkResponse)

	return err
}

type NullableBulkResponse struct {
	value *BulkResponse
	isSet bool
}

func (v NullableBulkResponse) Get() *BulkResponse {
	return v.value
}

func (v *NullableBulkResponse) Set(val *BulkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkResponse(val *BulkResponse) *NullableBulkResponse {
	return &NullableBulkResponse{value: val, isSet: true}
}

func (v NullableBulkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


