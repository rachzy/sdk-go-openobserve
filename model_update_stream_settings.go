/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateStreamSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStreamSettings{}

// UpdateStreamSettings struct for UpdateStreamSettings
type UpdateStreamSettings struct {
	ApproxPartition NullableBool `json:"approx_partition,omitempty"`
	BloomFilterFields *UpdateStreamSettings `json:"bloom_filter_fields,omitempty"`
	DataRetention NullableInt64 `json:"data_retention,omitempty"`
	DefinedSchemaFields *UpdateStreamSettings `json:"defined_schema_fields,omitempty"`
	DistinctValueFields *UpdateStreamSettings `json:"distinct_value_fields,omitempty"`
	ExtendedRetentionDays *UpdateStreamSettings `json:"extended_retention_days,omitempty"`
	FlattenLevel NullableInt64 `json:"flatten_level,omitempty"`
	FullTextSearchKeys *UpdateStreamSettings `json:"full_text_search_keys,omitempty"`
	IndexFields *UpdateStreamSettings `json:"index_fields,omitempty"`
	MaxQueryRange NullableInt64 `json:"max_query_range,omitempty"`
	PartitionKeys *UpdateStreamSettings `json:"partition_keys,omitempty"`
	PartitionTimeLevel NullablePartitionTimeLevel `json:"partition_time_level,omitempty"`
	StoreOriginalData NullableBool `json:"store_original_data,omitempty"`
}

// NewUpdateStreamSettings instantiates a new UpdateStreamSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStreamSettings() *UpdateStreamSettings {
	this := UpdateStreamSettings{}
	return &this
}

// NewUpdateStreamSettingsWithDefaults instantiates a new UpdateStreamSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStreamSettingsWithDefaults() *UpdateStreamSettings {
	this := UpdateStreamSettings{}
	return &this
}

// GetApproxPartition returns the ApproxPartition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStreamSettings) GetApproxPartition() bool {
	if o == nil || IsNil(o.ApproxPartition.Get()) {
		var ret bool
		return ret
	}
	return *o.ApproxPartition.Get()
}

// GetApproxPartitionOk returns a tuple with the ApproxPartition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStreamSettings) GetApproxPartitionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApproxPartition.Get(), o.ApproxPartition.IsSet()
}

// HasApproxPartition returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasApproxPartition() bool {
	if o != nil && o.ApproxPartition.IsSet() {
		return true
	}

	return false
}

// SetApproxPartition gets a reference to the given NullableBool and assigns it to the ApproxPartition field.
func (o *UpdateStreamSettings) SetApproxPartition(v bool) {
	o.ApproxPartition.Set(&v)
}
// SetApproxPartitionNil sets the value for ApproxPartition to be an explicit nil
func (o *UpdateStreamSettings) SetApproxPartitionNil() {
	o.ApproxPartition.Set(nil)
}

// UnsetApproxPartition ensures that no value is present for ApproxPartition, not even an explicit nil
func (o *UpdateStreamSettings) UnsetApproxPartition() {
	o.ApproxPartition.Unset()
}

// GetBloomFilterFields returns the BloomFilterFields field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetBloomFilterFields() UpdateStreamSettings {
	if o == nil || IsNil(o.BloomFilterFields) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.BloomFilterFields
}

// GetBloomFilterFieldsOk returns a tuple with the BloomFilterFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetBloomFilterFieldsOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.BloomFilterFields) {
		return nil, false
	}
	return o.BloomFilterFields, true
}

// HasBloomFilterFields returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasBloomFilterFields() bool {
	if o != nil && !IsNil(o.BloomFilterFields) {
		return true
	}

	return false
}

// SetBloomFilterFields gets a reference to the given UpdateStreamSettings and assigns it to the BloomFilterFields field.
func (o *UpdateStreamSettings) SetBloomFilterFields(v UpdateStreamSettings) {
	o.BloomFilterFields = &v
}

// GetDataRetention returns the DataRetention field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStreamSettings) GetDataRetention() int64 {
	if o == nil || IsNil(o.DataRetention.Get()) {
		var ret int64
		return ret
	}
	return *o.DataRetention.Get()
}

// GetDataRetentionOk returns a tuple with the DataRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStreamSettings) GetDataRetentionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataRetention.Get(), o.DataRetention.IsSet()
}

// HasDataRetention returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasDataRetention() bool {
	if o != nil && o.DataRetention.IsSet() {
		return true
	}

	return false
}

// SetDataRetention gets a reference to the given NullableInt64 and assigns it to the DataRetention field.
func (o *UpdateStreamSettings) SetDataRetention(v int64) {
	o.DataRetention.Set(&v)
}
// SetDataRetentionNil sets the value for DataRetention to be an explicit nil
func (o *UpdateStreamSettings) SetDataRetentionNil() {
	o.DataRetention.Set(nil)
}

// UnsetDataRetention ensures that no value is present for DataRetention, not even an explicit nil
func (o *UpdateStreamSettings) UnsetDataRetention() {
	o.DataRetention.Unset()
}

// GetDefinedSchemaFields returns the DefinedSchemaFields field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetDefinedSchemaFields() UpdateStreamSettings {
	if o == nil || IsNil(o.DefinedSchemaFields) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.DefinedSchemaFields
}

// GetDefinedSchemaFieldsOk returns a tuple with the DefinedSchemaFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetDefinedSchemaFieldsOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.DefinedSchemaFields) {
		return nil, false
	}
	return o.DefinedSchemaFields, true
}

// HasDefinedSchemaFields returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasDefinedSchemaFields() bool {
	if o != nil && !IsNil(o.DefinedSchemaFields) {
		return true
	}

	return false
}

// SetDefinedSchemaFields gets a reference to the given UpdateStreamSettings and assigns it to the DefinedSchemaFields field.
func (o *UpdateStreamSettings) SetDefinedSchemaFields(v UpdateStreamSettings) {
	o.DefinedSchemaFields = &v
}

// GetDistinctValueFields returns the DistinctValueFields field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetDistinctValueFields() UpdateStreamSettings {
	if o == nil || IsNil(o.DistinctValueFields) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.DistinctValueFields
}

// GetDistinctValueFieldsOk returns a tuple with the DistinctValueFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetDistinctValueFieldsOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.DistinctValueFields) {
		return nil, false
	}
	return o.DistinctValueFields, true
}

// HasDistinctValueFields returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasDistinctValueFields() bool {
	if o != nil && !IsNil(o.DistinctValueFields) {
		return true
	}

	return false
}

// SetDistinctValueFields gets a reference to the given UpdateStreamSettings and assigns it to the DistinctValueFields field.
func (o *UpdateStreamSettings) SetDistinctValueFields(v UpdateStreamSettings) {
	o.DistinctValueFields = &v
}

// GetExtendedRetentionDays returns the ExtendedRetentionDays field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetExtendedRetentionDays() UpdateStreamSettings {
	if o == nil || IsNil(o.ExtendedRetentionDays) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.ExtendedRetentionDays
}

// GetExtendedRetentionDaysOk returns a tuple with the ExtendedRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetExtendedRetentionDaysOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.ExtendedRetentionDays) {
		return nil, false
	}
	return o.ExtendedRetentionDays, true
}

// HasExtendedRetentionDays returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasExtendedRetentionDays() bool {
	if o != nil && !IsNil(o.ExtendedRetentionDays) {
		return true
	}

	return false
}

// SetExtendedRetentionDays gets a reference to the given UpdateStreamSettings and assigns it to the ExtendedRetentionDays field.
func (o *UpdateStreamSettings) SetExtendedRetentionDays(v UpdateStreamSettings) {
	o.ExtendedRetentionDays = &v
}

// GetFlattenLevel returns the FlattenLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStreamSettings) GetFlattenLevel() int64 {
	if o == nil || IsNil(o.FlattenLevel.Get()) {
		var ret int64
		return ret
	}
	return *o.FlattenLevel.Get()
}

// GetFlattenLevelOk returns a tuple with the FlattenLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStreamSettings) GetFlattenLevelOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlattenLevel.Get(), o.FlattenLevel.IsSet()
}

// HasFlattenLevel returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasFlattenLevel() bool {
	if o != nil && o.FlattenLevel.IsSet() {
		return true
	}

	return false
}

// SetFlattenLevel gets a reference to the given NullableInt64 and assigns it to the FlattenLevel field.
func (o *UpdateStreamSettings) SetFlattenLevel(v int64) {
	o.FlattenLevel.Set(&v)
}
// SetFlattenLevelNil sets the value for FlattenLevel to be an explicit nil
func (o *UpdateStreamSettings) SetFlattenLevelNil() {
	o.FlattenLevel.Set(nil)
}

// UnsetFlattenLevel ensures that no value is present for FlattenLevel, not even an explicit nil
func (o *UpdateStreamSettings) UnsetFlattenLevel() {
	o.FlattenLevel.Unset()
}

// GetFullTextSearchKeys returns the FullTextSearchKeys field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetFullTextSearchKeys() UpdateStreamSettings {
	if o == nil || IsNil(o.FullTextSearchKeys) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.FullTextSearchKeys
}

// GetFullTextSearchKeysOk returns a tuple with the FullTextSearchKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetFullTextSearchKeysOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.FullTextSearchKeys) {
		return nil, false
	}
	return o.FullTextSearchKeys, true
}

// HasFullTextSearchKeys returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasFullTextSearchKeys() bool {
	if o != nil && !IsNil(o.FullTextSearchKeys) {
		return true
	}

	return false
}

// SetFullTextSearchKeys gets a reference to the given UpdateStreamSettings and assigns it to the FullTextSearchKeys field.
func (o *UpdateStreamSettings) SetFullTextSearchKeys(v UpdateStreamSettings) {
	o.FullTextSearchKeys = &v
}

// GetIndexFields returns the IndexFields field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetIndexFields() UpdateStreamSettings {
	if o == nil || IsNil(o.IndexFields) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.IndexFields
}

// GetIndexFieldsOk returns a tuple with the IndexFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetIndexFieldsOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.IndexFields) {
		return nil, false
	}
	return o.IndexFields, true
}

// HasIndexFields returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasIndexFields() bool {
	if o != nil && !IsNil(o.IndexFields) {
		return true
	}

	return false
}

// SetIndexFields gets a reference to the given UpdateStreamSettings and assigns it to the IndexFields field.
func (o *UpdateStreamSettings) SetIndexFields(v UpdateStreamSettings) {
	o.IndexFields = &v
}

// GetMaxQueryRange returns the MaxQueryRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStreamSettings) GetMaxQueryRange() int64 {
	if o == nil || IsNil(o.MaxQueryRange.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxQueryRange.Get()
}

// GetMaxQueryRangeOk returns a tuple with the MaxQueryRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStreamSettings) GetMaxQueryRangeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxQueryRange.Get(), o.MaxQueryRange.IsSet()
}

// HasMaxQueryRange returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasMaxQueryRange() bool {
	if o != nil && o.MaxQueryRange.IsSet() {
		return true
	}

	return false
}

// SetMaxQueryRange gets a reference to the given NullableInt64 and assigns it to the MaxQueryRange field.
func (o *UpdateStreamSettings) SetMaxQueryRange(v int64) {
	o.MaxQueryRange.Set(&v)
}
// SetMaxQueryRangeNil sets the value for MaxQueryRange to be an explicit nil
func (o *UpdateStreamSettings) SetMaxQueryRangeNil() {
	o.MaxQueryRange.Set(nil)
}

// UnsetMaxQueryRange ensures that no value is present for MaxQueryRange, not even an explicit nil
func (o *UpdateStreamSettings) UnsetMaxQueryRange() {
	o.MaxQueryRange.Unset()
}

// GetPartitionKeys returns the PartitionKeys field value if set, zero value otherwise.
func (o *UpdateStreamSettings) GetPartitionKeys() UpdateStreamSettings {
	if o == nil || IsNil(o.PartitionKeys) {
		var ret UpdateStreamSettings
		return ret
	}
	return *o.PartitionKeys
}

// GetPartitionKeysOk returns a tuple with the PartitionKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamSettings) GetPartitionKeysOk() (*UpdateStreamSettings, bool) {
	if o == nil || IsNil(o.PartitionKeys) {
		return nil, false
	}
	return o.PartitionKeys, true
}

// HasPartitionKeys returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasPartitionKeys() bool {
	if o != nil && !IsNil(o.PartitionKeys) {
		return true
	}

	return false
}

// SetPartitionKeys gets a reference to the given UpdateStreamSettings and assigns it to the PartitionKeys field.
func (o *UpdateStreamSettings) SetPartitionKeys(v UpdateStreamSettings) {
	o.PartitionKeys = &v
}

// GetPartitionTimeLevel returns the PartitionTimeLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStreamSettings) GetPartitionTimeLevel() PartitionTimeLevel {
	if o == nil || IsNil(o.PartitionTimeLevel.Get()) {
		var ret PartitionTimeLevel
		return ret
	}
	return *o.PartitionTimeLevel.Get()
}

// GetPartitionTimeLevelOk returns a tuple with the PartitionTimeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStreamSettings) GetPartitionTimeLevelOk() (*PartitionTimeLevel, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartitionTimeLevel.Get(), o.PartitionTimeLevel.IsSet()
}

// HasPartitionTimeLevel returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasPartitionTimeLevel() bool {
	if o != nil && o.PartitionTimeLevel.IsSet() {
		return true
	}

	return false
}

// SetPartitionTimeLevel gets a reference to the given NullablePartitionTimeLevel and assigns it to the PartitionTimeLevel field.
func (o *UpdateStreamSettings) SetPartitionTimeLevel(v PartitionTimeLevel) {
	o.PartitionTimeLevel.Set(&v)
}
// SetPartitionTimeLevelNil sets the value for PartitionTimeLevel to be an explicit nil
func (o *UpdateStreamSettings) SetPartitionTimeLevelNil() {
	o.PartitionTimeLevel.Set(nil)
}

// UnsetPartitionTimeLevel ensures that no value is present for PartitionTimeLevel, not even an explicit nil
func (o *UpdateStreamSettings) UnsetPartitionTimeLevel() {
	o.PartitionTimeLevel.Unset()
}

// GetStoreOriginalData returns the StoreOriginalData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStreamSettings) GetStoreOriginalData() bool {
	if o == nil || IsNil(o.StoreOriginalData.Get()) {
		var ret bool
		return ret
	}
	return *o.StoreOriginalData.Get()
}

// GetStoreOriginalDataOk returns a tuple with the StoreOriginalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStreamSettings) GetStoreOriginalDataOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreOriginalData.Get(), o.StoreOriginalData.IsSet()
}

// HasStoreOriginalData returns a boolean if a field has been set.
func (o *UpdateStreamSettings) HasStoreOriginalData() bool {
	if o != nil && o.StoreOriginalData.IsSet() {
		return true
	}

	return false
}

// SetStoreOriginalData gets a reference to the given NullableBool and assigns it to the StoreOriginalData field.
func (o *UpdateStreamSettings) SetStoreOriginalData(v bool) {
	o.StoreOriginalData.Set(&v)
}
// SetStoreOriginalDataNil sets the value for StoreOriginalData to be an explicit nil
func (o *UpdateStreamSettings) SetStoreOriginalDataNil() {
	o.StoreOriginalData.Set(nil)
}

// UnsetStoreOriginalData ensures that no value is present for StoreOriginalData, not even an explicit nil
func (o *UpdateStreamSettings) UnsetStoreOriginalData() {
	o.StoreOriginalData.Unset()
}

func (o UpdateStreamSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStreamSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ApproxPartition.IsSet() {
		toSerialize["approx_partition"] = o.ApproxPartition.Get()
	}
	if !IsNil(o.BloomFilterFields) {
		toSerialize["bloom_filter_fields"] = o.BloomFilterFields
	}
	if o.DataRetention.IsSet() {
		toSerialize["data_retention"] = o.DataRetention.Get()
	}
	if !IsNil(o.DefinedSchemaFields) {
		toSerialize["defined_schema_fields"] = o.DefinedSchemaFields
	}
	if !IsNil(o.DistinctValueFields) {
		toSerialize["distinct_value_fields"] = o.DistinctValueFields
	}
	if !IsNil(o.ExtendedRetentionDays) {
		toSerialize["extended_retention_days"] = o.ExtendedRetentionDays
	}
	if o.FlattenLevel.IsSet() {
		toSerialize["flatten_level"] = o.FlattenLevel.Get()
	}
	if !IsNil(o.FullTextSearchKeys) {
		toSerialize["full_text_search_keys"] = o.FullTextSearchKeys
	}
	if !IsNil(o.IndexFields) {
		toSerialize["index_fields"] = o.IndexFields
	}
	if o.MaxQueryRange.IsSet() {
		toSerialize["max_query_range"] = o.MaxQueryRange.Get()
	}
	if !IsNil(o.PartitionKeys) {
		toSerialize["partition_keys"] = o.PartitionKeys
	}
	if o.PartitionTimeLevel.IsSet() {
		toSerialize["partition_time_level"] = o.PartitionTimeLevel.Get()
	}
	if o.StoreOriginalData.IsSet() {
		toSerialize["store_original_data"] = o.StoreOriginalData.Get()
	}
	return toSerialize, nil
}

type NullableUpdateStreamSettings struct {
	value *UpdateStreamSettings
	isSet bool
}

func (v NullableUpdateStreamSettings) Get() *UpdateStreamSettings {
	return v.value
}

func (v *NullableUpdateStreamSettings) Set(val *UpdateStreamSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStreamSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStreamSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStreamSettings(val *UpdateStreamSettings) *NullableUpdateStreamSettings {
	return &NullableUpdateStreamSettings{value: val, isSet: true}
}

func (v NullableUpdateStreamSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStreamSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


