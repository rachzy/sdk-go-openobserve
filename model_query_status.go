/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryStatus{}

// QueryStatus struct for QueryStatus
type QueryStatus struct {
	CreatedAt int64 `json:"created_at"`
	OrgId NullableString `json:"org_id,omitempty"`
	Query NullableQueryInfo `json:"query,omitempty"`
	ScanStats NullableScanStats `json:"scan_stats,omitempty"`
	SearchType NullableSearchEventType `json:"search_type,omitempty"`
	StartedAt int64 `json:"started_at"`
	Status string `json:"status"`
	StreamType NullableString `json:"stream_type,omitempty"`
	TraceId string `json:"trace_id"`
	UserId NullableString `json:"user_id,omitempty"`
	WorkGroup string `json:"work_group"`
}

type _QueryStatus QueryStatus

// NewQueryStatus instantiates a new QueryStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryStatus(createdAt int64, startedAt int64, status string, traceId string, workGroup string) *QueryStatus {
	this := QueryStatus{}
	this.CreatedAt = createdAt
	this.StartedAt = startedAt
	this.Status = status
	this.TraceId = traceId
	this.WorkGroup = workGroup
	return &this
}

// NewQueryStatusWithDefaults instantiates a new QueryStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryStatusWithDefaults() *QueryStatus {
	this := QueryStatus{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *QueryStatus) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *QueryStatus) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *QueryStatus) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryStatus) GetOrgId() string {
	if o == nil || IsNil(o.OrgId.Get()) {
		var ret string
		return ret
	}
	return *o.OrgId.Get()
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryStatus) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrgId.Get(), o.OrgId.IsSet()
}

// HasOrgId returns a boolean if a field has been set.
func (o *QueryStatus) HasOrgId() bool {
	if o != nil && o.OrgId.IsSet() {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given NullableString and assigns it to the OrgId field.
func (o *QueryStatus) SetOrgId(v string) {
	o.OrgId.Set(&v)
}
// SetOrgIdNil sets the value for OrgId to be an explicit nil
func (o *QueryStatus) SetOrgIdNil() {
	o.OrgId.Set(nil)
}

// UnsetOrgId ensures that no value is present for OrgId, not even an explicit nil
func (o *QueryStatus) UnsetOrgId() {
	o.OrgId.Unset()
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryStatus) GetQuery() QueryInfo {
	if o == nil || IsNil(o.Query.Get()) {
		var ret QueryInfo
		return ret
	}
	return *o.Query.Get()
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryStatus) GetQueryOk() (*QueryInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Query.Get(), o.Query.IsSet()
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryStatus) HasQuery() bool {
	if o != nil && o.Query.IsSet() {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NullableQueryInfo and assigns it to the Query field.
func (o *QueryStatus) SetQuery(v QueryInfo) {
	o.Query.Set(&v)
}
// SetQueryNil sets the value for Query to be an explicit nil
func (o *QueryStatus) SetQueryNil() {
	o.Query.Set(nil)
}

// UnsetQuery ensures that no value is present for Query, not even an explicit nil
func (o *QueryStatus) UnsetQuery() {
	o.Query.Unset()
}

// GetScanStats returns the ScanStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryStatus) GetScanStats() ScanStats {
	if o == nil || IsNil(o.ScanStats.Get()) {
		var ret ScanStats
		return ret
	}
	return *o.ScanStats.Get()
}

// GetScanStatsOk returns a tuple with the ScanStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryStatus) GetScanStatsOk() (*ScanStats, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScanStats.Get(), o.ScanStats.IsSet()
}

// HasScanStats returns a boolean if a field has been set.
func (o *QueryStatus) HasScanStats() bool {
	if o != nil && o.ScanStats.IsSet() {
		return true
	}

	return false
}

// SetScanStats gets a reference to the given NullableScanStats and assigns it to the ScanStats field.
func (o *QueryStatus) SetScanStats(v ScanStats) {
	o.ScanStats.Set(&v)
}
// SetScanStatsNil sets the value for ScanStats to be an explicit nil
func (o *QueryStatus) SetScanStatsNil() {
	o.ScanStats.Set(nil)
}

// UnsetScanStats ensures that no value is present for ScanStats, not even an explicit nil
func (o *QueryStatus) UnsetScanStats() {
	o.ScanStats.Unset()
}

// GetSearchType returns the SearchType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryStatus) GetSearchType() SearchEventType {
	if o == nil || IsNil(o.SearchType.Get()) {
		var ret SearchEventType
		return ret
	}
	return *o.SearchType.Get()
}

// GetSearchTypeOk returns a tuple with the SearchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryStatus) GetSearchTypeOk() (*SearchEventType, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchType.Get(), o.SearchType.IsSet()
}

// HasSearchType returns a boolean if a field has been set.
func (o *QueryStatus) HasSearchType() bool {
	if o != nil && o.SearchType.IsSet() {
		return true
	}

	return false
}

// SetSearchType gets a reference to the given NullableSearchEventType and assigns it to the SearchType field.
func (o *QueryStatus) SetSearchType(v SearchEventType) {
	o.SearchType.Set(&v)
}
// SetSearchTypeNil sets the value for SearchType to be an explicit nil
func (o *QueryStatus) SetSearchTypeNil() {
	o.SearchType.Set(nil)
}

// UnsetSearchType ensures that no value is present for SearchType, not even an explicit nil
func (o *QueryStatus) UnsetSearchType() {
	o.SearchType.Unset()
}

// GetStartedAt returns the StartedAt field value
func (o *QueryStatus) GetStartedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *QueryStatus) GetStartedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *QueryStatus) SetStartedAt(v int64) {
	o.StartedAt = v
}

// GetStatus returns the Status field value
func (o *QueryStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *QueryStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *QueryStatus) SetStatus(v string) {
	o.Status = v
}

// GetStreamType returns the StreamType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryStatus) GetStreamType() string {
	if o == nil || IsNil(o.StreamType.Get()) {
		var ret string
		return ret
	}
	return *o.StreamType.Get()
}

// GetStreamTypeOk returns a tuple with the StreamType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryStatus) GetStreamTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamType.Get(), o.StreamType.IsSet()
}

// HasStreamType returns a boolean if a field has been set.
func (o *QueryStatus) HasStreamType() bool {
	if o != nil && o.StreamType.IsSet() {
		return true
	}

	return false
}

// SetStreamType gets a reference to the given NullableString and assigns it to the StreamType field.
func (o *QueryStatus) SetStreamType(v string) {
	o.StreamType.Set(&v)
}
// SetStreamTypeNil sets the value for StreamType to be an explicit nil
func (o *QueryStatus) SetStreamTypeNil() {
	o.StreamType.Set(nil)
}

// UnsetStreamType ensures that no value is present for StreamType, not even an explicit nil
func (o *QueryStatus) UnsetStreamType() {
	o.StreamType.Unset()
}

// GetTraceId returns the TraceId field value
func (o *QueryStatus) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *QueryStatus) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *QueryStatus) SetTraceId(v string) {
	o.TraceId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryStatus) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryStatus) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *QueryStatus) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *QueryStatus) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *QueryStatus) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *QueryStatus) UnsetUserId() {
	o.UserId.Unset()
}

// GetWorkGroup returns the WorkGroup field value
func (o *QueryStatus) GetWorkGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkGroup
}

// GetWorkGroupOk returns a tuple with the WorkGroup field value
// and a boolean to check if the value has been set.
func (o *QueryStatus) GetWorkGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkGroup, true
}

// SetWorkGroup sets field value
func (o *QueryStatus) SetWorkGroup(v string) {
	o.WorkGroup = v
}

func (o QueryStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	if o.OrgId.IsSet() {
		toSerialize["org_id"] = o.OrgId.Get()
	}
	if o.Query.IsSet() {
		toSerialize["query"] = o.Query.Get()
	}
	if o.ScanStats.IsSet() {
		toSerialize["scan_stats"] = o.ScanStats.Get()
	}
	if o.SearchType.IsSet() {
		toSerialize["search_type"] = o.SearchType.Get()
	}
	toSerialize["started_at"] = o.StartedAt
	toSerialize["status"] = o.Status
	if o.StreamType.IsSet() {
		toSerialize["stream_type"] = o.StreamType.Get()
	}
	toSerialize["trace_id"] = o.TraceId
	if o.UserId.IsSet() {
		toSerialize["user_id"] = o.UserId.Get()
	}
	toSerialize["work_group"] = o.WorkGroup
	return toSerialize, nil
}

func (o *QueryStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"started_at",
		"status",
		"trace_id",
		"work_group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryStatus := _QueryStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryStatus)

	if err != nil {
		return err
	}

	*o = QueryStatus(varQueryStatus)

	return err
}

type NullableQueryStatus struct {
	value *QueryStatus
	isSet bool
}

func (v NullableQueryStatus) Get() *QueryStatus {
	return v.value
}

func (v *NullableQueryStatus) Set(val *QueryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryStatus(val *QueryStatus) *NullableQueryStatus {
	return &NullableQueryStatus{value: val, isSet: true}
}

func (v NullableQueryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


