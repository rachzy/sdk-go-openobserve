/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BulkResponseError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkResponseError{}

// BulkResponseError struct for BulkResponseError
type BulkResponseError struct {
	Index string `json:"index"`
	IndexUuid string `json:"index_uuid"`
	Reason string `json:"reason"`
	Shard string `json:"shard"`
	Type string `json:"type"`
}

type _BulkResponseError BulkResponseError

// NewBulkResponseError instantiates a new BulkResponseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkResponseError(index string, indexUuid string, reason string, shard string, type_ string) *BulkResponseError {
	this := BulkResponseError{}
	this.Index = index
	this.IndexUuid = indexUuid
	this.Reason = reason
	this.Shard = shard
	this.Type = type_
	return &this
}

// NewBulkResponseErrorWithDefaults instantiates a new BulkResponseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkResponseErrorWithDefaults() *BulkResponseError {
	this := BulkResponseError{}
	return &this
}

// GetIndex returns the Index field value
func (o *BulkResponseError) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *BulkResponseError) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *BulkResponseError) SetIndex(v string) {
	o.Index = v
}

// GetIndexUuid returns the IndexUuid field value
func (o *BulkResponseError) GetIndexUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexUuid
}

// GetIndexUuidOk returns a tuple with the IndexUuid field value
// and a boolean to check if the value has been set.
func (o *BulkResponseError) GetIndexUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexUuid, true
}

// SetIndexUuid sets field value
func (o *BulkResponseError) SetIndexUuid(v string) {
	o.IndexUuid = v
}

// GetReason returns the Reason field value
func (o *BulkResponseError) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *BulkResponseError) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *BulkResponseError) SetReason(v string) {
	o.Reason = v
}

// GetShard returns the Shard field value
func (o *BulkResponseError) GetShard() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Shard
}

// GetShardOk returns a tuple with the Shard field value
// and a boolean to check if the value has been set.
func (o *BulkResponseError) GetShardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shard, true
}

// SetShard sets field value
func (o *BulkResponseError) SetShard(v string) {
	o.Shard = v
}

// GetType returns the Type field value
func (o *BulkResponseError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BulkResponseError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BulkResponseError) SetType(v string) {
	o.Type = v
}

func (o BulkResponseError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkResponseError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	toSerialize["index_uuid"] = o.IndexUuid
	toSerialize["reason"] = o.Reason
	toSerialize["shard"] = o.Shard
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *BulkResponseError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"index_uuid",
		"reason",
		"shard",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkResponseError := _BulkResponseError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBulkResponseError)

	if err != nil {
		return err
	}

	*o = BulkResponseError(varBulkResponseError)

	return err
}

type NullableBulkResponseError struct {
	value *BulkResponseError
	isSet bool
}

func (v NullableBulkResponseError) Get() *BulkResponseError {
	return v.value
}

func (v *NullableBulkResponseError) Set(val *BulkResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkResponseError(val *BulkResponseError) *NullableBulkResponseError {
	return &NullableBulkResponseError{value: val, isSet: true}
}

func (v NullableBulkResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


