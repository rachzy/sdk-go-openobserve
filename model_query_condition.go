/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryCondition{}

// QueryCondition struct for QueryCondition
type QueryCondition struct {
	Aggregation NullableAggregation `json:"aggregation,omitempty"`
	Conditions []Condition `json:"conditions,omitempty"`
	MultiTimeRange []CompareHistoricData `json:"multi_time_range,omitempty"`
	Promql NullableString `json:"promql,omitempty"`
	PromqlCondition NullableCondition `json:"promql_condition,omitempty"`
	SearchEventType NullableSearchEventType `json:"search_event_type,omitempty"`
	Sql NullableString `json:"sql,omitempty"`
	Type *QueryType `json:"type,omitempty"`
	VrlFunction NullableString `json:"vrl_function,omitempty"`
}

// NewQueryCondition instantiates a new QueryCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryCondition() *QueryCondition {
	this := QueryCondition{}
	return &this
}

// NewQueryConditionWithDefaults instantiates a new QueryCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryConditionWithDefaults() *QueryCondition {
	this := QueryCondition{}
	return &this
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetAggregation() Aggregation {
	if o == nil || IsNil(o.Aggregation.Get()) {
		var ret Aggregation
		return ret
	}
	return *o.Aggregation.Get()
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetAggregationOk() (*Aggregation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Aggregation.Get(), o.Aggregation.IsSet()
}

// HasAggregation returns a boolean if a field has been set.
func (o *QueryCondition) HasAggregation() bool {
	if o != nil && o.Aggregation.IsSet() {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given NullableAggregation and assigns it to the Aggregation field.
func (o *QueryCondition) SetAggregation(v Aggregation) {
	o.Aggregation.Set(&v)
}
// SetAggregationNil sets the value for Aggregation to be an explicit nil
func (o *QueryCondition) SetAggregationNil() {
	o.Aggregation.Set(nil)
}

// UnsetAggregation ensures that no value is present for Aggregation, not even an explicit nil
func (o *QueryCondition) UnsetAggregation() {
	o.Aggregation.Unset()
}

// GetConditions returns the Conditions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetConditions() []Condition {
	if o == nil {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetConditionsOk() ([]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *QueryCondition) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *QueryCondition) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetMultiTimeRange returns the MultiTimeRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetMultiTimeRange() []CompareHistoricData {
	if o == nil {
		var ret []CompareHistoricData
		return ret
	}
	return o.MultiTimeRange
}

// GetMultiTimeRangeOk returns a tuple with the MultiTimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetMultiTimeRangeOk() ([]CompareHistoricData, bool) {
	if o == nil || IsNil(o.MultiTimeRange) {
		return nil, false
	}
	return o.MultiTimeRange, true
}

// HasMultiTimeRange returns a boolean if a field has been set.
func (o *QueryCondition) HasMultiTimeRange() bool {
	if o != nil && !IsNil(o.MultiTimeRange) {
		return true
	}

	return false
}

// SetMultiTimeRange gets a reference to the given []CompareHistoricData and assigns it to the MultiTimeRange field.
func (o *QueryCondition) SetMultiTimeRange(v []CompareHistoricData) {
	o.MultiTimeRange = v
}

// GetPromql returns the Promql field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetPromql() string {
	if o == nil || IsNil(o.Promql.Get()) {
		var ret string
		return ret
	}
	return *o.Promql.Get()
}

// GetPromqlOk returns a tuple with the Promql field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetPromqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Promql.Get(), o.Promql.IsSet()
}

// HasPromql returns a boolean if a field has been set.
func (o *QueryCondition) HasPromql() bool {
	if o != nil && o.Promql.IsSet() {
		return true
	}

	return false
}

// SetPromql gets a reference to the given NullableString and assigns it to the Promql field.
func (o *QueryCondition) SetPromql(v string) {
	o.Promql.Set(&v)
}
// SetPromqlNil sets the value for Promql to be an explicit nil
func (o *QueryCondition) SetPromqlNil() {
	o.Promql.Set(nil)
}

// UnsetPromql ensures that no value is present for Promql, not even an explicit nil
func (o *QueryCondition) UnsetPromql() {
	o.Promql.Unset()
}

// GetPromqlCondition returns the PromqlCondition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetPromqlCondition() Condition {
	if o == nil || IsNil(o.PromqlCondition.Get()) {
		var ret Condition
		return ret
	}
	return *o.PromqlCondition.Get()
}

// GetPromqlConditionOk returns a tuple with the PromqlCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetPromqlConditionOk() (*Condition, bool) {
	if o == nil {
		return nil, false
	}
	return o.PromqlCondition.Get(), o.PromqlCondition.IsSet()
}

// HasPromqlCondition returns a boolean if a field has been set.
func (o *QueryCondition) HasPromqlCondition() bool {
	if o != nil && o.PromqlCondition.IsSet() {
		return true
	}

	return false
}

// SetPromqlCondition gets a reference to the given NullableCondition and assigns it to the PromqlCondition field.
func (o *QueryCondition) SetPromqlCondition(v Condition) {
	o.PromqlCondition.Set(&v)
}
// SetPromqlConditionNil sets the value for PromqlCondition to be an explicit nil
func (o *QueryCondition) SetPromqlConditionNil() {
	o.PromqlCondition.Set(nil)
}

// UnsetPromqlCondition ensures that no value is present for PromqlCondition, not even an explicit nil
func (o *QueryCondition) UnsetPromqlCondition() {
	o.PromqlCondition.Unset()
}

// GetSearchEventType returns the SearchEventType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetSearchEventType() SearchEventType {
	if o == nil || IsNil(o.SearchEventType.Get()) {
		var ret SearchEventType
		return ret
	}
	return *o.SearchEventType.Get()
}

// GetSearchEventTypeOk returns a tuple with the SearchEventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetSearchEventTypeOk() (*SearchEventType, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchEventType.Get(), o.SearchEventType.IsSet()
}

// HasSearchEventType returns a boolean if a field has been set.
func (o *QueryCondition) HasSearchEventType() bool {
	if o != nil && o.SearchEventType.IsSet() {
		return true
	}

	return false
}

// SetSearchEventType gets a reference to the given NullableSearchEventType and assigns it to the SearchEventType field.
func (o *QueryCondition) SetSearchEventType(v SearchEventType) {
	o.SearchEventType.Set(&v)
}
// SetSearchEventTypeNil sets the value for SearchEventType to be an explicit nil
func (o *QueryCondition) SetSearchEventTypeNil() {
	o.SearchEventType.Set(nil)
}

// UnsetSearchEventType ensures that no value is present for SearchEventType, not even an explicit nil
func (o *QueryCondition) UnsetSearchEventType() {
	o.SearchEventType.Unset()
}

// GetSql returns the Sql field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetSql() string {
	if o == nil || IsNil(o.Sql.Get()) {
		var ret string
		return ret
	}
	return *o.Sql.Get()
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetSqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sql.Get(), o.Sql.IsSet()
}

// HasSql returns a boolean if a field has been set.
func (o *QueryCondition) HasSql() bool {
	if o != nil && o.Sql.IsSet() {
		return true
	}

	return false
}

// SetSql gets a reference to the given NullableString and assigns it to the Sql field.
func (o *QueryCondition) SetSql(v string) {
	o.Sql.Set(&v)
}
// SetSqlNil sets the value for Sql to be an explicit nil
func (o *QueryCondition) SetSqlNil() {
	o.Sql.Set(nil)
}

// UnsetSql ensures that no value is present for Sql, not even an explicit nil
func (o *QueryCondition) UnsetSql() {
	o.Sql.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QueryCondition) GetType() QueryType {
	if o == nil || IsNil(o.Type) {
		var ret QueryType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCondition) GetTypeOk() (*QueryType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QueryCondition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given QueryType and assigns it to the Type field.
func (o *QueryCondition) SetType(v QueryType) {
	o.Type = &v
}

// GetVrlFunction returns the VrlFunction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryCondition) GetVrlFunction() string {
	if o == nil || IsNil(o.VrlFunction.Get()) {
		var ret string
		return ret
	}
	return *o.VrlFunction.Get()
}

// GetVrlFunctionOk returns a tuple with the VrlFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetVrlFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VrlFunction.Get(), o.VrlFunction.IsSet()
}

// HasVrlFunction returns a boolean if a field has been set.
func (o *QueryCondition) HasVrlFunction() bool {
	if o != nil && o.VrlFunction.IsSet() {
		return true
	}

	return false
}

// SetVrlFunction gets a reference to the given NullableString and assigns it to the VrlFunction field.
func (o *QueryCondition) SetVrlFunction(v string) {
	o.VrlFunction.Set(&v)
}
// SetVrlFunctionNil sets the value for VrlFunction to be an explicit nil
func (o *QueryCondition) SetVrlFunctionNil() {
	o.VrlFunction.Set(nil)
}

// UnsetVrlFunction ensures that no value is present for VrlFunction, not even an explicit nil
func (o *QueryCondition) UnsetVrlFunction() {
	o.VrlFunction.Unset()
}

func (o QueryCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregation.IsSet() {
		toSerialize["aggregation"] = o.Aggregation.Get()
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.MultiTimeRange != nil {
		toSerialize["multi_time_range"] = o.MultiTimeRange
	}
	if o.Promql.IsSet() {
		toSerialize["promql"] = o.Promql.Get()
	}
	if o.PromqlCondition.IsSet() {
		toSerialize["promql_condition"] = o.PromqlCondition.Get()
	}
	if o.SearchEventType.IsSet() {
		toSerialize["search_event_type"] = o.SearchEventType.Get()
	}
	if o.Sql.IsSet() {
		toSerialize["sql"] = o.Sql.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.VrlFunction.IsSet() {
		toSerialize["vrl_function"] = o.VrlFunction.Get()
	}
	return toSerialize, nil
}

type NullableQueryCondition struct {
	value *QueryCondition
	isSet bool
}

func (v NullableQueryCondition) Get() *QueryCondition {
	return v.value
}

func (v *NullableQueryCondition) Set(val *QueryCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryCondition(val *QueryCondition) *NullableQueryCondition {
	return &NullableQueryCondition{value: val, isSet: true}
}

func (v NullableQueryCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


