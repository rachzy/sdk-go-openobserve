/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HTTPType the model 'HTTPType'
type HTTPType string

// List of HTTPType
const (
	POST HTTPType = "post"
	PUT HTTPType = "put"
	GET HTTPType = "get"
)

// All allowed values of HTTPType enum
var AllowedHTTPTypeEnumValues = []HTTPType{
	"post",
	"put",
	"get",
}

func (v *HTTPType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HTTPType(value)
	for _, existing := range AllowedHTTPTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HTTPType", value)
}

// NewHTTPTypeFromValue returns a pointer to a valid HTTPType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHTTPTypeFromValue(v string) (*HTTPType, error) {
	ev := HTTPType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HTTPType: valid values are %v", v, AllowedHTTPTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HTTPType) IsValid() bool {
	for _, existing := range AllowedHTTPTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HTTPType value
func (v HTTPType) Ptr() *HTTPType {
	return &v
}

type NullableHTTPType struct {
	value *HTTPType
	isSet bool
}

func (v NullableHTTPType) Get() *HTTPType {
	return v.value
}

func (v *NullableHTTPType) Set(val *HTTPType) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPType) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPType(val *HTTPType) *NullableHTTPType {
	return &NullableHTTPType{value: val, isSet: true}
}

func (v NullableHTTPType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

