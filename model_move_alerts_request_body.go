/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MoveAlertsRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveAlertsRequestBody{}

// MoveAlertsRequestBody HTTP request body for `MoveAlerts` endpoint.
type MoveAlertsRequestBody struct {
	// IDs of the alerts to move.
	AlertIds []Ksuid `json:"alert_ids"`
	// Indicates the folder to which alerts should be moved.
	DstFolderId string `json:"dst_folder_id"`
}

type _MoveAlertsRequestBody MoveAlertsRequestBody

// NewMoveAlertsRequestBody instantiates a new MoveAlertsRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveAlertsRequestBody(alertIds []Ksuid, dstFolderId string) *MoveAlertsRequestBody {
	this := MoveAlertsRequestBody{}
	this.AlertIds = alertIds
	this.DstFolderId = dstFolderId
	return &this
}

// NewMoveAlertsRequestBodyWithDefaults instantiates a new MoveAlertsRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveAlertsRequestBodyWithDefaults() *MoveAlertsRequestBody {
	this := MoveAlertsRequestBody{}
	return &this
}

// GetAlertIds returns the AlertIds field value
func (o *MoveAlertsRequestBody) GetAlertIds() []Ksuid {
	if o == nil {
		var ret []Ksuid
		return ret
	}

	return o.AlertIds
}

// GetAlertIdsOk returns a tuple with the AlertIds field value
// and a boolean to check if the value has been set.
func (o *MoveAlertsRequestBody) GetAlertIdsOk() ([]Ksuid, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertIds, true
}

// SetAlertIds sets field value
func (o *MoveAlertsRequestBody) SetAlertIds(v []Ksuid) {
	o.AlertIds = v
}

// GetDstFolderId returns the DstFolderId field value
func (o *MoveAlertsRequestBody) GetDstFolderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DstFolderId
}

// GetDstFolderIdOk returns a tuple with the DstFolderId field value
// and a boolean to check if the value has been set.
func (o *MoveAlertsRequestBody) GetDstFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DstFolderId, true
}

// SetDstFolderId sets field value
func (o *MoveAlertsRequestBody) SetDstFolderId(v string) {
	o.DstFolderId = v
}

func (o MoveAlertsRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveAlertsRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alert_ids"] = o.AlertIds
	toSerialize["dst_folder_id"] = o.DstFolderId
	return toSerialize, nil
}

func (o *MoveAlertsRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alert_ids",
		"dst_folder_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMoveAlertsRequestBody := _MoveAlertsRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMoveAlertsRequestBody)

	if err != nil {
		return err
	}

	*o = MoveAlertsRequestBody(varMoveAlertsRequestBody)

	return err
}

type NullableMoveAlertsRequestBody struct {
	value *MoveAlertsRequestBody
	isSet bool
}

func (v NullableMoveAlertsRequestBody) Get() *MoveAlertsRequestBody {
	return v.value
}

func (v *NullableMoveAlertsRequestBody) Set(val *MoveAlertsRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveAlertsRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveAlertsRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveAlertsRequestBody(val *MoveAlertsRequestBody) *NullableMoveAlertsRequestBody {
	return &NullableMoveAlertsRequestBody{value: val, isSet: true}
}

func (v NullableMoveAlertsRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveAlertsRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


