/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BulkResponseItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkResponseItem{}

// BulkResponseItem struct for BulkResponseItem
type BulkResponseItem struct {
	Id string `json:"_id"`
	Index string `json:"_index"`
	PrimaryTerm NullableInt64 `json:"_primary_term,omitempty"`
	SeqNo NullableInt64 `json:"_seq_no,omitempty"`
	Shards NullableShardResponse `json:"_shards,omitempty"`
	Version NullableInt64 `json:"_version,omitempty"`
	Error NullableBulkResponseError `json:"error,omitempty"`
	OriginalRecord map[string]interface{} `json:"originalRecord,omitempty"`
	Result NullableString `json:"result,omitempty"`
	Status int64 `json:"status"`
}

type _BulkResponseItem BulkResponseItem

// NewBulkResponseItem instantiates a new BulkResponseItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkResponseItem(id string, index string, status int64) *BulkResponseItem {
	this := BulkResponseItem{}
	this.Id = id
	this.Index = index
	this.Status = status
	return &this
}

// NewBulkResponseItemWithDefaults instantiates a new BulkResponseItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkResponseItemWithDefaults() *BulkResponseItem {
	this := BulkResponseItem{}
	return &this
}

// GetId returns the Id field value
func (o *BulkResponseItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BulkResponseItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BulkResponseItem) SetId(v string) {
	o.Id = v
}

// GetIndex returns the Index field value
func (o *BulkResponseItem) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *BulkResponseItem) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *BulkResponseItem) SetIndex(v string) {
	o.Index = v
}

// GetPrimaryTerm returns the PrimaryTerm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResponseItem) GetPrimaryTerm() int64 {
	if o == nil || IsNil(o.PrimaryTerm.Get()) {
		var ret int64
		return ret
	}
	return *o.PrimaryTerm.Get()
}

// GetPrimaryTermOk returns a tuple with the PrimaryTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResponseItem) GetPrimaryTermOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryTerm.Get(), o.PrimaryTerm.IsSet()
}

// HasPrimaryTerm returns a boolean if a field has been set.
func (o *BulkResponseItem) HasPrimaryTerm() bool {
	if o != nil && o.PrimaryTerm.IsSet() {
		return true
	}

	return false
}

// SetPrimaryTerm gets a reference to the given NullableInt64 and assigns it to the PrimaryTerm field.
func (o *BulkResponseItem) SetPrimaryTerm(v int64) {
	o.PrimaryTerm.Set(&v)
}
// SetPrimaryTermNil sets the value for PrimaryTerm to be an explicit nil
func (o *BulkResponseItem) SetPrimaryTermNil() {
	o.PrimaryTerm.Set(nil)
}

// UnsetPrimaryTerm ensures that no value is present for PrimaryTerm, not even an explicit nil
func (o *BulkResponseItem) UnsetPrimaryTerm() {
	o.PrimaryTerm.Unset()
}

// GetSeqNo returns the SeqNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResponseItem) GetSeqNo() int64 {
	if o == nil || IsNil(o.SeqNo.Get()) {
		var ret int64
		return ret
	}
	return *o.SeqNo.Get()
}

// GetSeqNoOk returns a tuple with the SeqNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResponseItem) GetSeqNoOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeqNo.Get(), o.SeqNo.IsSet()
}

// HasSeqNo returns a boolean if a field has been set.
func (o *BulkResponseItem) HasSeqNo() bool {
	if o != nil && o.SeqNo.IsSet() {
		return true
	}

	return false
}

// SetSeqNo gets a reference to the given NullableInt64 and assigns it to the SeqNo field.
func (o *BulkResponseItem) SetSeqNo(v int64) {
	o.SeqNo.Set(&v)
}
// SetSeqNoNil sets the value for SeqNo to be an explicit nil
func (o *BulkResponseItem) SetSeqNoNil() {
	o.SeqNo.Set(nil)
}

// UnsetSeqNo ensures that no value is present for SeqNo, not even an explicit nil
func (o *BulkResponseItem) UnsetSeqNo() {
	o.SeqNo.Unset()
}

// GetShards returns the Shards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResponseItem) GetShards() ShardResponse {
	if o == nil || IsNil(o.Shards.Get()) {
		var ret ShardResponse
		return ret
	}
	return *o.Shards.Get()
}

// GetShardsOk returns a tuple with the Shards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResponseItem) GetShardsOk() (*ShardResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shards.Get(), o.Shards.IsSet()
}

// HasShards returns a boolean if a field has been set.
func (o *BulkResponseItem) HasShards() bool {
	if o != nil && o.Shards.IsSet() {
		return true
	}

	return false
}

// SetShards gets a reference to the given NullableShardResponse and assigns it to the Shards field.
func (o *BulkResponseItem) SetShards(v ShardResponse) {
	o.Shards.Set(&v)
}
// SetShardsNil sets the value for Shards to be an explicit nil
func (o *BulkResponseItem) SetShardsNil() {
	o.Shards.Set(nil)
}

// UnsetShards ensures that no value is present for Shards, not even an explicit nil
func (o *BulkResponseItem) UnsetShards() {
	o.Shards.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResponseItem) GetVersion() int64 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int64
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResponseItem) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *BulkResponseItem) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt64 and assigns it to the Version field.
func (o *BulkResponseItem) SetVersion(v int64) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *BulkResponseItem) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *BulkResponseItem) UnsetVersion() {
	o.Version.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResponseItem) GetError() BulkResponseError {
	if o == nil || IsNil(o.Error.Get()) {
		var ret BulkResponseError
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResponseItem) GetErrorOk() (*BulkResponseError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *BulkResponseItem) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableBulkResponseError and assigns it to the Error field.
func (o *BulkResponseItem) SetError(v BulkResponseError) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *BulkResponseItem) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *BulkResponseItem) UnsetError() {
	o.Error.Unset()
}

// GetOriginalRecord returns the OriginalRecord field value if set, zero value otherwise.
func (o *BulkResponseItem) GetOriginalRecord() map[string]interface{} {
	if o == nil || IsNil(o.OriginalRecord) {
		var ret map[string]interface{}
		return ret
	}
	return o.OriginalRecord
}

// GetOriginalRecordOk returns a tuple with the OriginalRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkResponseItem) GetOriginalRecordOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OriginalRecord) {
		return map[string]interface{}{}, false
	}
	return o.OriginalRecord, true
}

// HasOriginalRecord returns a boolean if a field has been set.
func (o *BulkResponseItem) HasOriginalRecord() bool {
	if o != nil && !IsNil(o.OriginalRecord) {
		return true
	}

	return false
}

// SetOriginalRecord gets a reference to the given map[string]interface{} and assigns it to the OriginalRecord field.
func (o *BulkResponseItem) SetOriginalRecord(v map[string]interface{}) {
	o.OriginalRecord = v
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BulkResponseItem) GetResult() string {
	if o == nil || IsNil(o.Result.Get()) {
		var ret string
		return ret
	}
	return *o.Result.Get()
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BulkResponseItem) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result.Get(), o.Result.IsSet()
}

// HasResult returns a boolean if a field has been set.
func (o *BulkResponseItem) HasResult() bool {
	if o != nil && o.Result.IsSet() {
		return true
	}

	return false
}

// SetResult gets a reference to the given NullableString and assigns it to the Result field.
func (o *BulkResponseItem) SetResult(v string) {
	o.Result.Set(&v)
}
// SetResultNil sets the value for Result to be an explicit nil
func (o *BulkResponseItem) SetResultNil() {
	o.Result.Set(nil)
}

// UnsetResult ensures that no value is present for Result, not even an explicit nil
func (o *BulkResponseItem) UnsetResult() {
	o.Result.Unset()
}

// GetStatus returns the Status field value
func (o *BulkResponseItem) GetStatus() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BulkResponseItem) GetStatusOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BulkResponseItem) SetStatus(v int64) {
	o.Status = v
}

func (o BulkResponseItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkResponseItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_id"] = o.Id
	toSerialize["_index"] = o.Index
	if o.PrimaryTerm.IsSet() {
		toSerialize["_primary_term"] = o.PrimaryTerm.Get()
	}
	if o.SeqNo.IsSet() {
		toSerialize["_seq_no"] = o.SeqNo.Get()
	}
	if o.Shards.IsSet() {
		toSerialize["_shards"] = o.Shards.Get()
	}
	if o.Version.IsSet() {
		toSerialize["_version"] = o.Version.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if !IsNil(o.OriginalRecord) {
		toSerialize["originalRecord"] = o.OriginalRecord
	}
	if o.Result.IsSet() {
		toSerialize["result"] = o.Result.Get()
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *BulkResponseItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_id",
		"_index",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkResponseItem := _BulkResponseItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBulkResponseItem)

	if err != nil {
		return err
	}

	*o = BulkResponseItem(varBulkResponseItem)

	return err
}

type NullableBulkResponseItem struct {
	value *BulkResponseItem
	isSet bool
}

func (v NullableBulkResponseItem) Get() *BulkResponseItem {
	return v.value
}

func (v *NullableBulkResponseItem) Set(val *BulkResponseItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkResponseItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkResponseItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkResponseItem(val *BulkResponseItem) *NullableBulkResponseItem {
	return &NullableBulkResponseItem{value: val, isSet: true}
}

func (v NullableBulkResponseItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkResponseItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


