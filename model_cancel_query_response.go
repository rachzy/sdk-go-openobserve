/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancelQueryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelQueryResponse{}

// CancelQueryResponse struct for CancelQueryResponse
type CancelQueryResponse struct {
	IsSuccess bool `json:"is_success"`
	TraceId string `json:"trace_id"`
}

type _CancelQueryResponse CancelQueryResponse

// NewCancelQueryResponse instantiates a new CancelQueryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelQueryResponse(isSuccess bool, traceId string) *CancelQueryResponse {
	this := CancelQueryResponse{}
	this.IsSuccess = isSuccess
	this.TraceId = traceId
	return &this
}

// NewCancelQueryResponseWithDefaults instantiates a new CancelQueryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelQueryResponseWithDefaults() *CancelQueryResponse {
	this := CancelQueryResponse{}
	return &this
}

// GetIsSuccess returns the IsSuccess field value
func (o *CancelQueryResponse) GetIsSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value
// and a boolean to check if the value has been set.
func (o *CancelQueryResponse) GetIsSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSuccess, true
}

// SetIsSuccess sets field value
func (o *CancelQueryResponse) SetIsSuccess(v bool) {
	o.IsSuccess = v
}

// GetTraceId returns the TraceId field value
func (o *CancelQueryResponse) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *CancelQueryResponse) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *CancelQueryResponse) SetTraceId(v string) {
	o.TraceId = v
}

func (o CancelQueryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelQueryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_success"] = o.IsSuccess
	toSerialize["trace_id"] = o.TraceId
	return toSerialize, nil
}

func (o *CancelQueryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_success",
		"trace_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelQueryResponse := _CancelQueryResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelQueryResponse)

	if err != nil {
		return err
	}

	*o = CancelQueryResponse(varCancelQueryResponse)

	return err
}

type NullableCancelQueryResponse struct {
	value *CancelQueryResponse
	isSet bool
}

func (v NullableCancelQueryResponse) Get() *CancelQueryResponse {
	return v.value
}

func (v *NullableCancelQueryResponse) Set(val *CancelQueryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelQueryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelQueryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelQueryResponse(val *CancelQueryResponse) *NullableCancelQueryResponse {
	return &NullableCancelQueryResponse{value: val, isSet: true}
}

func (v NullableCancelQueryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelQueryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


