/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ShardResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShardResponse{}

// ShardResponse struct for ShardResponse
type ShardResponse struct {
	Failed int64 `json:"failed"`
	Successful int64 `json:"successful"`
	Total int64 `json:"total"`
}

type _ShardResponse ShardResponse

// NewShardResponse instantiates a new ShardResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShardResponse(failed int64, successful int64, total int64) *ShardResponse {
	this := ShardResponse{}
	this.Failed = failed
	this.Successful = successful
	this.Total = total
	return &this
}

// NewShardResponseWithDefaults instantiates a new ShardResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShardResponseWithDefaults() *ShardResponse {
	this := ShardResponse{}
	return &this
}

// GetFailed returns the Failed field value
func (o *ShardResponse) GetFailed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *ShardResponse) GetFailedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *ShardResponse) SetFailed(v int64) {
	o.Failed = v
}

// GetSuccessful returns the Successful field value
func (o *ShardResponse) GetSuccessful() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value
// and a boolean to check if the value has been set.
func (o *ShardResponse) GetSuccessfulOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Successful, true
}

// SetSuccessful sets field value
func (o *ShardResponse) SetSuccessful(v int64) {
	o.Successful = v
}

// GetTotal returns the Total field value
func (o *ShardResponse) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ShardResponse) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ShardResponse) SetTotal(v int64) {
	o.Total = v
}

func (o ShardResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShardResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["failed"] = o.Failed
	toSerialize["successful"] = o.Successful
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *ShardResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"failed",
		"successful",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShardResponse := _ShardResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShardResponse)

	if err != nil {
		return err
	}

	*o = ShardResponse(varShardResponse)

	return err
}

type NullableShardResponse struct {
	value *ShardResponse
	isSet bool
}

func (v NullableShardResponse) Get() *ShardResponse {
	return v.value
}

func (v *NullableShardResponse) Set(val *ShardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableShardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableShardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShardResponse(val *ShardResponse) *NullableShardResponse {
	return &NullableShardResponse{value: val, isSet: true}
}

func (v NullableShardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


