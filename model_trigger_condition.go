/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TriggerCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerCondition{}

// TriggerCondition struct for TriggerCondition
type TriggerCondition struct {
	Cron *string `json:"cron,omitempty"`
	Frequency *int64 `json:"frequency,omitempty"`
	FrequencyType *FrequencyType `json:"frequency_type,omitempty"`
	Operator *Operator `json:"operator,omitempty"`
	Period int64 `json:"period"`
	Silence *int64 `json:"silence,omitempty"`
	Threshold *int64 `json:"threshold,omitempty"`
	Timezone NullableString `json:"timezone,omitempty"`
	ToleranceInSecs NullableInt64 `json:"tolerance_in_secs,omitempty"`
}

type _TriggerCondition TriggerCondition

// NewTriggerCondition instantiates a new TriggerCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerCondition(period int64) *TriggerCondition {
	this := TriggerCondition{}
	this.Period = period
	return &this
}

// NewTriggerConditionWithDefaults instantiates a new TriggerCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerConditionWithDefaults() *TriggerCondition {
	this := TriggerCondition{}
	return &this
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *TriggerCondition) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *TriggerCondition) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *TriggerCondition) SetCron(v string) {
	o.Cron = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *TriggerCondition) GetFrequency() int64 {
	if o == nil || IsNil(o.Frequency) {
		var ret int64
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetFrequencyOk() (*int64, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *TriggerCondition) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given int64 and assigns it to the Frequency field.
func (o *TriggerCondition) SetFrequency(v int64) {
	o.Frequency = &v
}

// GetFrequencyType returns the FrequencyType field value if set, zero value otherwise.
func (o *TriggerCondition) GetFrequencyType() FrequencyType {
	if o == nil || IsNil(o.FrequencyType) {
		var ret FrequencyType
		return ret
	}
	return *o.FrequencyType
}

// GetFrequencyTypeOk returns a tuple with the FrequencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetFrequencyTypeOk() (*FrequencyType, bool) {
	if o == nil || IsNil(o.FrequencyType) {
		return nil, false
	}
	return o.FrequencyType, true
}

// HasFrequencyType returns a boolean if a field has been set.
func (o *TriggerCondition) HasFrequencyType() bool {
	if o != nil && !IsNil(o.FrequencyType) {
		return true
	}

	return false
}

// SetFrequencyType gets a reference to the given FrequencyType and assigns it to the FrequencyType field.
func (o *TriggerCondition) SetFrequencyType(v FrequencyType) {
	o.FrequencyType = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *TriggerCondition) GetOperator() Operator {
	if o == nil || IsNil(o.Operator) {
		var ret Operator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetOperatorOk() (*Operator, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *TriggerCondition) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given Operator and assigns it to the Operator field.
func (o *TriggerCondition) SetOperator(v Operator) {
	o.Operator = &v
}

// GetPeriod returns the Period field value
func (o *TriggerCondition) GetPeriod() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetPeriodOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *TriggerCondition) SetPeriod(v int64) {
	o.Period = v
}

// GetSilence returns the Silence field value if set, zero value otherwise.
func (o *TriggerCondition) GetSilence() int64 {
	if o == nil || IsNil(o.Silence) {
		var ret int64
		return ret
	}
	return *o.Silence
}

// GetSilenceOk returns a tuple with the Silence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetSilenceOk() (*int64, bool) {
	if o == nil || IsNil(o.Silence) {
		return nil, false
	}
	return o.Silence, true
}

// HasSilence returns a boolean if a field has been set.
func (o *TriggerCondition) HasSilence() bool {
	if o != nil && !IsNil(o.Silence) {
		return true
	}

	return false
}

// SetSilence gets a reference to the given int64 and assigns it to the Silence field.
func (o *TriggerCondition) SetSilence(v int64) {
	o.Silence = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *TriggerCondition) GetThreshold() int64 {
	if o == nil || IsNil(o.Threshold) {
		var ret int64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerCondition) GetThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *TriggerCondition) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int64 and assigns it to the Threshold field.
func (o *TriggerCondition) SetThreshold(v int64) {
	o.Threshold = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TriggerCondition) GetTimezone() string {
	if o == nil || IsNil(o.Timezone.Get()) {
		var ret string
		return ret
	}
	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TriggerCondition) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// HasTimezone returns a boolean if a field has been set.
func (o *TriggerCondition) HasTimezone() bool {
	if o != nil && o.Timezone.IsSet() {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given NullableString and assigns it to the Timezone field.
func (o *TriggerCondition) SetTimezone(v string) {
	o.Timezone.Set(&v)
}
// SetTimezoneNil sets the value for Timezone to be an explicit nil
func (o *TriggerCondition) SetTimezoneNil() {
	o.Timezone.Set(nil)
}

// UnsetTimezone ensures that no value is present for Timezone, not even an explicit nil
func (o *TriggerCondition) UnsetTimezone() {
	o.Timezone.Unset()
}

// GetToleranceInSecs returns the ToleranceInSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TriggerCondition) GetToleranceInSecs() int64 {
	if o == nil || IsNil(o.ToleranceInSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ToleranceInSecs.Get()
}

// GetToleranceInSecsOk returns a tuple with the ToleranceInSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TriggerCondition) GetToleranceInSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToleranceInSecs.Get(), o.ToleranceInSecs.IsSet()
}

// HasToleranceInSecs returns a boolean if a field has been set.
func (o *TriggerCondition) HasToleranceInSecs() bool {
	if o != nil && o.ToleranceInSecs.IsSet() {
		return true
	}

	return false
}

// SetToleranceInSecs gets a reference to the given NullableInt64 and assigns it to the ToleranceInSecs field.
func (o *TriggerCondition) SetToleranceInSecs(v int64) {
	o.ToleranceInSecs.Set(&v)
}
// SetToleranceInSecsNil sets the value for ToleranceInSecs to be an explicit nil
func (o *TriggerCondition) SetToleranceInSecsNil() {
	o.ToleranceInSecs.Set(nil)
}

// UnsetToleranceInSecs ensures that no value is present for ToleranceInSecs, not even an explicit nil
func (o *TriggerCondition) UnsetToleranceInSecs() {
	o.ToleranceInSecs.Unset()
}

func (o TriggerCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.FrequencyType) {
		toSerialize["frequency_type"] = o.FrequencyType
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	toSerialize["period"] = o.Period
	if !IsNil(o.Silence) {
		toSerialize["silence"] = o.Silence
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if o.Timezone.IsSet() {
		toSerialize["timezone"] = o.Timezone.Get()
	}
	if o.ToleranceInSecs.IsSet() {
		toSerialize["tolerance_in_secs"] = o.ToleranceInSecs.Get()
	}
	return toSerialize, nil
}

func (o *TriggerCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"period",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTriggerCondition := _TriggerCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTriggerCondition)

	if err != nil {
		return err
	}

	*o = TriggerCondition(varTriggerCondition)

	return err
}

type NullableTriggerCondition struct {
	value *TriggerCondition
	isSet bool
}

func (v NullableTriggerCondition) Get() *TriggerCondition {
	return v.value
}

func (v *NullableTriggerCondition) Set(val *TriggerCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerCondition(val *TriggerCondition) *NullableTriggerCondition {
	return &NullableTriggerCondition{value: val, isSet: true}
}

func (v NullableTriggerCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


