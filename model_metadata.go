/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Metadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metadata{}

// Metadata struct for Metadata
type Metadata struct {
	Help string `json:"help"`
	MetricFamilyName string `json:"metric_family_name"`
	MetricType MetricType `json:"metric_type"`
	Unit string `json:"unit"`
}

type _Metadata Metadata

// NewMetadata instantiates a new Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata(help string, metricFamilyName string, metricType MetricType, unit string) *Metadata {
	this := Metadata{}
	this.Help = help
	this.MetricFamilyName = metricFamilyName
	this.MetricType = metricType
	this.Unit = unit
	return &this
}

// NewMetadataWithDefaults instantiates a new Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithDefaults() *Metadata {
	this := Metadata{}
	return &this
}

// GetHelp returns the Help field value
func (o *Metadata) GetHelp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Help
}

// GetHelpOk returns a tuple with the Help field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetHelpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Help, true
}

// SetHelp sets field value
func (o *Metadata) SetHelp(v string) {
	o.Help = v
}

// GetMetricFamilyName returns the MetricFamilyName field value
func (o *Metadata) GetMetricFamilyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricFamilyName
}

// GetMetricFamilyNameOk returns a tuple with the MetricFamilyName field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetMetricFamilyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricFamilyName, true
}

// SetMetricFamilyName sets field value
func (o *Metadata) SetMetricFamilyName(v string) {
	o.MetricFamilyName = v
}

// GetMetricType returns the MetricType field value
func (o *Metadata) GetMetricType() MetricType {
	if o == nil {
		var ret MetricType
		return ret
	}

	return o.MetricType
}

// GetMetricTypeOk returns a tuple with the MetricType field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetMetricTypeOk() (*MetricType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricType, true
}

// SetMetricType sets field value
func (o *Metadata) SetMetricType(v MetricType) {
	o.MetricType = v
}

// GetUnit returns the Unit field value
func (o *Metadata) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *Metadata) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *Metadata) SetUnit(v string) {
	o.Unit = v
}

func (o Metadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["help"] = o.Help
	toSerialize["metric_family_name"] = o.MetricFamilyName
	toSerialize["metric_type"] = o.MetricType
	toSerialize["unit"] = o.Unit
	return toSerialize, nil
}

func (o *Metadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"help",
		"metric_family_name",
		"metric_type",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadata := _Metadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadata)

	if err != nil {
		return err
	}

	*o = Metadata(varMetadata)

	return err
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


