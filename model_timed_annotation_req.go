/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimedAnnotationReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimedAnnotationReq{}

// TimedAnnotationReq struct for TimedAnnotationReq
type TimedAnnotationReq struct {
	TimedAnnotations []TimedAnnotation `json:"timed_annotations"`
}

type _TimedAnnotationReq TimedAnnotationReq

// NewTimedAnnotationReq instantiates a new TimedAnnotationReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimedAnnotationReq(timedAnnotations []TimedAnnotation) *TimedAnnotationReq {
	this := TimedAnnotationReq{}
	this.TimedAnnotations = timedAnnotations
	return &this
}

// NewTimedAnnotationReqWithDefaults instantiates a new TimedAnnotationReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimedAnnotationReqWithDefaults() *TimedAnnotationReq {
	this := TimedAnnotationReq{}
	return &this
}

// GetTimedAnnotations returns the TimedAnnotations field value
func (o *TimedAnnotationReq) GetTimedAnnotations() []TimedAnnotation {
	if o == nil {
		var ret []TimedAnnotation
		return ret
	}

	return o.TimedAnnotations
}

// GetTimedAnnotationsOk returns a tuple with the TimedAnnotations field value
// and a boolean to check if the value has been set.
func (o *TimedAnnotationReq) GetTimedAnnotationsOk() ([]TimedAnnotation, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimedAnnotations, true
}

// SetTimedAnnotations sets field value
func (o *TimedAnnotationReq) SetTimedAnnotations(v []TimedAnnotation) {
	o.TimedAnnotations = v
}

func (o TimedAnnotationReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimedAnnotationReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timed_annotations"] = o.TimedAnnotations
	return toSerialize, nil
}

func (o *TimedAnnotationReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timed_annotations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimedAnnotationReq := _TimedAnnotationReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimedAnnotationReq)

	if err != nil {
		return err
	}

	*o = TimedAnnotationReq(varTimedAnnotationReq)

	return err
}

type NullableTimedAnnotationReq struct {
	value *TimedAnnotationReq
	isSet bool
}

func (v NullableTimedAnnotationReq) Get() *TimedAnnotationReq {
	return v.value
}

func (v *NullableTimedAnnotationReq) Set(val *TimedAnnotationReq) {
	v.value = val
	v.isSet = true
}

func (v NullableTimedAnnotationReq) IsSet() bool {
	return v.isSet
}

func (v *NullableTimedAnnotationReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimedAnnotationReq(val *TimedAnnotationReq) *NullableTimedAnnotationReq {
	return &NullableTimedAnnotationReq{value: val, isSet: true}
}

func (v NullableTimedAnnotationReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimedAnnotationReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


