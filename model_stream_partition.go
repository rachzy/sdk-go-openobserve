/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreamPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamPartition{}

// StreamPartition struct for StreamPartition
type StreamPartition struct {
	Disabled *bool `json:"disabled,omitempty"`
	Field string `json:"field"`
	Types *StreamPartitionType `json:"types,omitempty"`
}

type _StreamPartition StreamPartition

// NewStreamPartition instantiates a new StreamPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamPartition(field string) *StreamPartition {
	this := StreamPartition{}
	this.Field = field
	return &this
}

// NewStreamPartitionWithDefaults instantiates a new StreamPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamPartitionWithDefaults() *StreamPartition {
	this := StreamPartition{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *StreamPartition) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPartition) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *StreamPartition) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *StreamPartition) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetField returns the Field field value
func (o *StreamPartition) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *StreamPartition) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *StreamPartition) SetField(v string) {
	o.Field = v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *StreamPartition) GetTypes() StreamPartitionType {
	if o == nil || IsNil(o.Types) {
		var ret StreamPartitionType
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamPartition) GetTypesOk() (*StreamPartitionType, bool) {
	if o == nil || IsNil(o.Types) {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *StreamPartition) HasTypes() bool {
	if o != nil && !IsNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given StreamPartitionType and assigns it to the Types field.
func (o *StreamPartition) SetTypes(v StreamPartitionType) {
	o.Types = &v
}

func (o StreamPartition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	toSerialize["field"] = o.Field
	if !IsNil(o.Types) {
		toSerialize["types"] = o.Types
	}
	return toSerialize, nil
}

func (o *StreamPartition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamPartition := _StreamPartition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamPartition)

	if err != nil {
		return err
	}

	*o = StreamPartition(varStreamPartition)

	return err
}

type NullableStreamPartition struct {
	value *StreamPartition
	isSet bool
}

func (v NullableStreamPartition) Get() *StreamPartition {
	return v.value
}

func (v *NullableStreamPartition) Set(val *StreamPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamPartition(val *StreamPartition) *NullableStreamPartition {
	return &NullableStreamPartition{value: val, isSet: true}
}

func (v NullableStreamPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


