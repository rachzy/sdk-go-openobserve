/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryStatusResponse{}

// QueryStatusResponse struct for QueryStatusResponse
type QueryStatusResponse struct {
	Status []QueryStatus `json:"status"`
}

type _QueryStatusResponse QueryStatusResponse

// NewQueryStatusResponse instantiates a new QueryStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryStatusResponse(status []QueryStatus) *QueryStatusResponse {
	this := QueryStatusResponse{}
	this.Status = status
	return &this
}

// NewQueryStatusResponseWithDefaults instantiates a new QueryStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryStatusResponseWithDefaults() *QueryStatusResponse {
	this := QueryStatusResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *QueryStatusResponse) GetStatus() []QueryStatus {
	if o == nil {
		var ret []QueryStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *QueryStatusResponse) GetStatusOk() ([]QueryStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *QueryStatusResponse) SetStatus(v []QueryStatus) {
	o.Status = v
}

func (o QueryStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *QueryStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryStatusResponse := _QueryStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryStatusResponse)

	if err != nil {
		return err
	}

	*o = QueryStatusResponse(varQueryStatusResponse)

	return err
}

type NullableQueryStatusResponse struct {
	value *QueryStatusResponse
	isSet bool
}

func (v NullableQueryStatusResponse) Get() *QueryStatusResponse {
	return v.value
}

func (v *NullableQueryStatusResponse) Set(val *QueryStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryStatusResponse(val *QueryStatusResponse) *NullableQueryStatusResponse {
	return &NullableQueryStatusResponse{value: val, isSet: true}
}

func (v NullableQueryStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


