/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PipelineSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineSummary{}

// PipelineSummary struct for PipelineSummary
type PipelineSummary struct {
	NumRealtime int64 `json:"num_realtime"`
	NumScheduled int64 `json:"num_scheduled"`
}

type _PipelineSummary PipelineSummary

// NewPipelineSummary instantiates a new PipelineSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineSummary(numRealtime int64, numScheduled int64) *PipelineSummary {
	this := PipelineSummary{}
	this.NumRealtime = numRealtime
	this.NumScheduled = numScheduled
	return &this
}

// NewPipelineSummaryWithDefaults instantiates a new PipelineSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineSummaryWithDefaults() *PipelineSummary {
	this := PipelineSummary{}
	return &this
}

// GetNumRealtime returns the NumRealtime field value
func (o *PipelineSummary) GetNumRealtime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumRealtime
}

// GetNumRealtimeOk returns a tuple with the NumRealtime field value
// and a boolean to check if the value has been set.
func (o *PipelineSummary) GetNumRealtimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumRealtime, true
}

// SetNumRealtime sets field value
func (o *PipelineSummary) SetNumRealtime(v int64) {
	o.NumRealtime = v
}

// GetNumScheduled returns the NumScheduled field value
func (o *PipelineSummary) GetNumScheduled() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumScheduled
}

// GetNumScheduledOk returns a tuple with the NumScheduled field value
// and a boolean to check if the value has been set.
func (o *PipelineSummary) GetNumScheduledOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumScheduled, true
}

// SetNumScheduled sets field value
func (o *PipelineSummary) SetNumScheduled(v int64) {
	o.NumScheduled = v
}

func (o PipelineSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["num_realtime"] = o.NumRealtime
	toSerialize["num_scheduled"] = o.NumScheduled
	return toSerialize, nil
}

func (o *PipelineSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"num_realtime",
		"num_scheduled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPipelineSummary := _PipelineSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPipelineSummary)

	if err != nil {
		return err
	}

	*o = PipelineSummary(varPipelineSummary)

	return err
}

type NullablePipelineSummary struct {
	value *PipelineSummary
	isSet bool
}

func (v NullablePipelineSummary) Get() *PipelineSummary {
	return v.value
}

func (v *NullablePipelineSummary) Set(val *PipelineSummary) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineSummary) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineSummary(val *PipelineSummary) *NullablePipelineSummary {
	return &NullablePipelineSummary{value: val, isSet: true}
}

func (v NullablePipelineSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


