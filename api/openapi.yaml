openapi: 3.0.3
info:
  contact:
    email: hello@zinclabs.io
    name: OpenObserve
    url: https://openobserve.ai/
  description: "OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)"
  license:
    name: AGPL-3.0-only
  title: openobserve
  version: 0.14.5
servers:
- url: /
tags:
- description: Meta details about the OpenObserve state itself. e.g. healthz
  name: Meta
- description: User login authentication
  name: Auth
- description: Logs data ingestion operations
  name: Logs
- description: Dashboard operations
  name: Dashboards
- description: Search/Query operations
  name: Search
- description: Collection of saved search views for easy retrieval
  name: Saved Views
- description: Alerts retrieval & management operations
  name: Alerts
- description: Functions retrieval & management operations
  name: Functions
- description: Organizations retrieval & management operations
  name: Organizations
- description: Stream retrieval & management operations
  name: Streams
- description: Users retrieval & management operations
  name: Users
- description: Key Value retrieval & management operations
  name: KV
- description: Metrics data ingestion operations
  name: Metrics
- description: Traces data ingestion operations
  name: Traces
- description: Syslog Routes retrieval & management operations
  name: Syslog Routes
- description: Super cluster operations
  name: Clusters
- description: Short Url Service
  name: Short Url
paths:
  /api/clusters:
    get:
      operationId: ListClusters
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    type: string
                  type: array
                type: object
          description: Success
      security:
      - Authorization: []
      summary: ListClusters
      tags:
      - Clusters
  /api/organizations:
    get:
      operationId: GetUserOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
          description: Success
      security:
      - Authorization: []
      summary: GetOrganizations
      tags:
      - Organizations
  /api/v2/{org_id}/alerts:
    get:
      operationId: ListAlerts
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Optional folder ID filter parameter.
        explode: true
        in: query
        name: folder
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Optional stream type filter parameter.
        explode: true
        in: query
        name: stream_type
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/StreamType'
          nullable: true
        style: form
      - description: |-
          Optional stream name filter parameter.

          This parameter is only used if `stream_type` is also provided.
        explode: true
        in: query
        name: stream_name
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Optional case-insensitive name substring filter parameter.
        explode: true
        in: query
        name: alert_name_substring
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Optional owner user filter parameter.
        explode: true
        in: query
        name: owner
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Optional enabled filter parameter.
        explode: true
        in: query
        name: enabled
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - description: |-
          The optional number of alerts to retrieve. If not set then all alerts
          that match the query parameters will be returned.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        style: form
      - description: |-
          The optional page index. If not set then defaults to `0`.

          This parameter is only used if `page_size` is also set.
        explode: true
        in: query
        name: page_idx
        required: false
        schema:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAlertsResponseBody'
          description: Success
      security:
      - Authorization: []
      summary: ListAlerts
      tags:
      - Alerts
    post:
      operationId: CreateAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequestBody'
        description: Alert data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: CreateAlert
      tags:
      - Alerts
  /api/v2/{org_id}/alerts/move:
    patch:
      operationId: MoveAlerts
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveAlertsRequestBody'
        description: Identifies alerts and the destination folder
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: MoveAlerts
      tags:
      - Alerts
  /api/v2/{org_id}/alerts/{alert_id}:
    delete:
      operationId: DeleteAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Alert ID
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          $ref: '#/components/schemas/Ksuid'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: DeleteAlert
      tags:
      - Alerts
    get:
      operationId: GetAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Alert ID
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          $ref: '#/components/schemas/Ksuid'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertResponseBody'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: GetAlert
      tags:
      - Alerts
    put:
      operationId: UpdateAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Alert ID
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          $ref: '#/components/schemas/Ksuid'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlertRequestBody'
        description: Alert data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: UpdateAlert
      tags:
      - Alerts
  /api/v2/{org_id}/alerts/{alert_id}/enable:
    patch:
      operationId: EnableAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Alert ID
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          $ref: '#/components/schemas/Ksuid'
        style: simple
      - description: Set to `true` to enable the alert or `false` to disable the alert.
        explode: true
        in: query
        name: value
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: EnableAlert
      tags:
      - Alerts
  /api/v2/{org_id}/alerts/{alert_id}/trigger:
    patch:
      operationId: TriggerAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Alert ID
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          $ref: '#/components/schemas/Ksuid'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: TriggerAlert
      tags:
      - Alerts
  /api/v2/{org_id}/folders/{folder_type}:
    get:
      operationId: ListFolders
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Type of data the folder can contain
        explode: false
        in: path
        name: folder_type
        required: true
        schema:
          $ref: '#/components/schemas/FolderType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResponseBody'
          description: ""
      security:
      - Authorization: []
      summary: ListFolders
      tags:
      - Folders
    post:
      operationId: CreateFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Type of data the folder can contain
        explode: false
        in: path
        name: folder_type
        required: true
        schema:
          $ref: '#/components/schemas/FolderType'
        style: simple
      requestBody:
        content:
          application/json:
            example:
              description: Traffic patterns and network performance of the infrastructure
              name: Infrastructure
            schema:
              $ref: '#/components/schemas/CreateFolderRequestBody'
        description: Folder details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderResponseBody'
          description: Folder created
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: CreateFolder
      tags:
      - Folders
  /api/v2/{org_id}/folders/{folder_type}/name/{folder_name}:
    get:
      operationId: GetFolderByName
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Type of data the folder can contain
        explode: false
        in: path
        name: folder_type
        required: true
        schema:
          $ref: '#/components/schemas/FolderType'
        style: simple
      - description: Folder Name
        explode: false
        in: path
        name: folder_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderResponseBody'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Folder not found
      security:
      - Authorization: []
      summary: GetFolderByName
      tags:
      - Folders
  /api/v2/{org_id}/folders/{folder_type}/{folder_id}:
    delete:
      operationId: DeleteFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Type of data the folder can contain
        explode: false
        in: path
        name: folder_type
        required: true
        schema:
          $ref: '#/components/schemas/FolderType'
        style: simple
      - description: Folder ID
        explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: DeleteFolder
      tags:
      - Folders
    get:
      operationId: GetFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Type of data the folder can contain
        explode: false
        in: path
        name: folder_type
        required: true
        schema:
          $ref: '#/components/schemas/FolderType'
        style: simple
      - description: Folder ID
        explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderResponseBody'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Folder not found
      security:
      - Authorization: []
      summary: GetFolder
      tags:
      - Folders
    put:
      operationId: UpdateFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Type of data the folder can contain
        explode: false
        in: path
        name: folder_type
        required: true
        schema:
          $ref: '#/components/schemas/FolderType'
        style: simple
      - description: Folder name
        explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              description: Traffic patterns and network performance of the infrastructure
              title: Infra
            schema:
              $ref: '#/components/schemas/Folder'
        description: Folder details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Folder updated
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: UpdateFolder
      tags:
      - Folders
  /api/{org_id}/_bulk:
    post:
      operationId: LogsIngestionBulk
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Ingest data (ndjson)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                errors: true
                items:
                - index:
                    _id: 1
                    _index: olympics
                    error:
                      index: olympics
                      index_uuid: "1"
                      reason: "Too old data, only last 5 hours data can be ingested.\
                        \ Data discarded."
                      shard: "1"
                      type: "Too old data, only last 5 hours data can be ingested.\
                        \ Data discarded."
                    original_record:
                      athlete: "CHASAPIS, Spiridon"
                      city: BER
                      country: USA
                      discipline: Swimming
                      event: 100M Freestyle For Sailors
                      gender: Men
                      medal: Silver
                      onemore: 1
                      season: summer
                      sport: Aquatics
                      year: 1986
                    status: 200
                took: 2
              schema:
                $ref: '#/components/schemas/BulkResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: _bulk ES compatible ingestion API
      tags:
      - Logs
  /api/{org_id}/_search:
    post:
      operationId: SearchSQL
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              query:
                end_time: 1675185660872049
                from: 0
                size: 10
                sql: 'select * from k8s '
                start_time: 1675182660872049
            schema:
              $ref: '#/components/schemas/SearchRequest'
        description: Search query
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                from: 0
                hits:
                - _p: F
                  _timestamp: 1674213225158000
                  kubernetes:
                    container_hash: dkr.ecr.us-west-2.amazonaws.com/openobserve@sha256:3dbbb0dc1eab2d5a3b3e4a75fd87d194e8095c92d7b2b62e7cdbd07020f54589
                    container_image: dkr.ecr.us-west-2.amazonaws.com/openobserve:v0.0.3
                    container_name: openobserve
                    docker_id: eb0983bdb9ff9360d227e6a0b268fe3b24a0868c2c2d725a1516c11e88bf5789
                    host: ip.us-east-2.compute.internal
                    namespace_name: openobserve
                    pod_id: 35a0421f-9203-4d73-9663-9ff0ce26d409
                    pod_name: openobserve-ingester-0
                  log: "[2023-01-20T11:13:45Z INFO  actix_web::middleware::logger]\
                    \ 10.2.80.192 \"POST /api/demo/_bulk HTTP/1.1\" 200 68"
                  stream: stderr
                scan_size: 28943
                size: 1
                took: 155
                total: 27179431
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: SearchStreamData
      tags:
      - Search
  /api/{org_id}/_search_history:
    post:
      operationId: SearchHistory
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              max_ts: 1633046400
              min_ts: 1632960000
              size: 100
              stream_name: default
              stream_type: logs
              trace_id: 7f7898fd19424c47ba830a6fa9b25e1f
            schema:
              $ref: '#/components/schemas/SearchHistoryRequest'
        description: Search history request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                cached_ratio: 0
                from: 0
                hits:
                - cached_ratio: 0
                  end_time: 15
                  function: "."
                  org_id: default
                  scan_records: 1
                  scan_size: 7.0
                  sql: SELECT COUNT(*) from "default"
                  start_time: 0
                  stream_name: default
                  stream_type: logs
                  took: 0.056222333
                  trace_id: 7f7898fd19424c47ba830a6fa9b25e1f
                idx_scan_size: 0
                is_partial: false
                result_cache_ratio: 0
                scan_records: 3
                scan_size: 0
                size: 20
                took: 40
                took_detail:
                  cluster_total: 40
                  cluster_wait_queue: 0
                  idx_took: 0
                  total: 0
                  wait_queue: 0
                total: 3
                trace_id: 2lsPBWjwZxUJ5ugvZ4jApESZEpk
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Bad Request - Invalid parameters or body
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: Search History
      tags:
      - Search
  /api/{org_id}/_search_partition:
    post:
      operationId: SearchPartition
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              end_time: 1675185660872049
              sql: 'select * from k8s '
              start_time: 1675182660872049
            schema:
              $ref: '#/components/schemas/SearchRequest'
        description: Search query
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                compressed_size: 1024
                file_num: 10
                original_size: 10240
                partitions:
                - - 1674213225158000
                  - 1674213225158000
                - - 1674213225158000
                  - 1674213225158000
                took: 155
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: SearchStreamPartition
      tags:
      - Search
  /api/{org_id}/alerts:
    get:
      deprecated: true
      operationId: ListAlerts
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
      security:
      - Authorization: []
      summary: ListAlerts
      tags:
      - Alerts
  /api/{org_id}/alerts/destinations:
    get:
      operationId: ListDestinations
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: "Destination module filter, none, alert, or pipeline"
        explode: true
        in: query
        name: module
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Destination'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: ListDestinations
      tags:
      - Alerts
    post:
      operationId: CreateDestination
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Destination'
        description: Destination data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: CreateDestination
      tags:
      - Alerts
  /api/{org_id}/alerts/destinations/{destination_name}:
    delete:
      operationId: DeleteAlertDestination
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Destination name
        explode: false
        in: path
        name: destination_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: DeleteDestination
      tags:
      - Alerts
    get:
      operationId: GetDestination
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Destination name
        explode: false
        in: path
        name: destination_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: GetDestination
      tags:
      - Alerts
    put:
      operationId: UpdateDestination
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Destination name
        explode: false
        in: path
        name: destination_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Destination'
        description: Destination data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: UpdateDestination
      tags:
      - Alerts
  /api/{org_id}/alerts/templates:
    get:
      operationId: ListTemplates
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: ListTemplates
      tags:
      - Templates
    post:
      operationId: CreateTemplate
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        description: Template data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: CreateTemplate
      tags:
      - Templates
  /api/{org_id}/alerts/templates/{template_name}:
    delete:
      operationId: DeleteAlertTemplate
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Template name
        explode: false
        in: path
        name: template_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: DeleteTemplate
      tags:
      - Templates
    get:
      operationId: GetTemplate
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Template name
        explode: false
        in: path
        name: template_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: GetTemplateByName
      tags:
      - Templates
    put:
      operationId: UpdateTemplate
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Template name
        explode: false
        in: path
        name: template_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        description: Template data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: UpdateTemplate
      tags:
      - Templates
  /api/{org_id}/dashboards:
    get:
      operationId: ListDashboards
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Optional folder ID filter parameter

          If neither `folder` nor any other filter parameter are set then this
          will search for all dashboards in the "default" folder.

          If `folder` is not set and another filter parameter, such as `title`, is
          set then this will search for dashboards in all folders.
        explode: true
        in: query
        name: folder
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: |-
          The optional case-insensitive title substring with which to filter
          dashboards.
        explode: true
        in: query
        name: title
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: |-
          The optional number of dashboards to retrieve. If not set then all
          dashboards that match the query parameters will be returned.

          Currently this parameter is only untilized by the API when the `title`
          parameter is also set.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int64
          minimum: 0
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDashboardsResponseBody'
          description: ""
      security:
      - Authorization: []
      summary: ListDashboards
      tags:
      - Dashboards
    post:
      operationId: CreateDashboard
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              description: Traffic patterns and network performance of the infrastructure
              title: Network Traffic Overview
            schema:
              $ref: '#/components/schemas/CreateDashboardRequestBody'
        description: Dashboard details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDashboardResponseBody'
          description: Dashboard created
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: CreateDashboard
      tags:
      - Dashboards
  /api/{org_id}/dashboards/move:
    patch:
      operationId: MoveDashboards
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDashboardsRequestBody'
        description: Identifies dashboards and the destination folder
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      tags:
      - Dashboards
  /api/{org_id}/dashboards/{dashboard_id}:
    delete:
      operationId: DeleteDashboard
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Dashboard ID
        explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: DeleteDashboard
      tags:
      - Dashboards
    get:
      operationId: GetDashboard
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Dashboard ID
        explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDashboardResponseBody'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Dashboard not found
      security:
      - Authorization: []
      summary: GetDashboard
      tags:
      - Dashboards
    put:
      operationId: UpdateDashboard
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Dashboard ID
        explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDashboardRequestBody'
        description: Dashboard details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDashboardResponseBody'
          description: Dashboard updated
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Dashboard not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failed to update the dashboard
      security:
      - Authorization: []
      summary: UpdateDashboard
      tags:
      - Dashboards
  /api/{org_id}/dashboards/{dashboard_id}/annotations:
    delete:
      operationId: DeleteAnnotations
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimedAnnotationDelete'
        description: Timed annotation delete request payload
        required: true
      responses:
        "200":
          description: Timed annotations deleted successfully
        "500":
          description: Failed to delete timed annotations
      security:
      - Authorization: []
      summary: Delete Timed Annotations
      tags:
      - Dashboards
    get:
      operationId: GetAnnotations
      parameters:
      - description: Commas separated list of panels
        explode: true
        in: query
        name: panels
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Time in microseconds
        explode: true
        in: query
        name: start_time
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: Time in microseconds
        explode: true
        in: query
        name: end_time
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TimedAnnotation'
                type: array
          description: Timed annotations retrieved successfully
        "400":
          description: Invalid query parameters
        "500":
          description: Failed to get timed annotations
      security:
      - Authorization: []
      summary: Get Timed Annotations
      tags:
      - Dashboards
    post:
      operationId: CreateAnnotations
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimedAnnotationReq'
        description: Timed annotation request payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TimedAnnotation'
                type: array
          description: Timed annotations created successfully
        "500":
          description: Failed to create timed annotations
      security:
      - Authorization: []
      summary: Create Timed Annotations
      tags:
      - Dashboards
  /api/{org_id}/dashboards/{dashboard_id}/annotations/panels/{timed_annotation_id}:
    delete:
      operationId: RemoveTimedAnnotationFromPanel
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: timed_annotation_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: IDs of dashboard panels from which to remove the timed annotation
        required: true
      responses:
        "200":
          description: Removed timed annotation from dashboard panels successfully
        "500":
          description: Failed to remove timed annotation from panels
      security:
      - Authorization: []
      summary: Delete Timed Annotation Panels
      tags:
      - Dashboards
  /api/{org_id}/dashboards/{dashboard_id}/annotations/{timed_annotation_id}:
    put:
      operationId: UpdateAnnotations
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: timed_annotation_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimedAnnotation'
        description: Timed annotation update request payload
        required: true
      responses:
        "200":
          description: Timed annotations updated successfully
        "500":
          description: Failed to update timed annotations
      security:
      - Authorization: []
      summary: Update Timed Annotations
      tags:
      - Dashboards
  /api/{org_id}/enrichment_tables/{table_name}:
    post:
      operationId: CreateUpdateEnrichmentTable
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Table name
        explode: false
        in: path
        name: table_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Saved enrichment table
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Bad Request
      security:
      - Authorization: []
      summary: CreateEnrichmentTable
      tags:
      - Functions
  /api/{org_id}/folders:
    get:
      deprecated: true
      operationId: ListFolders
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFoldersResponseBody'
          description: ""
      security:
      - Authorization: []
      summary: ListFolders
      tags:
      - Folders
    post:
      deprecated: true
      operationId: CreateFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              description: Traffic patterns and network performance of the infrastructure
              name: Infrastructure
            schema:
              $ref: '#/components/schemas/CreateFolderRequestBody'
        description: Folder details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFolderResponseBody'
          description: Folder created
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: CreateFolder
      tags:
      - Folders
  /api/{org_id}/folders/dashboards/{dashboard_id}:
    put:
      operationId: MoveDashboard
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Dashboard ID
        explode: false
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              from: Source folder id
              to: Destination folder id
            schema:
              $ref: '#/components/schemas/MoveDashboardRequestBody'
        description: MoveDashboard details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Dashboard Moved
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Dashboard not found
      security:
      - Authorization: []
      summary: MoveDashboard
      tags:
      - Dashboards
  /api/{org_id}/folders/name/{folder_name}:
    get:
      deprecated: true
      operationId: GetFolderByName
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Folder Name
        explode: false
        in: path
        name: folder_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderResponseBody'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Folder not found
      security:
      - Authorization: []
      summary: GetFolderByName
      tags:
      - Folders
  /api/{org_id}/folders/{folder_id}:
    delete:
      deprecated: true
      operationId: DeleteFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Folder ID
        explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: DeleteFolder
      tags:
      - Folders
    get:
      deprecated: true
      operationId: GetFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Folder ID
        explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFolderResponseBody'
          description: ""
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Folder not found
      security:
      - Authorization: []
      summary: GetFolder
      tags:
      - Folders
    put:
      deprecated: true
      operationId: UpdateFolder
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Folder name
        explode: false
        in: path
        name: folder_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              description: Traffic patterns and network performance of the infrastructure
              title: Infra
            schema:
              $ref: '#/components/schemas/Folder'
        description: Folder details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Folder updated
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: UpdateFolder
      tags:
      - Folders
  /api/{org_id}/functions:
    get:
      operationId: listFunctions
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionList'
          description: Success
      security:
      - Authorization: []
      summary: ListFunctions
      tags:
      - Functions
    post:
      operationId: createFunction
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transform'
        description: Function data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: CreateFunction
      tags:
      - Functions
  /api/{org_id}/functions/test:
    post:
      operationId: testFunction
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestVRLRequest'
        description: Test run function
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: Test a Function
      tags:
      - Functions
  /api/{org_id}/functions/{name}:
    delete:
      operationId: deleteFunction
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Function name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Force delete function regardless pipeline dependencies
        explode: true
        in: query
        name: force
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: DeleteFunction
      tags:
      - Functions
    get:
      operationId: functionPipelineDependency
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Function name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionList'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Function not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal server error
      security:
      - Authorization: []
      summary: FunctionPipelineDependency
      tags:
      - Functions
    put:
      operationId: updateFunction
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Function name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transform'
        description: Function data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: UpdateFunction
      tags:
      - Functions
  /api/{org_id}/ingest/metrics/_json:
    post:
      operationId: MetricsIngestionJson
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example: "[{\"__name__\":\"metrics stream name\",\"__type__\":\"counter\
              \ / gauge / histogram / summary\",\"_timestamp\":1687175143,\"label_name1\"\
              :\"label_value1\",\"label_name2\":\"label_value2\",\"value\":1.2}]"
            schema:
              type: string
        description: Ingest data (json array)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                status:
                - failed: 0
                  name: up
                  successful: 3
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: _json ingestion API
      tags:
      - Metrics
  /api/{org_id}/kv:
    get:
      operationId: ListKVKeys
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Key prefix
        explode: true
        in: query
        name: prefix
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Success
      security:
      - Authorization: []
      summary: ListKeys
      tags:
      - KV
  /api/{org_id}/kv/{key}:
    delete:
      operationId: RemoveKVValue
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Key name
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Success
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: NotFound
      security:
      - Authorization: []
      summary: RemoveValue
      tags:
      - KV
    get:
      operationId: GetKVValue
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Key name
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Success
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: NotFound
      security:
      - Authorization: []
      summary: GetValue
      tags:
      - KV
    post:
      operationId: SetKVValue
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Key name
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Value of the key
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Success
        "500":
          content:
            text/plain:
              schema:
                type: string
          description: Failure
      security:
      - Authorization: []
      summary: SetValue
      tags:
      - KV
  /api/{org_id}/passcode:
    get:
      operationId: GetOrganizationUserIngestToken
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasscodeResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: GetIngestToken
      tags:
      - Organizations
    put:
      operationId: UpdateOrganizationUserIngestToken
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasscodeResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: UpdateIngestToken
      tags:
      - Organizations
  /api/{org_id}/prometheus/api/v1/format_query:
    get:
      operationId: PrometheusFormatQuery
      parameters:
      - description: Prometheus expression query string.
        explode: true
        in: query
        name: query
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                data: foo / bar
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus formatting query expressions
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/label/{label_name}/values:
    get:
      operationId: PrometheusLabelValues
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Label name
        explode: false
        in: path
        name: label_name
        required: true
        schema:
          type: string
        style: simple
      - description: Series selector argument that selects the series from which to
          read the label values
        explode: true
        in: query
        name: "match[]"
        required: true
        schema:
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: Start timestamp"
        explode: true
        in: query
        name: start
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: End timestamp"
        explode: true
        in: query
        name: end
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - node
                - prometheus
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus query label values
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/labels:
    get:
      operationId: PrometheusLabels
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Series selector argument that selects the series from which to
          read the label names
        explode: true
        in: query
        name: "match[]"
        required: true
        schema:
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: Start timestamp"
        explode: true
        in: query
        name: start
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: End timestamp"
        explode: true
        in: query
        name: end
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - __name__
                - call
                - code
                - config
                - dialer_name
                - endpoint
                - event
                - goversion
                - handler
                - instance
                - interval
                - job
                - le
                - listener_name
                - name
                - quantile
                - reason
                - role
                - scrape_job
                - slice
                - version
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus getting label names
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/metadata:
    get:
      operationId: PrometheusMetadata
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum number of metrics to return
        explode: true
        in: query
        name: limit
        required: true
        schema:
          type: string
        style: form
      - description: A metric name to filter metadata for. All metric metadata is
          retrieved if left empty
        explode: true
        in: query
        name: metric
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  cortex_ring_tokens:
                  - help: Number of tokens in the ring
                    type: gauge
                    unit: ""
                  http_requests_total:
                  - help: Number of HTTP requests
                    type: counter
                    unit: ""
                  - help: Amount of HTTP requests
                    type: counter
                    unit: ""
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus query metric metadata
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/query:
    get:
      operationId: PrometheusQuery
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Prometheus expression query string
        explode: true
        in: query
        name: query
        required: true
        schema:
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: Evaluation timestamp. Optional"
        explode: true
        in: query
        name: time
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Evaluation timeout
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  result:
                  - metric:
                      __name__: up
                      instance: localhost:9090
                      job: prometheus
                    value:
                    - 1.435781451781E9
                    - "1"
                  - metric:
                      __name__: up
                      instance: localhost:9100
                      job: node
                    value:
                    - 1.435781451781E9
                    - "0"
                  resultType: vector
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus instant queries
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/query_range:
    get:
      operationId: PrometheusRangeQuery
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Prometheus expression query string
        explode: true
        in: query
        name: query
        required: true
        schema:
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: Start timestamp, inclusive"
        explode: true
        in: query
        name: start
        required: true
        schema:
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: End timestamp, inclusive"
        explode: true
        in: query
        name: end
        required: true
        schema:
          type: string
        style: form
      - description: Query resolution step width in duration format or float number
          of seconds
        explode: true
        in: query
        name: step
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Evaluation timeout
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                  result:
                  - metric:
                      __name__: up
                      instance: localhost:9090
                      job: prometheus
                    values:
                    - - 1.435781430781E9
                      - "1"
                    - - 1.435781445781E9
                      - "1"
                    - - 1.435781460781E9
                      - "1"
                  - metric:
                      __name__: up
                      instance: localhost:9091
                      job: node
                    values:
                    - - 1.435781430781E9
                      - "0"
                    - - 1.435781445781E9
                      - "0"
                    - - 1.435781460781E9
                      - "1"
                  resultType: matrix
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus range queries
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/series:
    get:
      operationId: PrometheusSeries
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: "<series_selector>: Series selector argument that selects the\
          \ series to return"
        explode: true
        in: query
        name: "match[]"
        required: true
        schema:
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: Start timestamp"
        explode: true
        in: query
        name: start
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "<rfc3339 | unix_timestamp>: End timestamp"
        explode: true
        in: query
        name: end
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                data:
                - __name__: up
                  instance: localhost:9090
                  job: prometheus
                - __name__: up
                  instance: localhost:9091
                  job: node
                - __name__: process_start_time_seconds
                  instance: localhost:9090
                  job: prometheus
                status: success
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus finding series by label matchers
      tags:
      - Metrics
  /api/{org_id}/prometheus/api/v1/write:
    post:
      operationId: PrometheusRemoteWrite
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-protobuf:
            schema:
              type: string
        description: prometheus WriteRequest
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: prometheus remote-write endpoint for metrics
      tags:
      - Metrics
  /api/{org_id}/rumtoken:
    get:
      operationId: GetOrganizationUserRumIngestToken
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumIngestionResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: GetRumIngestToken
      tags:
      - Organizations
    post:
      operationId: CreateOrganizationUserRumIngestToken
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumIngestionResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: CreateRumIngestToken
      tags:
      - Organizations
    put:
      operationId: UpdateOrganizationUserRumIngestToken
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumIngestionResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: UpdateRumIngestToken
      tags:
      - Organizations
  /api/{org_id}/savedviews:
    get:
      operationId: ListSavedViews
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - org_id: some-org-id
                payload: base-64-encoded-versioned-payload
                view_id: view-id
                view_name: view-name
              schema:
                $ref: '#/components/schemas/ViewsWithoutData'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      tags:
      - Saved Views
    post:
      operationId: CreateSavedViews
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateViewRequest'
        description: Create view data
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
              - org_id: some-org-id
                view_id: view_id
              schema:
                $ref: '#/components/schemas/CreateViewResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      tags:
      - Saved Views
  /api/{org_id}/savedviews/{view_id}:
    delete:
      operationId: DeleteSavedViews
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: The view_id to delete
        explode: false
        in: path
        name: view_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - org_id: some-org-id
                view_id: view_id
              schema:
                $ref: '#/components/schemas/DeleteViewResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      tags:
      - Saved Views
    get:
      operationId: GetSavedView
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: The view_id which was stored
        explode: false
        in: path
        name: view_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                org_id: some-org-id
                payload: base64-encoded-object-as-sent-by-frontend
                view_id: some-uuid-v4
                view_name: view-name
              schema:
                $ref: '#/components/schemas/View'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      tags:
      - Saved Views
    put:
      operationId: UpdateSavedViews
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: View id to be updated
        explode: false
        in: path
        name: view_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViewRequest'
        description: Update view data
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
              - org_id: some-org-id
                payload: base-64-encoded-versioned-payload
                view_id: view-id
                view_name: view-name
              schema:
                $ref: '#/components/schemas/View'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      tags:
      - Saved Views
  /api/{org_id}/settings:
    get:
      operationId: OrganizationSettingGet
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: Retrieve organization specific settings
      tags:
      - Organizations
    post:
      operationId: OrganizationSettingCreate
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationSettingPayload'
        description: Organization settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: Organization specific settings
      tags:
      - Organizations
  /api/{org_id}/short:
    post:
      operationId: shorten
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              original_url: https://example.com/some/long/url
            schema:
              $ref: '#/components/schemas/ShortenUrlRequest'
        description: The original URL to shorten
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                short_url: http://localhost:5080/short/ddbffcea3ad44292
              schema:
                $ref: '#/components/schemas/ShortenUrlResponse'
          description: Shortened URL
        "400":
          description: Invalid request
      summary: Shorten a URL
      tags:
      - Short Url
  /api/{org_id}/streams:
    get:
      operationId: StreamList
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream type
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      - description: Keyword
        explode: true
        in: query
        name: keyword
        required: true
        schema:
          type: string
        style: form
      - description: Offset
        explode: true
        in: query
        name: offset
        required: true
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: Limit
        explode: true
        in: query
        name: limit
        required: true
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: Sort
        explode: true
        in: query
        name: sort
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStream'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: ListStreams
      tags:
      - Streams
  /api/{org_id}/streams/{stream_name}:
    delete:
      operationId: StreamDelete
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Stream type
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: DeleteStream
      tags:
      - Streams
  /api/{org_id}/streams/{stream_name}/delete_fields:
    put:
      operationId: StreamDeleteFields
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Stream type
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamDeleteFields'
        description: Stream delete fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: DeleteStreamFields
      tags:
      - Streams
  /api/{org_id}/streams/{stream_name}/schema:
    get:
      operationId: StreamSchema
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Stream type
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      - description: Keyword
        explode: true
        in: query
        name: keyword
        required: true
        schema:
          type: string
        style: form
      - description: Offset
        explode: true
        in: query
        name: offset
        required: true
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: Limit
        explode: true
        in: query
        name: limit
        required: true
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: GetSchema
      tags:
      - Streams
  /api/{org_id}/streams/{stream_name}/settings:
    post:
      operationId: StreamSettings
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Stream type
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamSettings'
        description: Stream settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: CreateStreamSettings
      tags:
      - Streams
    put:
      operationId: UpdateStreamSettings
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Stream type
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStreamSettings'
        description: Stream settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: UpdateStreamSettings
      tags:
      - Streams
  /api/{org_id}/summary:
    get:
      operationId: GetOrganizationSummary
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSummary'
          description: Success
      security:
      - Authorization: []
      summary: GetOrganizationSummary
      tags:
      - Organizations
  /api/{org_id}/syslog-routes:
    get:
      operationId: ListSyslogRoutes
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyslogRoutes'
          description: ""
      security:
      - Authorization: []
      summary: ListSyslogRoutes
      tags:
      - Syslog Routes
    post:
      operationId: CreateSyslogRoute
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyslogRoute'
        description: SyslogRoute details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyslogRoute'
          description: Route created
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Internal Server Error
      security:
      - Authorization: []
      summary: CreateSyslogRoute
      tags:
      - Syslog Routes
  /api/{org_id}/syslog-routes/{id}:
    delete:
      operationId: DeleteSyslogRoute
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: SyslogRoute Id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Route deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Route not found
      security:
      - Authorization: []
      summary: DeleteSyslogRoute
      tags:
      - Syslog Routes
    put:
      operationId: UpdateSyslogRoute
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Route ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyslogRoute'
        description: SyslogRoute details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyslogRoute'
          description: SyslogRoute updated
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: SyslogRoute not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failed to update the SyslogRoute
      security:
      - Authorization: []
      summary: UpdateSyslogRoute
      tags:
      - Syslog Routes
  /api/{org_id}/traces:
    post:
      operationId: PostTraces
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-protobuf:
            schema:
              type: string
        description: ExportTraceServiceRequest
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: TracesIngest
      tags:
      - Traces
  /api/{org_id}/users:
    get:
      operationId: UserList
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: Success
      security:
      - Authorization: []
      summary: ListUsers
      tags:
      - Users
    post:
      operationId: UserSave
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        description: User data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
      security:
      - Authorization: []
      summary: CreateUser
      tags:
      - Users
  /api/{org_id}/users/{email_id}:
    delete:
      operationId: RemoveUserFromOrg
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: User name
        explode: false
        in: path
        name: email_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: RemoveUserFromOrganization
      tags:
      - Users
    post:
      operationId: AddUserToOrg
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: User's email id
        explode: false
        in: path
        name: email_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOrgRole'
        description: User role
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
      security:
      - Authorization: []
      summary: AddUserToOrganization
      tags:
      - Users
    put:
      operationId: UserUpdate
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: User's email id
        explode: false
        in: path
        name: email_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        description: User data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
      security:
      - Authorization: []
      summary: UpdateUser
      tags:
      - Users
  /api/{org_id}/{stream_name}/_around:
    get:
      operationId: SearchAround
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: stream_name name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: around key
        explode: true
        in: query
        name: key
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: around size
        explode: true
        in: query
        name: size
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: "regions, split by comma"
        explode: true
        in: query
        name: regions
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "timeout, seconds"
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                from: 0
                hits:
                - _p: F
                  _timestamp: 1674213225158000
                  kubernetes:
                    container_hash: dkr.ecr.us-west-2.amazonaws.com/openobserve@sha256:3dbbb0dc1eab2d5a3b3e4a75fd87d194e8095c92d7b2b62e7cdbd07020f54589
                    container_image: dkr.ecr.us-west-2.amazonaws.com/openobserve:v0.0.3
                    container_name: openobserve
                    docker_id: eb0983bdb9ff9360d227e6a0b268fe3b24a0868c2c2d725a1516c11e88bf5789
                    host: ip.us-east-2.compute.internal
                    namespace_name: openobserve
                    pod_id: 35a0421f-9203-4d73-9663-9ff0ce26d409
                    pod_name: openobserve-ingester-0
                  log: "[2023-01-20T11:13:45Z INFO  actix_web::middleware::logger]\
                    \ 10.2.80.192 \"POST /api/demo/_bulk HTTP/1.1\" 200 68"
                  stream: stderr
                scan_size: 28943
                size: 10
                took: 155
                total: 10
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: SearchAround
      tags:
      - Search
    post:
      operationId: SearchAroundV2
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: stream_name name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: around size
        explode: true
        in: query
        name: size
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: "regions, split by comma"
        explode: true
        in: query
        name: regions
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "timeout, seconds"
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            example: "{\"_timestamp\":1675182660872049,\"container_image\":\"dkr.ecr.us-west-2.amazonaws.com/openobserve:v0.0.3\"\
              ,\"container_name\":\"openobserve\",\"docker_id\":\"eb0983bdb9ff9360d227e6a0b268fe3b24a0868c2c2d725a1516c11e88bf5789\"\
              ,\"host\":\"ip.us-east-2.compute.internal\",\"namespace_name\":\"openobserve\"\
              ,\"pod_id\":\"35a0421f-9203-4d73-9663-9ff0ce26d409\",\"pod_name\":\"\
              openobserve-ingester-0\"}"
            schema:
              type: string
        description: around record data
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                from: 0
                hits:
                - _p: F
                  _timestamp: 1674213225158000
                  kubernetes:
                    container_hash: dkr.ecr.us-west-2.amazonaws.com/openobserve@sha256:3dbbb0dc1eab2d5a3b3e4a75fd87d194e8095c92d7b2b62e7cdbd07020f54589
                    container_image: dkr.ecr.us-west-2.amazonaws.com/openobserve:v0.0.3
                    container_name: openobserve
                    docker_id: eb0983bdb9ff9360d227e6a0b268fe3b24a0868c2c2d725a1516c11e88bf5789
                    host: ip.us-east-2.compute.internal
                    namespace_name: openobserve
                    pod_id: 35a0421f-9203-4d73-9663-9ff0ce26d409
                    pod_name: openobserve-ingester-0
                  log: "[2023-01-20T11:13:45Z INFO  actix_web::middleware::logger]\
                    \ 10.2.80.192 \"POST /api/demo/_bulk HTTP/1.1\" 200 68"
                  stream: stderr
                scan_size: 28943
                size: 10
                took: 155
                total: 10
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: SearchAroundV2
      tags:
      - Search
  /api/{org_id}/{stream_name}/_json:
    post:
      operationId: LogsIngestionJson
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example: "[{\"Athlete\":\"Alfred\",\"City\":\"Athens\",\"Country\":\"\
              HUN\",\"Discipline\":\"Swimming\",\"Sport\":\"Aquatics\",\"Year\":1896},{\"\
              Athlete\":\"HERSCHMANN\",\"City\":\"Athens\",\"Country\":\"CHN\",\"\
              Discipline\":\"Swimming\",\"Sport\":\"Aquatics\",\"Year\":1896}]"
            schema:
              type: string
        description: Ingest data (json array)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                status:
                - failed: 0
                  name: olympics
                  successful: 3
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: _json ingestion API
      tags:
      - Logs
  /api/{org_id}/{stream_name}/_multi:
    post:
      operationId: LogsIngestionMulti
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Ingest data (multiple line json)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                status:
                - failed: 0
                  name: olympics
                  successful: 3
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: _multi ingestion API
      tags:
      - Logs
  /api/{org_id}/{stream_name}/_values:
    get:
      operationId: SearchValues
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: stream_name name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: "fields, split by comma"
        explode: true
        in: query
        name: fields
        required: true
        schema:
          type: string
        style: form
      - description: "filter, eg: a=b"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "keyword, eg: abc"
        explode: true
        in: query
        name: keyword
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: size
        explode: true
        in: query
        name: size
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: start time
        explode: true
        in: query
        name: start_time
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: end time
        explode: true
        in: query
        name: end_time
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: "regions, split by comma"
        explode: true
        in: query
        name: regions
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "timeout, seconds"
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "no need count, true of false"
        explode: true
        in: query
        name: no_count
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                took: 155
                values:
                - field: field1
                  values:
                  - value1
                  - value2
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: SearchTopNValues
      tags:
      - Search
  /api/{org_id}/{stream_name}/alerts:
    get:
      deprecated: true
      operationId: ListStreamAlerts
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: ListStreamAlerts
      tags:
      - Alerts
    post:
      deprecated: true
      operationId: SaveAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
        description: Alert data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: CreateAlert
      tags:
      - Alerts
  /api/{org_id}/{stream_name}/alerts/{alert_name}:
    delete:
      deprecated: true
      operationId: DeleteAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Alert name
        explode: false
        in: path
        name: alert_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: DeleteAlert
      tags:
      - Alerts
    get:
      deprecated: true
      operationId: GetAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Alert name
        explode: false
        in: path
        name: alert_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
      security:
      - Authorization: []
      summary: GetAlertByName
      tags:
      - Alerts
    put:
      deprecated: true
      operationId: UpdateAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Alert name
        explode: false
        in: path
        name: alert_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
        description: Alert data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Error
      security:
      - Authorization: []
      summary: UpdateAlert
      tags:
      - Alerts
  /api/{org_id}/{stream_name}/alerts/{alert_name}/enable:
    put:
      deprecated: true
      operationId: EnableAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Alert name
        explode: false
        in: path
        name: alert_name
        required: true
        schema:
          type: string
        style: simple
      - description: Enable or disable alert
        explode: true
        in: query
        name: value
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: EnableAlert
      tags:
      - Alerts
  /api/{org_id}/{stream_name}/alerts/{alert_name}/trigger:
    put:
      deprecated: true
      operationId: TriggerAlert
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: Alert name
        explode: false
        in: path
        name: alert_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: NotFound
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: TriggerAlert
      tags:
      - Alerts
  /api/{org_id}/{stream_name}/traces/latest:
    get:
      operationId: GetLatestTraces
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Stream name
        explode: false
        in: path
        name: stream_name
        required: true
        schema:
          type: string
        style: simple
      - description: "filter, eg: a=b AND c=d"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: from
        explode: true
        in: query
        name: from
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: size
        explode: true
        in: query
        name: size
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: start time
        explode: true
        in: query
        name: start_time
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: end time
        explode: true
        in: query
        name: end_time
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: "timeout, seconds"
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                hits:
                - first_event:
                    operation_name: operation_name
                    start_time: 1234567890
                  service_name:
                  - job1: 1
                    job2: 0
                  spans:
                  - 1
                  - 2
                  trace_id: "12345678"
                took: 155
              schema:
                $ref: '#/components/schemas/SearchResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: GetLatestTraces
      tags:
      - Traces
  /healthz:
    get:
      operationId: healthz
      responses:
        "200":
          content:
            application/json:
              example:
                status: ok
              schema:
                $ref: '#/components/schemas/HealthzResponse'
          description: Status OK
      summary: Healthz
      tags:
      - Meta
  /rum/v1/{org_id}/logs:
    post:
      operationId: LogIngestionJson
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example: "[{\"Athlete\":\"Alfred\",\"City\":\"Athens\",\"Country\":\"\
              HUN\",\"Discipline\":\"Swimming\",\"Sport\":\"Aquatics\",\"Year\":1896},{\"\
              Athlete\":\"HERSCHMANN\",\"City\":\"Athens\",\"Country\":\"CHN\",\"\
              Discipline\":\"Swimming\",\"Sport\":\"Aquatics\",\"Year\":1896}]"
            schema:
              type: string
        description: Ingest data (json array)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                status:
                - failed: 0
                  name: olympics
                  successful: 3
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: Rum log ingestion API
      tags:
      - Rum
  /rum/v1/{org_id}/replay:
    post:
      operationId: ReplayIngestionJson
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example: "[{\"Athlete\":\"Alfred\",\"City\":\"Athens\",\"Country\":\"\
              HUN\",\"Discipline\":\"Swimming\",\"Sport\":\"Aquatics\",\"Year\":1896},{\"\
              Athlete\":\"HERSCHMANN\",\"City\":\"Athens\",\"Country\":\"CHN\",\"\
              Discipline\":\"Swimming\",\"Sport\":\"Aquatics\",\"Year\":1896}]"
            schema:
              type: string
        description: Ingest data (json array)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                status:
                - failed: 0
                  name: olympics
                  successful: 3
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: Rum session-replay ingestion API
      tags:
      - Rum
  /rum/v1/{org_id}/rum:
    post:
      operationId: RumIngestionMulti
      parameters:
      - description: Organization name
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Ingest data (multiple line json)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                code: 200
                status:
                - failed: 0
                  name: olympics
                  successful: 3
              schema:
                $ref: '#/components/schemas/IngestionResponse'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponse'
          description: Failure
      security:
      - Authorization: []
      summary: Rum data ingestion API
      tags:
      - Rum
  /short/{org_id}/short/{short_id}:
    get:
      operationId: retrieve
      parameters:
      - description: The short ID to retrieve the original URL
        example: ddbffcea3ad44292
        explode: false
        in: path
        name: short_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "302":
          description: Redirect to the original URL
          headers:
            Location:
              description: The original URL to which the client is redirected
              explode: false
              schema:
                type: string
              style: simple
        "404":
          description: Short URL not found
      summary: Retrieve the original URL from a short_id
      tags:
      - Short Url
components:
  schemas:
    AggFunction:
      enum:
      - avg
      - min
      - max
      - sum
      - count
      - median
      - p50
      - p75
      - p90
      - p95
      - p99
      type: string
    Aggregation:
      properties:
        function:
          $ref: '#/components/schemas/AggFunction'
        group_by:
          items:
            type: string
          nullable: true
          type: array
        having:
          $ref: '#/components/schemas/Condition'
      required:
      - function
      - having
      type: object
    AggregationFunc:
      enum:
      - count
      - count-distinct
      - histogram
      - sum
      - min
      - max
      - avg
      - median
      type: string
    Alert:
      example:
        owner: owner
        query_condition:
          promql: promql
          search_event_type: ""
          aggregation: ""
          conditions:
          - ignore_case: true
            column: column
            value: "{}"
            operator: =
          - ignore_case: true
            column: column
            value: "{}"
            operator: =
          multi_time_range:
          - offSet: offSet
          - offSet: offSet
          type: custom
          promql_condition: ""
          vrl_function: vrl_function
          sql: sql
        trigger_condition:
          cron: cron
          period: 5
          timezone: timezone
          threshold: 2
          tolerance_in_secs: 7
          frequency_type: cron
          silence: 5
          operator: =
          frequency: 1
        context_attributes:
          key: context_attributes
        destinations:
        - destinations
        - destinations
        description: description
        enabled: true
        last_satisfied_at: 0
        stream_name: stream_name
        updated_at: 5
        last_triggered_at: 6
        tz_offset: 1
        org_id: org_id
        row_template: row_template
        name: name
        stream_type: logs
        is_real_time: true
        id: ""
        last_edited_by: last_edited_by
      properties:
        context_attributes:
          additionalProperties:
            type: string
          nullable: true
          type: object
        description:
          type: string
        destinations:
          items:
            type: string
          type: array
        enabled:
          type: boolean
        id:
          allOf:
          - $ref: '#/components/schemas/Ksuid'
          nullable: true
        is_real_time:
          type: boolean
        last_edited_by:
          nullable: true
          readOnly: true
          type: string
        last_satisfied_at:
          description: Time when alert was last satisfied. Unix timestamp.
          format: int64
          nullable: true
          readOnly: true
          type: integer
        last_triggered_at:
          description: Time when alert was last triggered. Unix timestamp.
          format: int64
          nullable: true
          readOnly: true
          type: integer
        name:
          type: string
        org_id:
          type: string
        owner:
          nullable: true
          type: string
        query_condition:
          $ref: '#/components/schemas/QueryCondition'
        row_template:
          type: string
        stream_name:
          type: string
        stream_type:
          $ref: '#/components/schemas/StreamType'
        trigger_condition:
          $ref: '#/components/schemas/TriggerCondition'
        tz_offset:
          description: |-
            Timezone offset in minutes. Negative seconds means the western
            hemisphere
          format: int32
          type: integer
        updated_at:
          description: Time when alert was last updated. Unix timestamp.
          format: int64
          nullable: true
          readOnly: true
          type: integer
      required:
      - destinations
      type: object
    AlertSummary:
      example:
        num_realtime: 0
        num_scheduled: 6
      properties:
        num_realtime:
          format: int64
          type: integer
        num_scheduled:
          format: int64
          type: integer
      required:
      - num_realtime
      - num_scheduled
      type: object
    AxisItem:
      properties:
        aggregationFunction:
          allOf:
          - $ref: '#/components/schemas/AggregationFunc'
          nullable: true
        alias:
          type: string
        color:
          nullable: true
          type: string
        column:
          type: string
        label:
          type: string
      required:
      - alias
      - column
      - label
      type: object
    BulkResponse:
      example:
        took: 0
        items:
        - key:
            _shards: ""
            result: result
            _seq_no: 6
            _index: _index
            _id: _id
            originalRecord: "{}"
            error: ""
            _primary_term: 0
            _version: 1
            status: 5
        - key:
            _shards: ""
            result: result
            _seq_no: 6
            _index: _index
            _id: _id
            originalRecord: "{}"
            error: ""
            _primary_term: 0
            _version: 1
            status: 5
        errors: true
      properties:
        errors:
          type: boolean
        items:
          items:
            additionalProperties:
              $ref: '#/components/schemas/BulkResponseItem'
            type: object
          type: array
        took:
          minimum: 0
          type: integer
      required:
      - errors
      - items
      - took
      type: object
    BulkResponseError:
      properties:
        index:
          type: string
        index_uuid:
          type: string
        reason:
          type: string
        shard:
          type: string
        type:
          type: string
      required:
      - index
      - index_uuid
      - reason
      - shard
      - type
      type: object
    BulkResponseItem:
      example:
        _shards: ""
        result: result
        _seq_no: 6
        _index: _index
        _id: _id
        originalRecord: "{}"
        error: ""
        _primary_term: 0
        _version: 1
        status: 5
      properties:
        _id:
          type: string
        _index:
          type: string
        _primary_term:
          format: int64
          nullable: true
          type: integer
        _seq_no:
          format: int64
          nullable: true
          type: integer
        _shards:
          allOf:
          - $ref: '#/components/schemas/ShardResponse'
          nullable: true
        _version:
          format: int64
          nullable: true
          type: integer
        error:
          allOf:
          - $ref: '#/components/schemas/BulkResponseError'
          nullable: true
        originalRecord:
          type: object
        result:
          nullable: true
          type: string
        status:
          format: int64
          type: integer
      required:
      - _id
      - _index
      - status
      type: object
    CancelQueryResponse:
      properties:
        is_success:
          type: boolean
        trace_id:
          type: string
      required:
      - is_success
      - trace_id
      type: object
    CompareHistoricData:
      example:
        offSet: offSet
      properties:
        offSet:
          type: string
      required:
      - offSet
      type: object
    Condition:
      example:
        ignore_case: true
        column: column
        value: "{}"
        operator: =
      properties:
        column:
          type: string
        ignore_case:
          type: boolean
        operator:
          $ref: '#/components/schemas/Operator'
        value:
          type: object
      required:
      - column
      - operator
      - value
      type: object
    CreateAlertRequestBody:
      allOf:
      - $ref: '#/components/schemas/Alert'
      - properties:
          folder_id:
            description: |-
              Optional folder ID indicating the folder in which to create the alert.
              If omitted the alert will be created in the default folder.
            nullable: true
            type: string
        type: object
      description: HTTP request body for `CreateAlert` endpoint.
      example:
        owner: owner
        query_condition:
          promql: promql
          search_event_type: ""
          aggregation: ""
          conditions:
          - ignore_case: true
            column: column
            value: "{}"
            operator: =
          - ignore_case: true
            column: column
            value: "{}"
            operator: =
          multi_time_range:
          - offSet: offSet
          - offSet: offSet
          type: custom
          promql_condition: ""
          vrl_function: vrl_function
          sql: sql
        trigger_condition:
          cron: cron
          period: 5
          timezone: timezone
          threshold: 2
          tolerance_in_secs: 7
          frequency_type: cron
          silence: 5
          operator: =
          frequency: 1
        context_attributes:
          key: context_attributes
        destinations:
        - destinations
        - destinations
        description: description
        enabled: true
        last_satisfied_at: 0
        stream_name: stream_name
        updated_at: 3
        last_triggered_at: 6
        tz_offset: 9
        org_id: org_id
        row_template: row_template
        name: name
        stream_type: logs
        is_real_time: true
        id: ""
        folder_id: folder_id
        last_edited_by: last_edited_by
    CreateDashboardRequestBody:
      $ref: '#/components/schemas/JsonValue'
    CreateDashboardResponseBody:
      $ref: '#/components/schemas/DashboardDetails'
    CreateFolderRequestBody:
      description: HTTP request body for `CreateFolder` endpoint.
      example:
        name: name
        description: description
      properties:
        description:
          type: string
        name:
          type: string
      required:
      - description
      - name
      type: object
    CreateFolderResponseBody:
      $ref: '#/components/schemas/Folder'
    CreateViewRequest:
      example:
        data: ""
        view_name: view_name
      properties:
        data:
          description: |-
            Base64 encoded string, containing all the data for a given view.
            This data is expected to be versioned so that the frontend can
            deserialize as required.
        view_name:
          description: "User-readable name of the view, doesn't need to be unique."
          type: string
      required:
      - data
      - view_name
      type: object
    CreateViewResponse:
      example:
        org_id: org_id
        view_id: view_id
        view_name: view_name
      properties:
        org_id:
          type: string
        view_id:
          type: string
        view_name:
          type: string
      required:
      - org_id
      - view_id
      - view_name
      type: object
    CustomFieldsOption:
      properties:
        label:
          type: string
        value:
          type: string
      required:
      - label
      - value
      type: object
    Dashboard:
      properties:
        created:
          format: date-time
          type: string
        dashboardId:
          type: string
        description:
          type: string
        layouts:
          items:
            $ref: '#/components/schemas/Layout'
          nullable: true
          type: array
        owner:
          type: string
        panels:
          items:
            $ref: '#/components/schemas/Panel'
          type: array
        role:
          type: string
        title:
          type: string
        variables:
          allOf:
          - $ref: '#/components/schemas/Variables'
          nullable: true
      required:
      - description
      - title
      type: object
    DeleteViewResponse:
      example:
        org_id: org_id
        view_id: view_id
      properties:
        org_id:
          type: string
        view_id:
          type: string
      required:
      - org_id
      - view_id
      type: object
    Destination:
      example:
        emails:
        - emails
        - emails
        template: template
        headers:
          key: headers
        aws_region: aws_region
        method: "{}"
        name: name
        skip_tls_verify: true
        type: http
        url: url
        sns_topic_arn: sns_topic_arn
      properties:
        aws_region:
          nullable: true
          type: string
        emails:
          description: Required when `destination_type` is `Email`
          items:
            type: string
          type: array
        headers:
          additionalProperties:
            type: string
          nullable: true
          type: object
        method:
          $ref: '#/components/schemas/meta_dest.HTTPType'
        name:
          type: string
        skip_tls_verify:
          type: boolean
        sns_topic_arn:
          nullable: true
          type: string
        template:
          nullable: true
          type: string
        type:
          $ref: '#/components/schemas/DestinationType'
        url:
          description: Required for `Http` destination_type
          type: string
      type: object
    DestinationType:
      enum:
      - http
      - email
      - sns
      type: string
    EnableAlertResponseBody:
      description: HTTP response body for `EnableAlert` endpoint.
      properties:
        enabled:
          type: boolean
      required:
      - enabled
      type: object
    FolderType:
      description: Indicates the type of data that the folder can contain.
      enum:
      - dashboards
      - alerts
      type: string
    FrequencyType:
      enum:
      - cron
      - minutes
      type: string
    FunctionList:
      example:
        list:
        - numArgs: 0
          transType: 0
          function: function
          streams:
          - isRemoved: true
            streamType: logs
            stream: stream
            applyBeforeFlattening: true
            order: 0
          - isRemoved: true
            streamType: logs
            stream: stream
            applyBeforeFlattening: true
            order: 0
          name: name
          params: params
        - numArgs: 0
          transType: 0
          function: function
          streams:
          - isRemoved: true
            streamType: logs
            stream: stream
            applyBeforeFlattening: true
            order: 0
          - isRemoved: true
            streamType: logs
            stream: stream
            applyBeforeFlattening: true
            order: 0
          name: name
          params: params
      properties:
        list:
          items:
            $ref: '#/components/schemas/Transform'
          type: array
      required:
      - list
      type: object
    GetAlertResponseBody:
      $ref: '#/components/schemas/Alert'
    GetDashboardResponseBody:
      $ref: '#/components/schemas/DashboardDetails'
    GetFolderResponseBody:
      $ref: '#/components/schemas/Folder'
    HTTPType:
      enum:
      - post
      - put
      - get
      type: string
    HealthzResponse:
      example:
        status: status
      properties:
        status:
          type: string
      required:
      - status
      type: object
    HttpResponse:
      description: |-
        HTTP response
        code 200 is success
        code 400 is error
        code 404 is not found
        code 500 is internal server error
        code 503 is service unavailable
        code >= 1000 is custom error code
        message is the message or error message
      example:
        trace_id: trace_id
        code: 0
        error_detail: error_detail
        message: message
      properties:
        code:
          format: int32
          minimum: 0
          type: integer
        error_detail:
          nullable: true
          type: string
        message:
          type: string
        trace_id:
          nullable: true
          type: string
      required:
      - code
      - message
      type: object
    IngestionPasscode:
      example:
        user: user
        passcode: passcode
      properties:
        passcode:
          type: string
        user:
          type: string
      required:
      - passcode
      - user
      type: object
    IngestionResponse:
      example:
        code: 0
        error: error
        status:
        - name: name
          failed: 0
          error: error
          successful: 0
        - name: name
          failed: 0
          error: error
          successful: 0
      properties:
        code:
          format: int32
          minimum: 0
          type: integer
        error:
          nullable: true
          type: string
        status:
          items:
            $ref: '#/components/schemas/StreamStatus'
          type: array
      required:
      - code
      type: object
    Layout:
      properties:
        h:
          format: int64
          type: integer
        i:
          format: int64
          type: integer
        panelId:
          type: string
        static:
          type: boolean
        w:
          format: int64
          type: integer
        x:
          format: int64
          type: integer
        "y":
          format: int64
          type: integer
      required:
      - h
      - i
      - panelId
      - static
      - w
      - x
      - "y"
      type: object
    ListAlertsResponseBody:
      description: HTTP response body for `ListAlerts` endpoint.
      example:
        list:
        - last_satisfied_at: 0
          owner: owner
          condition:
            promql: promql
            search_event_type: ""
            aggregation: ""
            conditions:
            - ignore_case: true
              column: column
              value: "{}"
              operator: =
            - ignore_case: true
              column: column
              value: "{}"
              operator: =
            multi_time_range:
            - offSet: offSet
            - offSet: offSet
            type: custom
            promql_condition: ""
            vrl_function: vrl_function
            sql: sql
          last_triggered_at: 6
          alert_id: "{}"
          name: name
          description: description
          folder_name: folder_name
          folder_id: folder_id
          enabled: true
        - last_satisfied_at: 0
          owner: owner
          condition:
            promql: promql
            search_event_type: ""
            aggregation: ""
            conditions:
            - ignore_case: true
              column: column
              value: "{}"
              operator: =
            - ignore_case: true
              column: column
              value: "{}"
              operator: =
            multi_time_range:
            - offSet: offSet
            - offSet: offSet
            type: custom
            promql_condition: ""
            vrl_function: vrl_function
            sql: sql
          last_triggered_at: 6
          alert_id: "{}"
          name: name
          description: description
          folder_name: folder_name
          folder_id: folder_id
          enabled: true
      properties:
        list:
          items:
            $ref: '#/components/schemas/ListAlertsResponseBodyItem'
          type: array
      required:
      - list
      type: object
    ListAlertsResponseBodyItem:
      description: An item in the list returned by the `ListDashboards` endpoint.
      example:
        last_satisfied_at: 0
        owner: owner
        condition:
          promql: promql
          search_event_type: ""
          aggregation: ""
          conditions:
          - ignore_case: true
            column: column
            value: "{}"
            operator: =
          - ignore_case: true
            column: column
            value: "{}"
            operator: =
          multi_time_range:
          - offSet: offSet
          - offSet: offSet
          type: custom
          promql_condition: ""
          vrl_function: vrl_function
          sql: sql
        last_triggered_at: 6
        alert_id: "{}"
        name: name
        description: description
        folder_name: folder_name
        folder_id: folder_id
        enabled: true
      properties:
        alert_id:
          $ref: '#/components/schemas/Ksuid'
        condition:
          $ref: '#/components/schemas/QueryCondition'
        description:
          nullable: true
          type: string
        enabled:
          type: boolean
        folder_id:
          type: string
        folder_name:
          type: string
        last_satisfied_at:
          format: int64
          nullable: true
          type: integer
        last_triggered_at:
          format: int64
          nullable: true
          type: integer
        name:
          type: string
        owner:
          nullable: true
          type: string
      required:
      - alert_id
      - condition
      - enabled
      - folder_id
      - folder_name
      - name
      type: object
    ListDashboardsResponseBody:
      description: HTTP response body for `ListDashboards` endpoint.
      example:
        dashboards:
        - owner: owner
          role: role
          created: 2000-01-23T04:56:07.000+00:00
          description: description
          folder_name: folder_name
          title: title
          version: 6
          v1: ""
          folder_id: folder_id
          v2: ""
          v3: ""
          hash: hash
          v4: ""
          dashboard_id: dashboard_id
          updatedAt: 0
          v5: ""
        - owner: owner
          role: role
          created: 2000-01-23T04:56:07.000+00:00
          description: description
          folder_name: folder_name
          title: title
          version: 6
          v1: ""
          folder_id: folder_id
          v2: ""
          v3: ""
          hash: hash
          v4: ""
          dashboard_id: dashboard_id
          updatedAt: 0
          v5: ""
      properties:
        dashboards:
          items:
            $ref: '#/components/schemas/ListDashboardsResponseBodyItem'
          type: array
      required:
      - dashboards
      type: object
    ListDashboardsResponseBodyItem:
      description: An item in the list returned by the `ListDashboards` endpoint.
      example:
        owner: owner
        role: role
        created: 2000-01-23T04:56:07.000+00:00
        description: description
        folder_name: folder_name
        title: title
        version: 6
        v1: ""
        folder_id: folder_id
        v2: ""
        v3: ""
        hash: hash
        v4: ""
        dashboard_id: dashboard_id
        updatedAt: 0
        v5: ""
      properties:
        created:
          format: date-time
          type: string
        dashboard_id:
          type: string
        description:
          type: string
        folder_id:
          type: string
        folder_name:
          type: string
        hash:
          type: string
        owner:
          type: string
        role:
          type: string
        title:
          type: string
        updatedAt:
          format: int64
          type: integer
        v1:
          allOf:
          - $ref: '#/components/schemas/v1.Dashboard'
          nullable: true
        v2:
          allOf:
          - $ref: '#/components/schemas/v2.Dashboard'
          nullable: true
        v3:
          allOf:
          - $ref: '#/components/schemas/v3.Dashboard'
          nullable: true
        v4:
          allOf:
          - $ref: '#/components/schemas/v4.Dashboard'
          nullable: true
        v5:
          allOf:
          - $ref: '#/components/schemas/v5.Dashboard'
          nullable: true
        version:
          format: int32
          type: integer
      required:
      - created
      - dashboard_id
      - description
      - folder_id
      - folder_name
      - hash
      - owner
      - role
      - title
      - updatedAt
      - version
      type: object
    ListFoldersResponseBody:
      description: HTTP response body for `ListFolder` endpoint.
      example:
        list:
        - "{}"
        - "{}"
      properties:
        list:
          items:
            $ref: '#/components/schemas/Folder'
          type: array
      required:
      - list
      type: object
    ListStream:
      example:
        total: 0
        list:
        - schema:
          - name: name
            type: type
          - name: name
            type: type
          storage_type: storage_type
          settings:
            full_text_search_keys:
            - full_text_search_keys
            - full_text_search_keys
            extended_retention_days:
            - "{}"
            - "{}"
            bloom_filter_fields:
            - bloom_filter_fields
            - bloom_filter_fields
            flatten_level: 6
            index_fields:
            - index_fields
            - index_fields
            max_query_range: 5
            store_original_data: true
            index_updated_at: 1
            partition_keys:
            - types: value
              field: field
              disabled: true
            - types: value
              field: field
              disabled: true
            partition_time_level: ""
            data_retention: 0
            defined_schema_fields:
            - defined_schema_fields
            - defined_schema_fields
            distinct_value_fields:
            - "{}"
            - "{}"
            approx_partition: true
          stats:
            doc_time_max: 9
            doc_num: 7
            index_size: 4.145608029883936
            compressed_size: 5.637376656633329
            storage_size: 7.386281948385884
            created_at: 2
            doc_time_min: 3
            file_num: 2
          total_fields: 0
          name: name
          stream_type: logs
          uds_schema:
          - name: name
            type: type
          - name: name
            type: type
          metrics_meta: ""
        - schema:
          - name: name
            type: type
          - name: name
            type: type
          storage_type: storage_type
          settings:
            full_text_search_keys:
            - full_text_search_keys
            - full_text_search_keys
            extended_retention_days:
            - "{}"
            - "{}"
            bloom_filter_fields:
            - bloom_filter_fields
            - bloom_filter_fields
            flatten_level: 6
            index_fields:
            - index_fields
            - index_fields
            max_query_range: 5
            store_original_data: true
            index_updated_at: 1
            partition_keys:
            - types: value
              field: field
              disabled: true
            - types: value
              field: field
              disabled: true
            partition_time_level: ""
            data_retention: 0
            defined_schema_fields:
            - defined_schema_fields
            - defined_schema_fields
            distinct_value_fields:
            - "{}"
            - "{}"
            approx_partition: true
          stats:
            doc_time_max: 9
            doc_num: 7
            index_size: 4.145608029883936
            compressed_size: 5.637376656633329
            storage_size: 7.386281948385884
            created_at: 2
            doc_time_min: 3
            file_num: 2
          total_fields: 0
          name: name
          stream_type: logs
          uds_schema:
          - name: name
            type: type
          - name: name
            type: type
          metrics_meta: ""
      properties:
        list:
          items:
            $ref: '#/components/schemas/Stream'
          type: array
        total:
          minimum: 0
          type: integer
      required:
      - list
      - total
      type: object
    Metadata:
      properties:
        help:
          type: string
        metric_family_name:
          type: string
        metric_type:
          $ref: '#/components/schemas/MetricType'
        unit:
          type: string
      required:
      - help
      - metric_family_name
      - metric_type
      - unit
      type: object
    MetricType:
      enum:
      - Unknown
      - Counter
      - Gauge
      - Histogram
      - GaugeHistogram
      - ExponentialHistogram
      - Summary
      - Info
      - StateSet
      - Empty
      type: string
    MoveAlertsRequestBody:
      description: HTTP request body for `MoveAlerts` endpoint.
      example:
        dst_folder_id: dst_folder_id
        alert_ids:
        - "{}"
        - "{}"
      properties:
        alert_ids:
          description: IDs of the alerts to move.
          items:
            $ref: '#/components/schemas/Ksuid'
          type: array
        dst_folder_id:
          description: Indicates the folder to which alerts should be moved.
          type: string
      required:
      - alert_ids
      - dst_folder_id
      type: object
    MoveDashboardRequestBody:
      description: HTTP request body for `MoveDashboard` endpoint.
      example:
        from: from
        to: to
      properties:
        from:
          type: string
        to:
          type: string
      required:
      - from
      - to
      type: object
    MoveDashboardsRequestBody:
      description: HTTP request body for `MoveDashboards` endpoint.
      example:
        dashboard_ids:
        - dashboard_ids
        - dashboard_ids
        dst_folder_id: dst_folder_id
      properties:
        dashboard_ids:
          description: IDs of the dashboards to move.
          items:
            type: string
          type: array
        dst_folder_id:
          description: Indicates the folder to which dashboard should be moved.
          type: string
      required:
      - dashboard_ids
      - dst_folder_id
      type: object
    Operator:
      enum:
      - =
      - '!='
      - '>'
      - '>='
      - <
      - <=
      - Contains
      - NotContains
      type: string
    OrderBy:
      enum:
      - desc
      - asc
      type: string
    OrgDetails:
      example:
        identifier: identifier
        user_email: user_email
        name: name
        ingest_threshold: 6
        id: 0
        search_threshold: 1
        type: type
        UserObj:
          last_name: last_name
          first_name: first_name
          email: email
      properties:
        UserObj:
          $ref: '#/components/schemas/OrgUser'
        id:
          format: int64
          type: integer
        identifier:
          type: string
        ingest_threshold:
          format: int64
          type: integer
        name:
          type: string
        search_threshold:
          format: int64
          type: integer
        type:
          type: string
        user_email:
          type: string
      required:
      - UserObj
      - id
      - identifier
      - ingest_threshold
      - name
      - search_threshold
      - type
      - user_email
      type: object
    OrgSummary:
      example:
        alerts:
          num_realtime: 0
          num_scheduled: 6
        total_functions: 4
        pipelines:
          num_realtime: 1
          num_scheduled: 5
        streams:
          total_index_size: 7.061401241503109
          num_streams: 5
          total_records: 9
          total_storage_size: 3.616076749251911
          total_compressed_size: 2.3021358869347655
        total_dashboards: 2
      properties:
        alerts:
          $ref: '#/components/schemas/AlertSummary'
        pipelines:
          $ref: '#/components/schemas/PipelineSummary'
        streams:
          $ref: '#/components/schemas/StreamSummary'
        total_dashboards:
          format: int64
          type: integer
        total_functions:
          format: int64
          type: integer
      required:
      - alerts
      - pipelines
      - streams
      - total_dashboards
      - total_functions
      type: object
    OrgUser:
      example:
        last_name: last_name
        first_name: first_name
        email: email
      properties:
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
      required:
      - email
      - first_name
      - last_name
      type: object
    OrganizationResponse:
      example:
        data:
        - identifier: identifier
          user_email: user_email
          name: name
          ingest_threshold: 6
          id: 0
          search_threshold: 1
          type: type
          UserObj:
            last_name: last_name
            first_name: first_name
            email: email
        - identifier: identifier
          user_email: user_email
          name: name
          ingest_threshold: 6
          id: 0
          search_threshold: 1
          type: type
          UserObj:
            last_name: last_name
            first_name: first_name
            email: email
      properties:
        data:
          items:
            $ref: '#/components/schemas/OrgDetails'
          type: array
      required:
      - data
      type: object
    OrganizationSetting:
      properties:
        enable_websocket_search:
          type: boolean
        min_auto_refresh_interval:
          format: int32
          minimum: 0
          type: integer
        scrape_interval:
          description: |-
            Ideally this should be the same as prometheus-scrape-interval (in
            seconds).
          format: int32
          minimum: 0
          type: integer
        span_id_field_name:
          type: string
        toggle_ingestion_logs:
          type: boolean
        trace_id_field_name:
          type: string
      type: object
    OrganizationSettingResponse:
      properties:
        data:
          $ref: '#/components/schemas/OrganizationSetting'
      required:
      - data
      type: object
    Panel:
      properties:
        config:
          $ref: '#/components/schemas/PanelConfig'
        customQuery:
          type: boolean
        fields:
          $ref: '#/components/schemas/PanelFields'
        id:
          type: string
        query:
          type: string
        queryType:
          type: string
        type:
          type: string
      required:
      - config
      - customQuery
      - fields
      - id
      - query
      - type
      type: object
    PanelConfig:
      properties:
        description:
          type: string
        legends_position:
          nullable: true
          type: string
        promql_legend:
          nullable: true
          type: string
        show_legends:
          type: boolean
        title:
          type: string
        unit:
          nullable: true
          type: string
        unit_custom:
          nullable: true
          type: string
      required:
      - description
      - show_legends
      - title
      type: object
    PanelFields:
      properties:
        filter:
          items:
            $ref: '#/components/schemas/PanelFilter'
          type: array
        stream:
          type: string
        stream_type:
          $ref: '#/components/schemas/StreamType'
        x:
          items:
            $ref: '#/components/schemas/AxisItem'
          type: array
        "y":
          items:
            $ref: '#/components/schemas/AxisItem'
          type: array
      required:
      - filter
      - stream
      - stream_type
      - x
      - "y"
      type: object
    PanelFilter:
      properties:
        column:
          type: string
        operator:
          nullable: true
          type: string
        type:
          type: string
        value:
          nullable: true
          type: string
        values:
          items:
            type: string
          type: array
      required:
      - column
      - type
      - values
      type: object
    PartitionTimeLevel:
      enum:
      - unset
      - hourly
      - daily
      type: string
    PasscodeResponse:
      example:
        data:
          user: user
          passcode: passcode
      properties:
        data:
          $ref: '#/components/schemas/IngestionPasscode'
      required:
      - data
      type: object
    PipelineSummary:
      example:
        num_realtime: 1
        num_scheduled: 5
      properties:
        num_realtime:
          format: int64
          type: integer
        num_scheduled:
          format: int64
          type: integer
      required:
      - num_realtime
      - num_scheduled
      type: object
    QueryCondition:
      example:
        promql: promql
        search_event_type: ""
        aggregation: ""
        conditions:
        - ignore_case: true
          column: column
          value: "{}"
          operator: =
        - ignore_case: true
          column: column
          value: "{}"
          operator: =
        multi_time_range:
        - offSet: offSet
        - offSet: offSet
        type: custom
        promql_condition: ""
        vrl_function: vrl_function
        sql: sql
      properties:
        aggregation:
          allOf:
          - $ref: '#/components/schemas/Aggregation'
          nullable: true
        conditions:
          items:
            $ref: '#/components/schemas/Condition'
          nullable: true
          type: array
        multi_time_range:
          items:
            $ref: '#/components/schemas/CompareHistoricData'
          nullable: true
          type: array
        promql:
          nullable: true
          type: string
        promql_condition:
          allOf:
          - $ref: '#/components/schemas/Condition'
          nullable: true
        search_event_type:
          allOf:
          - $ref: '#/components/schemas/SearchEventType'
          nullable: true
        sql:
          nullable: true
          type: string
        type:
          $ref: '#/components/schemas/QueryType'
        vrl_function:
          nullable: true
          type: string
      type: object
    QueryData:
      properties:
        field:
          type: string
        max_record_size:
          format: int64
          nullable: true
          type: integer
        stream:
          type: string
        stream_type:
          $ref: '#/components/schemas/StreamType'
      required:
      - field
      - stream
      - stream_type
      type: object
    QueryInfo:
      properties:
        end_time:
          format: int64
          type: integer
        sql:
          type: string
        start_time:
          format: int64
          type: integer
      required:
      - end_time
      - sql
      - start_time
      type: object
    QueryStatus:
      properties:
        created_at:
          format: int64
          type: integer
        org_id:
          nullable: true
          type: string
        query:
          allOf:
          - $ref: '#/components/schemas/QueryInfo'
          nullable: true
        scan_stats:
          allOf:
          - $ref: '#/components/schemas/ScanStats'
          nullable: true
        search_type:
          allOf:
          - $ref: '#/components/schemas/SearchEventType'
          nullable: true
        started_at:
          format: int64
          type: integer
        status:
          type: string
        stream_type:
          nullable: true
          type: string
        trace_id:
          type: string
        user_id:
          nullable: true
          type: string
        work_group:
          type: string
      required:
      - created_at
      - started_at
      - status
      - trace_id
      - work_group
      type: object
    QueryStatusResponse:
      properties:
        status:
          items:
            $ref: '#/components/schemas/QueryStatus'
          type: array
      required:
      - status
      type: object
    QueryType:
      enum:
      - custom
      - sql
      - promql
      type: string
    RecordStatus:
      properties:
        error:
          type: string
        failed:
          format: int32
          minimum: 0
          type: integer
        successful:
          format: int32
          minimum: 0
          type: integer
      required:
      - failed
      - successful
      type: object
    RequestEncoding:
      enum:
      - base64
      - Empty
      type: string
    ResponseNodeTook:
      properties:
        is_ingester:
          type: boolean
        node:
          type: string
        took:
          minimum: 0
          type: integer
      required:
      - is_ingester
      - node
      - took
      type: object
    ResponseTook:
      properties:
        cluster_total:
          minimum: 0
          type: integer
        cluster_wait_queue:
          minimum: 0
          type: integer
        idx_took:
          minimum: 0
          type: integer
        nodes:
          items:
            $ref: '#/components/schemas/ResponseNodeTook'
          type: array
        total:
          minimum: 0
          type: integer
        wait_queue:
          minimum: 0
          type: integer
      required:
      - cluster_total
      - cluster_wait_queue
      - idx_took
      - total
      - wait_queue
      type: object
    RumIngestionResponse:
      example:
        data:
          rum_token: rum_token
          user: user
      properties:
        data:
          $ref: '#/components/schemas/RumIngestionToken'
      required:
      - data
      type: object
    RumIngestionToken:
      example:
        rum_token: rum_token
        user: user
      properties:
        rum_token:
          nullable: true
          type: string
        user:
          type: string
      required:
      - user
      type: object
    ScanStats:
      properties:
        compressed_size:
          format: int64
          type: integer
        files:
          format: int64
          type: integer
        idx_scan_size:
          format: int64
          type: integer
        idx_took:
          format: int64
          type: integer
        original_size:
          format: int64
          type: integer
        querier_disk_cached_files:
          format: int64
          type: integer
        querier_files:
          format: int64
          type: integer
        querier_memory_cached_files:
          format: int64
          type: integer
        records:
          format: int64
          type: integer
      required:
      - compressed_size
      - files
      - idx_scan_size
      - idx_took
      - original_size
      - querier_disk_cached_files
      - querier_files
      - querier_memory_cached_files
      - records
      type: object
    SearchEventContext:
      properties:
        alert_key:
          nullable: true
          type: string
        dashboard_id:
          nullable: true
          type: string
        dashboard_name:
          nullable: true
          type: string
        derived_stream_key:
          nullable: true
          type: string
        folder_id:
          nullable: true
          type: string
        folder_name:
          nullable: true
          type: string
        report_id:
          nullable: true
          type: string
      type: object
    SearchEventType:
      enum:
      - ui
      - dashboards
      - reports
      - alerts
      - values
      - other
      - rum
      - derivedstream
      - searchjob
      type: string
    SearchHistoryRequest:
      example:
        start_time: 1
        trace_id: trace_id
        user_email: user_email
        size: 6
        stream_name: stream_name
        org_id: org_id
        end_time: 0
        stream_type: stream_type
      properties:
        end_time:
          format: int64
          type: integer
        org_id:
          nullable: true
          type: string
        size:
          format: int64
          type: integer
        start_time:
          format: int64
          type: integer
        stream_name:
          nullable: true
          type: string
        stream_type:
          nullable: true
          type: string
        trace_id:
          nullable: true
          type: string
        user_email:
          nullable: true
          type: string
      required:
      - end_time
      - start_time
      type: object
    SearchPartitionRequest:
      properties:
        clusters:
          items:
            type: string
          type: array
        encoding:
          $ref: '#/components/schemas/RequestEncoding'
        end_time:
          format: int64
          type: integer
        query_fn:
          nullable: true
          type: string
        regions:
          items:
            type: string
          type: array
        sql:
          type: string
        start_time:
          format: int64
          type: integer
        streaming_output:
          type: boolean
      required:
      - end_time
      - sql
      - start_time
      type: object
    SearchPartitionResponse:
      properties:
        compressed_size:
          minimum: 0
          type: integer
        file_num:
          minimum: 0
          type: integer
        histogram_interval:
          format: int64
          nullable: true
          type: integer
        max_query_range:
          format: int64
          type: integer
        order_by:
          $ref: '#/components/schemas/OrderBy'
        original_size:
          minimum: 0
          type: integer
        partitions:
          items:
            items:
              format: int64
              type: integer
            type: array
          type: array
        records:
          minimum: 0
          type: integer
        streaming_aggs:
          type: boolean
        streaming_id:
          nullable: true
          type: string
        streaming_output:
          type: boolean
        trace_id:
          type: string
      required:
      - compressed_size
      - file_num
      - max_query_range
      - order_by
      - original_size
      - partitions
      - records
      - streaming_aggs
      - streaming_output
      - trace_id
      type: object
    SearchQuery:
      example:
        skip_wal: true
        uses_zo_fn: true
        streaming_output: true
        end_time: 0
        query_fn: query_fn
        query_type: query_type
        quick_mode: true
        sql: sql
        start_time: 5
        size: 1
        action_id: action_id
        from: 6
        streaming_id: streaming_id
        track_total_hits: true
      properties:
        action_id:
          nullable: true
          type: string
        end_time:
          format: int64
          type: integer
        from:
          format: int64
          type: integer
        query_fn:
          nullable: true
          type: string
        query_type:
          type: string
        quick_mode:
          type: boolean
        size:
          format: int64
          type: integer
        skip_wal:
          type: boolean
        sql:
          type: string
        start_time:
          format: int64
          type: integer
        streaming_id:
          nullable: true
          type: string
        streaming_output:
          type: boolean
        track_total_hits:
          type: boolean
        uses_zo_fn:
          type: boolean
      required:
      - sql
      type: object
    SearchRequest:
      example:
        regions:
        - regions
        - regions
        search_event_context: ""
        query:
          skip_wal: true
          uses_zo_fn: true
          streaming_output: true
          end_time: 0
          query_fn: query_fn
          query_type: query_type
          quick_mode: true
          sql: sql
          start_time: 5
          size: 1
          action_id: action_id
          from: 6
          streaming_id: streaming_id
          track_total_hits: true
        use_cache: true
        encoding: base64
        search_type: ""
        clusters:
        - clusters
        - clusters
        timeout: 5
      properties:
        clusters:
          items:
            type: string
          type: array
        encoding:
          $ref: '#/components/schemas/RequestEncoding'
        query:
          $ref: '#/components/schemas/SearchQuery'
        regions:
          items:
            type: string
          type: array
        search_event_context:
          allOf:
          - $ref: '#/components/schemas/SearchEventContext'
          nullable: true
        search_type:
          allOf:
          - $ref: '#/components/schemas/SearchEventType'
          nullable: true
        timeout:
          format: int64
          type: integer
        use_cache:
          nullable: true
          type: boolean
      required:
      - query
      type: object
    SearchResponse:
      example:
        took: 0
        new_end_time: 5
        trace_id: trace_id
        took_detail: ""
        is_partial: true
        new_start_time: 2
        columns:
        - columns
        - columns
        response_type: response_type
        idx_scan_size: 0
        cached_ratio: 0
        result_cache_ratio: 0
        hits:
        - "{}"
        - "{}"
        scan_records: 0
        function_error: function_error
        histogram_interval: 1
        total: 0
        size: 2
        scan_size: 0
        order_by: ""
        from: 6
        work_group: work_group
      properties:
        cached_ratio:
          minimum: 0
          type: integer
        columns:
          items:
            type: string
          type: array
        from:
          format: int64
          type: integer
        function_error:
          type: string
        histogram_interval:
          format: int64
          nullable: true
          type: integer
        hits:
          items:
            type: object
          type: array
        idx_scan_size:
          minimum: 0
          type: integer
        is_partial:
          type: boolean
        new_end_time:
          format: int64
          nullable: true
          type: integer
        new_start_time:
          format: int64
          nullable: true
          type: integer
        order_by:
          allOf:
          - $ref: '#/components/schemas/OrderBy'
          nullable: true
        response_type:
          type: string
        result_cache_ratio:
          minimum: 0
          type: integer
        scan_records:
          minimum: 0
          type: integer
        scan_size:
          minimum: 0
          type: integer
        size:
          format: int64
          type: integer
        took:
          minimum: 0
          type: integer
        took_detail:
          allOf:
          - $ref: '#/components/schemas/ResponseTook'
          nullable: true
        total:
          minimum: 0
          type: integer
        trace_id:
          type: string
        work_group:
          nullable: true
          type: string
      required:
      - cached_ratio
      - from
      - hits
      - idx_scan_size
      - scan_records
      - scan_size
      - size
      - took
      - total
      type: object
    ShardResponse:
      properties:
        failed:
          format: int64
          type: integer
        successful:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - failed
      - successful
      - total
      type: object
    ShortenUrlRequest:
      example:
        original_url: original_url
      properties:
        original_url:
          type: string
      required:
      - original_url
      type: object
    ShortenUrlResponse:
      example:
        short_url: short_url
      properties:
        short_url:
          type: string
      required:
      - short_url
      type: object
    SignInResponse:
      properties:
        message:
          type: string
        status:
          type: boolean
      required:
      - message
      - status
      type: object
    Stream:
      example:
        schema:
        - name: name
          type: type
        - name: name
          type: type
        storage_type: storage_type
        settings:
          full_text_search_keys:
          - full_text_search_keys
          - full_text_search_keys
          extended_retention_days:
          - "{}"
          - "{}"
          bloom_filter_fields:
          - bloom_filter_fields
          - bloom_filter_fields
          flatten_level: 6
          index_fields:
          - index_fields
          - index_fields
          max_query_range: 5
          store_original_data: true
          index_updated_at: 1
          partition_keys:
          - types: value
            field: field
            disabled: true
          - types: value
            field: field
            disabled: true
          partition_time_level: ""
          data_retention: 0
          defined_schema_fields:
          - defined_schema_fields
          - defined_schema_fields
          distinct_value_fields:
          - "{}"
          - "{}"
          approx_partition: true
        stats:
          doc_time_max: 9
          doc_num: 7
          index_size: 4.145608029883936
          compressed_size: 5.637376656633329
          storage_size: 7.386281948385884
          created_at: 2
          doc_time_min: 3
          file_num: 2
        total_fields: 0
        name: name
        stream_type: logs
        uds_schema:
        - name: name
          type: type
        - name: name
          type: type
        metrics_meta: ""
      properties:
        metrics_meta:
          allOf:
          - $ref: '#/components/schemas/Metadata'
          nullable: true
        name:
          type: string
        schema:
          items:
            $ref: '#/components/schemas/StreamProperty'
          type: array
        settings:
          $ref: '#/components/schemas/StreamSettings'
        stats:
          $ref: '#/components/schemas/StreamStats'
        storage_type:
          type: string
        stream_type:
          $ref: '#/components/schemas/StreamType'
        total_fields:
          minimum: 0
          type: integer
        uds_schema:
          items:
            $ref: '#/components/schemas/StreamProperty'
          nullable: true
          type: array
      required:
      - name
      - settings
      - stats
      - storage_type
      - stream_type
      - total_fields
      type: object
    StreamDeleteFields:
      example:
        fields:
        - fields
        - fields
      properties:
        fields:
          items:
            type: string
          type: array
      required:
      - fields
      type: object
    StreamOrder:
      example:
        isRemoved: true
        streamType: logs
        stream: stream
        applyBeforeFlattening: true
        order: 0
      properties:
        applyBeforeFlattening:
          type: boolean
        isRemoved:
          type: boolean
        order:
          format: int32
          minimum: 0
          type: integer
        stream:
          type: string
        streamType:
          $ref: '#/components/schemas/StreamType'
      type: object
    StreamPartition:
      example:
        types: value
        field: field
        disabled: true
      properties:
        disabled:
          type: boolean
        field:
          type: string
        types:
          $ref: '#/components/schemas/StreamPartitionType'
      required:
      - field
      type: object
    StreamPartitionType:
      oneOf:
      - enum:
        - value
        type: string
      - $ref: '#/components/schemas/StreamPartitionType_oneOf'
      - enum:
        - prefix
        type: string
    StreamProperty:
      example:
        name: name
        type: type
      properties:
        name:
          type: string
        type:
          type: string
      required:
      - name
      - type
      type: object
    StreamSettings:
      example:
        full_text_search_keys:
        - full_text_search_keys
        - full_text_search_keys
        extended_retention_days:
        - "{}"
        - "{}"
        bloom_filter_fields:
        - bloom_filter_fields
        - bloom_filter_fields
        flatten_level: 6
        index_fields:
        - index_fields
        - index_fields
        max_query_range: 5
        store_original_data: true
        index_updated_at: 1
        partition_keys:
        - types: value
          field: field
          disabled: true
        - types: value
          field: field
          disabled: true
        partition_time_level: ""
        data_retention: 0
        defined_schema_fields:
        - defined_schema_fields
        - defined_schema_fields
        distinct_value_fields:
        - "{}"
        - "{}"
        approx_partition: true
      properties:
        approx_partition:
          type: boolean
        bloom_filter_fields:
          items:
            type: string
          type: array
        data_retention:
          format: int64
          type: integer
        defined_schema_fields:
          items:
            type: string
          nullable: true
          type: array
        distinct_value_fields:
          items:
            $ref: '#/components/schemas/DistinctField'
          type: array
        extended_retention_days:
          items:
            $ref: '#/components/schemas/TimeRange'
          type: array
        flatten_level:
          format: int64
          nullable: true
          type: integer
        full_text_search_keys:
          items:
            type: string
          type: array
        index_fields:
          items:
            type: string
          type: array
        index_updated_at:
          format: int64
          type: integer
        max_query_range:
          format: int64
          type: integer
        partition_keys:
          items:
            $ref: '#/components/schemas/StreamPartition'
          type: array
        partition_time_level:
          allOf:
          - $ref: '#/components/schemas/PartitionTimeLevel'
          nullable: true
        store_original_data:
          type: boolean
      type: object
    StreamStats:
      example:
        doc_time_max: 9
        doc_num: 7
        index_size: 4.145608029883936
        compressed_size: 5.637376656633329
        storage_size: 7.386281948385884
        created_at: 2
        doc_time_min: 3
        file_num: 2
      properties:
        compressed_size:
          format: double
          type: number
        created_at:
          format: int64
          type: integer
        doc_num:
          format: int64
          type: integer
        doc_time_max:
          format: int64
          type: integer
        doc_time_min:
          format: int64
          type: integer
        file_num:
          format: int64
          type: integer
        index_size:
          format: double
          type: number
        storage_size:
          format: double
          type: number
      required:
      - compressed_size
      - created_at
      - doc_num
      - doc_time_max
      - doc_time_min
      - file_num
      - index_size
      - storage_size
      type: object
    StreamStatus:
      allOf:
      - $ref: '#/components/schemas/RecordStatus'
      - properties:
          name:
            type: string
        required:
        - name
        type: object
      example:
        name: name
        failed: 0
        error: error
        successful: 0
    StreamSummary:
      example:
        total_index_size: 7.061401241503109
        num_streams: 5
        total_records: 9
        total_storage_size: 3.616076749251911
        total_compressed_size: 2.3021358869347655
      properties:
        num_streams:
          format: int64
          type: integer
        total_compressed_size:
          format: double
          type: number
        total_index_size:
          format: double
          type: number
        total_records:
          format: int64
          type: integer
        total_storage_size:
          format: double
          type: number
      required:
      - num_streams
      - total_compressed_size
      - total_index_size
      - total_records
      - total_storage_size
      type: object
    StreamType:
      enum:
      - logs
      - metrics
      - traces
      - enrichment_tables
      - file_list
      - metadata
      - index
      type: string
    SyslogRoute:
      example:
        subnets:
        - subnets
        - subnets
        id: id
        streamName: streamName
        orgId: orgId
      properties:
        id:
          type: string
        orgId:
          type: string
        streamName:
          type: string
        subnets:
          items:
            type: string
          type: array
      type: object
    SyslogRoutes:
      example:
        routes:
        - subnets:
          - subnets
          - subnets
          id: id
          streamName: streamName
          orgId: orgId
        - subnets:
          - subnets
          - subnets
          id: id
          streamName: streamName
          orgId: orgId
      properties:
        routes:
          items:
            $ref: '#/components/schemas/SyslogRoute'
          type: array
      required:
      - routes
      type: object
    Template:
      example:
        isDefault: true
        name: name
        body: body
        title: title
        type: http
      properties:
        body:
          type: string
        isDefault:
          nullable: true
          type: boolean
        name:
          type: string
        title:
          type: string
        type:
          $ref: '#/components/schemas/DestinationType'
      type: object
    TestVRLRequest:
      example:
        function: function
        events:
        - ""
        - ""
      properties:
        events:
          items: {}
          type: array
        function:
          type: string
      required:
      - events
      - function
      type: object
    TimedAnnotation:
      example:
        annotation_id: annotation_id
        start_time: 6
        panels:
        - panels
        - panels
        end_time: 0
        text: text
        title: title
        tags:
        - tags
        - tags
      properties:
        annotation_id:
          nullable: true
          type: string
        end_time:
          format: int64
          nullable: true
          type: integer
        panels:
          items:
            type: string
          type: array
        start_time:
          format: int64
          type: integer
        tags:
          items:
            type: string
          type: array
        text:
          nullable: true
          type: string
        title:
          type: string
      required:
      - panels
      - start_time
      - tags
      - title
      type: object
    TimedAnnotationDelete:
      example:
        annotation_ids:
        - annotation_ids
        - annotation_ids
      properties:
        annotation_ids:
          items:
            type: string
          type: array
      required:
      - annotation_ids
      type: object
    TimedAnnotationReq:
      example:
        timed_annotations:
        - annotation_id: annotation_id
          start_time: 6
          panels:
          - panels
          - panels
          end_time: 0
          text: text
          title: title
          tags:
          - tags
          - tags
        - annotation_id: annotation_id
          start_time: 6
          panels:
          - panels
          - panels
          end_time: 0
          text: text
          title: title
          tags:
          - tags
          - tags
      properties:
        timed_annotations:
          items:
            $ref: '#/components/schemas/TimedAnnotation'
          type: array
      required:
      - timed_annotations
      type: object
    TimedAnnotationUpdate:
      properties:
        end_time:
          format: int64
          nullable: true
          type: integer
        panels:
          items:
            type: string
          nullable: true
          type: array
        start_time:
          format: int64
          nullable: true
          type: integer
        tags:
          items:
            type: string
          nullable: true
          type: array
        text:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
      type: object
    Transform:
      example:
        numArgs: 0
        transType: 0
        function: function
        streams:
        - isRemoved: true
          streamType: logs
          stream: stream
          applyBeforeFlattening: true
          order: 0
        - isRemoved: true
          streamType: logs
          stream: stream
          applyBeforeFlattening: true
          order: 0
        name: name
        params: params
      properties:
        function:
          type: string
        name:
          type: string
        numArgs:
          format: int32
          minimum: 0
          type: integer
        params:
          type: string
        streams:
          items:
            $ref: '#/components/schemas/StreamOrder'
          nullable: true
          type: array
        transType:
          format: int32
          minimum: 0
          nullable: true
          type: integer
      required:
      - function
      type: object
    TriggerCondition:
      example:
        cron: cron
        period: 5
        timezone: timezone
        threshold: 2
        tolerance_in_secs: 7
        frequency_type: cron
        silence: 5
        operator: =
        frequency: 1
      properties:
        cron:
          type: string
        frequency:
          format: int64
          type: integer
        frequency_type:
          $ref: '#/components/schemas/FrequencyType'
        operator:
          $ref: '#/components/schemas/Operator'
        period:
          format: int64
          type: integer
        silence:
          format: int64
          type: integer
        threshold:
          format: int64
          type: integer
        timezone:
          nullable: true
          type: string
        tolerance_in_secs:
          format: int64
          nullable: true
          type: integer
      required:
      - period
      type: object
    UpdateAlertRequestBody:
      $ref: '#/components/schemas/Alert'
    UpdateDashboardRequestBody:
      $ref: '#/components/schemas/JsonValue'
    UpdateDashboardResponseBody:
      $ref: '#/components/schemas/DashboardDetails'
    UpdateFolderRequestBody:
      $ref: '#/components/schemas/Folder'
    UpdateStreamSettings:
      example:
        full_text_search_keys: "{}"
        extended_retention_days: "{}"
        bloom_filter_fields: "{}"
        flatten_level: 6
        index_fields: "{}"
        max_query_range: 1
        store_original_data: true
        partition_keys: "{}"
        partition_time_level: ""
        data_retention: 0
        defined_schema_fields: "{}"
        distinct_value_fields: "{}"
        approx_partition: true
      properties:
        approx_partition:
          nullable: true
          type: boolean
        bloom_filter_fields:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        data_retention:
          format: int64
          nullable: true
          type: integer
        defined_schema_fields:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        distinct_value_fields:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        extended_retention_days:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        flatten_level:
          format: int64
          nullable: true
          type: integer
        full_text_search_keys:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        index_fields:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        max_query_range:
          format: int64
          nullable: true
          type: integer
        partition_keys:
          $ref: '#/components/schemas/UpdateSettingsWrapper'
        partition_time_level:
          allOf:
          - $ref: '#/components/schemas/PartitionTimeLevel'
          nullable: true
        store_original_data:
          nullable: true
          type: boolean
      type: object
    UpdateUser:
      example:
        change_password: true
        old_password: old_password
        role: ""
        new_password: new_password
        last_name: last_name
        first_name: first_name
        token: token
      properties:
        change_password:
          type: boolean
        first_name:
          nullable: true
          type: string
        last_name:
          nullable: true
          type: string
        new_password:
          nullable: true
          type: string
        old_password:
          nullable: true
          type: string
        role:
          allOf:
          - $ref: '#/components/schemas/UserRole'
          nullable: true
        token:
          nullable: true
          type: string
      type: object
    UpdateViewRequest:
      example:
        data: ""
        view_name: view_name
      properties:
        data:
          description: |-
            Base64 encoded string, containing all the data for a given view.
            This data is expected to be versioned so that the frontend can
            deserialize as required.
        view_name:
          description: "User-readable name of the view, doesn't need to be unique."
          type: string
      required:
      - data
      - view_name
      type: object
    UserList:
      example:
        data:
        - role: admin
          is_external: true
          last_name: last_name
          first_name: first_name
          email: email
        - role: admin
          is_external: true
          last_name: last_name
          first_name: first_name
          email: email
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserResponse'
          type: array
      required:
      - data
      type: object
    UserOrgRole:
      example:
        role: admin
      properties:
        role:
          $ref: '#/components/schemas/UserRole'
      required:
      - role
      type: object
    UserRequest:
      example:
        password: password
        is_external: true
        last_name: last_name
        first_name: first_name
        email: email
      properties:
        email:
          type: string
        first_name:
          type: string
        is_external:
          description: Is the user created via ldap flow.
          type: boolean
        last_name:
          type: string
        password:
          type: string
      required:
      - email
      - password
      type: object
    UserResponse:
      example:
        role: admin
        is_external: true
        last_name: last_name
        first_name: first_name
        email: email
      properties:
        email:
          type: string
        first_name:
          type: string
        is_external:
          type: boolean
        last_name:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
      required:
      - email
      - role
      type: object
    UserRole:
      enum:
      - admin
      - member
      - root
      - service_account
      type: string
    VariableList:
      properties:
        label:
          type: string
        name:
          type: string
        options:
          items:
            $ref: '#/components/schemas/CustomFieldsOption'
          nullable: true
          type: array
        query_data:
          allOf:
          - $ref: '#/components/schemas/QueryData'
          nullable: true
        type:
          type: string
        value:
          nullable: true
          type: string
      required:
      - label
      - name
      - type
      type: object
    Variables:
      properties:
        list:
          items:
            $ref: '#/components/schemas/VariableList'
          type: array
      required:
      - list
      type: object
    View:
      example:
        data: ""
        org_id: org_id
        view_id: view_id
        view_name: view_name
      properties:
        data: {}
        org_id:
          type: string
        view_id:
          type: string
        view_name:
          type: string
      required:
      - data
      - org_id
      - view_id
      - view_name
      type: object
    ViewWithoutData:
      description: |-
        Save the bandwidth for a given view, without sending the actual data
        This is expected to be used for listing views.
      example:
        org_id: org_id
        view_id: view_id
        view_name: view_name
      properties:
        org_id:
          type: string
        view_id:
          type: string
        view_name:
          type: string
      required:
      - org_id
      - view_id
      - view_name
      type: object
    ViewsWithoutData:
      example:
        views:
        - org_id: org_id
          view_id: view_id
          view_name: view_name
        - org_id: org_id
          view_id: view_id
          view_name: view_name
      properties:
        views:
          items:
            $ref: '#/components/schemas/ViewWithoutData'
          type: array
      required:
      - views
      type: object
    StreamPartitionType_oneOf:
      properties:
        hash:
          format: int64
          minimum: 0
          type: integer
      required:
      - hash
      type: object
  securitySchemes:
    Authorization:
      in: header
      name: Authorization
      type: apiKey
