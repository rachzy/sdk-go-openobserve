/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimedAnnotation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimedAnnotation{}

// TimedAnnotation struct for TimedAnnotation
type TimedAnnotation struct {
	AnnotationId NullableString `json:"annotation_id,omitempty"`
	EndTime NullableInt64 `json:"end_time,omitempty"`
	Panels []string `json:"panels"`
	StartTime int64 `json:"start_time"`
	Tags []string `json:"tags"`
	Text NullableString `json:"text,omitempty"`
	Title string `json:"title"`
}

type _TimedAnnotation TimedAnnotation

// NewTimedAnnotation instantiates a new TimedAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimedAnnotation(panels []string, startTime int64, tags []string, title string) *TimedAnnotation {
	this := TimedAnnotation{}
	this.Panels = panels
	this.StartTime = startTime
	this.Tags = tags
	this.Title = title
	return &this
}

// NewTimedAnnotationWithDefaults instantiates a new TimedAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimedAnnotationWithDefaults() *TimedAnnotation {
	this := TimedAnnotation{}
	return &this
}

// GetAnnotationId returns the AnnotationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimedAnnotation) GetAnnotationId() string {
	if o == nil || IsNil(o.AnnotationId.Get()) {
		var ret string
		return ret
	}
	return *o.AnnotationId.Get()
}

// GetAnnotationIdOk returns a tuple with the AnnotationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimedAnnotation) GetAnnotationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnnotationId.Get(), o.AnnotationId.IsSet()
}

// HasAnnotationId returns a boolean if a field has been set.
func (o *TimedAnnotation) HasAnnotationId() bool {
	if o != nil && o.AnnotationId.IsSet() {
		return true
	}

	return false
}

// SetAnnotationId gets a reference to the given NullableString and assigns it to the AnnotationId field.
func (o *TimedAnnotation) SetAnnotationId(v string) {
	o.AnnotationId.Set(&v)
}
// SetAnnotationIdNil sets the value for AnnotationId to be an explicit nil
func (o *TimedAnnotation) SetAnnotationIdNil() {
	o.AnnotationId.Set(nil)
}

// UnsetAnnotationId ensures that no value is present for AnnotationId, not even an explicit nil
func (o *TimedAnnotation) UnsetAnnotationId() {
	o.AnnotationId.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimedAnnotation) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret int64
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimedAnnotation) GetEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *TimedAnnotation) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableInt64 and assigns it to the EndTime field.
func (o *TimedAnnotation) SetEndTime(v int64) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *TimedAnnotation) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *TimedAnnotation) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetPanels returns the Panels field value
func (o *TimedAnnotation) GetPanels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Panels
}

// GetPanelsOk returns a tuple with the Panels field value
// and a boolean to check if the value has been set.
func (o *TimedAnnotation) GetPanelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Panels, true
}

// SetPanels sets field value
func (o *TimedAnnotation) SetPanels(v []string) {
	o.Panels = v
}

// GetStartTime returns the StartTime field value
func (o *TimedAnnotation) GetStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *TimedAnnotation) GetStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *TimedAnnotation) SetStartTime(v int64) {
	o.StartTime = v
}

// GetTags returns the Tags field value
func (o *TimedAnnotation) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *TimedAnnotation) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *TimedAnnotation) SetTags(v []string) {
	o.Tags = v
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimedAnnotation) GetText() string {
	if o == nil || IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimedAnnotation) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *TimedAnnotation) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableString and assigns it to the Text field.
func (o *TimedAnnotation) SetText(v string) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *TimedAnnotation) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *TimedAnnotation) UnsetText() {
	o.Text.Unset()
}

// GetTitle returns the Title field value
func (o *TimedAnnotation) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TimedAnnotation) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TimedAnnotation) SetTitle(v string) {
	o.Title = v
}

func (o TimedAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimedAnnotation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AnnotationId.IsSet() {
		toSerialize["annotation_id"] = o.AnnotationId.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["end_time"] = o.EndTime.Get()
	}
	toSerialize["panels"] = o.Panels
	toSerialize["start_time"] = o.StartTime
	toSerialize["tags"] = o.Tags
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *TimedAnnotation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"panels",
		"start_time",
		"tags",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimedAnnotation := _TimedAnnotation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimedAnnotation)

	if err != nil {
		return err
	}

	*o = TimedAnnotation(varTimedAnnotation)

	return err
}

type NullableTimedAnnotation struct {
	value *TimedAnnotation
	isSet bool
}

func (v NullableTimedAnnotation) Get() *TimedAnnotation {
	return v.value
}

func (v *NullableTimedAnnotation) Set(val *TimedAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableTimedAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableTimedAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimedAnnotation(val *TimedAnnotation) *NullableTimedAnnotation {
	return &NullableTimedAnnotation{value: val, isSet: true}
}

func (v NullableTimedAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimedAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


