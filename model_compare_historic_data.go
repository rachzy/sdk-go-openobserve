/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompareHistoricData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompareHistoricData{}

// CompareHistoricData struct for CompareHistoricData
type CompareHistoricData struct {
	OffSet string `json:"offSet"`
}

type _CompareHistoricData CompareHistoricData

// NewCompareHistoricData instantiates a new CompareHistoricData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareHistoricData(offSet string) *CompareHistoricData {
	this := CompareHistoricData{}
	this.OffSet = offSet
	return &this
}

// NewCompareHistoricDataWithDefaults instantiates a new CompareHistoricData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareHistoricDataWithDefaults() *CompareHistoricData {
	this := CompareHistoricData{}
	return &this
}

// GetOffSet returns the OffSet field value
func (o *CompareHistoricData) GetOffSet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OffSet
}

// GetOffSetOk returns a tuple with the OffSet field value
// and a boolean to check if the value has been set.
func (o *CompareHistoricData) GetOffSetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OffSet, true
}

// SetOffSet sets field value
func (o *CompareHistoricData) SetOffSet(v string) {
	o.OffSet = v
}

func (o CompareHistoricData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompareHistoricData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offSet"] = o.OffSet
	return toSerialize, nil
}

func (o *CompareHistoricData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offSet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompareHistoricData := _CompareHistoricData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompareHistoricData)

	if err != nil {
		return err
	}

	*o = CompareHistoricData(varCompareHistoricData)

	return err
}

type NullableCompareHistoricData struct {
	value *CompareHistoricData
	isSet bool
}

func (v NullableCompareHistoricData) Get() *CompareHistoricData {
	return v.value
}

func (v *NullableCompareHistoricData) Set(val *CompareHistoricData) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareHistoricData) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareHistoricData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareHistoricData(val *CompareHistoricData) *NullableCompareHistoricData {
	return &NullableCompareHistoricData{value: val, isSet: true}
}

func (v NullableCompareHistoricData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareHistoricData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


