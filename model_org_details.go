/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrgDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgDetails{}

// OrgDetails struct for OrgDetails
type OrgDetails struct {
	UserObj OrgUser `json:"UserObj"`
	Id int64 `json:"id"`
	Identifier string `json:"identifier"`
	IngestThreshold int64 `json:"ingest_threshold"`
	Name string `json:"name"`
	SearchThreshold int64 `json:"search_threshold"`
	Type string `json:"type"`
	UserEmail string `json:"user_email"`
}

type _OrgDetails OrgDetails

// NewOrgDetails instantiates a new OrgDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgDetails(userObj OrgUser, id int64, identifier string, ingestThreshold int64, name string, searchThreshold int64, type_ string, userEmail string) *OrgDetails {
	this := OrgDetails{}
	this.UserObj = userObj
	this.Id = id
	this.Identifier = identifier
	this.IngestThreshold = ingestThreshold
	this.Name = name
	this.SearchThreshold = searchThreshold
	this.Type = type_
	this.UserEmail = userEmail
	return &this
}

// NewOrgDetailsWithDefaults instantiates a new OrgDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgDetailsWithDefaults() *OrgDetails {
	this := OrgDetails{}
	return &this
}

// GetUserObj returns the UserObj field value
func (o *OrgDetails) GetUserObj() OrgUser {
	if o == nil {
		var ret OrgUser
		return ret
	}

	return o.UserObj
}

// GetUserObjOk returns a tuple with the UserObj field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetUserObjOk() (*OrgUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserObj, true
}

// SetUserObj sets field value
func (o *OrgDetails) SetUserObj(v OrgUser) {
	o.UserObj = v
}

// GetId returns the Id field value
func (o *OrgDetails) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrgDetails) SetId(v int64) {
	o.Id = v
}

// GetIdentifier returns the Identifier field value
func (o *OrgDetails) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *OrgDetails) SetIdentifier(v string) {
	o.Identifier = v
}

// GetIngestThreshold returns the IngestThreshold field value
func (o *OrgDetails) GetIngestThreshold() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IngestThreshold
}

// GetIngestThresholdOk returns a tuple with the IngestThreshold field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetIngestThresholdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngestThreshold, true
}

// SetIngestThreshold sets field value
func (o *OrgDetails) SetIngestThreshold(v int64) {
	o.IngestThreshold = v
}

// GetName returns the Name field value
func (o *OrgDetails) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrgDetails) SetName(v string) {
	o.Name = v
}

// GetSearchThreshold returns the SearchThreshold field value
func (o *OrgDetails) GetSearchThreshold() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SearchThreshold
}

// GetSearchThresholdOk returns a tuple with the SearchThreshold field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetSearchThresholdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchThreshold, true
}

// SetSearchThreshold sets field value
func (o *OrgDetails) SetSearchThreshold(v int64) {
	o.SearchThreshold = v
}

// GetType returns the Type field value
func (o *OrgDetails) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrgDetails) SetType(v string) {
	o.Type = v
}

// GetUserEmail returns the UserEmail field value
func (o *OrgDetails) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *OrgDetails) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *OrgDetails) SetUserEmail(v string) {
	o.UserEmail = v
}

func (o OrgDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["UserObj"] = o.UserObj
	toSerialize["id"] = o.Id
	toSerialize["identifier"] = o.Identifier
	toSerialize["ingest_threshold"] = o.IngestThreshold
	toSerialize["name"] = o.Name
	toSerialize["search_threshold"] = o.SearchThreshold
	toSerialize["type"] = o.Type
	toSerialize["user_email"] = o.UserEmail
	return toSerialize, nil
}

func (o *OrgDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"UserObj",
		"id",
		"identifier",
		"ingest_threshold",
		"name",
		"search_threshold",
		"type",
		"user_email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrgDetails := _OrgDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrgDetails)

	if err != nil {
		return err
	}

	*o = OrgDetails(varOrgDetails)

	return err
}

type NullableOrgDetails struct {
	value *OrgDetails
	isSet bool
}

func (v NullableOrgDetails) Get() *OrgDetails {
	return v.value
}

func (v *NullableOrgDetails) Set(val *OrgDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgDetails(val *OrgDetails) *NullableOrgDetails {
	return &NullableOrgDetails{value: val, isSet: true}
}

func (v NullableOrgDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


