/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewsWithoutData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewsWithoutData{}

// ViewsWithoutData struct for ViewsWithoutData
type ViewsWithoutData struct {
	Views []ViewWithoutData `json:"views"`
}

type _ViewsWithoutData ViewsWithoutData

// NewViewsWithoutData instantiates a new ViewsWithoutData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewsWithoutData(views []ViewWithoutData) *ViewsWithoutData {
	this := ViewsWithoutData{}
	this.Views = views
	return &this
}

// NewViewsWithoutDataWithDefaults instantiates a new ViewsWithoutData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewsWithoutDataWithDefaults() *ViewsWithoutData {
	this := ViewsWithoutData{}
	return &this
}

// GetViews returns the Views field value
func (o *ViewsWithoutData) GetViews() []ViewWithoutData {
	if o == nil {
		var ret []ViewWithoutData
		return ret
	}

	return o.Views
}

// GetViewsOk returns a tuple with the Views field value
// and a boolean to check if the value has been set.
func (o *ViewsWithoutData) GetViewsOk() ([]ViewWithoutData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Views, true
}

// SetViews sets field value
func (o *ViewsWithoutData) SetViews(v []ViewWithoutData) {
	o.Views = v
}

func (o ViewsWithoutData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewsWithoutData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["views"] = o.Views
	return toSerialize, nil
}

func (o *ViewsWithoutData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"views",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewsWithoutData := _ViewsWithoutData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewsWithoutData)

	if err != nil {
		return err
	}

	*o = ViewsWithoutData(varViewsWithoutData)

	return err
}

type NullableViewsWithoutData struct {
	value *ViewsWithoutData
	isSet bool
}

func (v NullableViewsWithoutData) Get() *ViewsWithoutData {
	return v.value
}

func (v *NullableViewsWithoutData) Set(val *ViewsWithoutData) {
	v.value = val
	v.isSet = true
}

func (v NullableViewsWithoutData) IsSet() bool {
	return v.isSet
}

func (v *NullableViewsWithoutData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewsWithoutData(val *ViewsWithoutData) *NullableViewsWithoutData {
	return &NullableViewsWithoutData{value: val, isSet: true}
}

func (v NullableViewsWithoutData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewsWithoutData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


