/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionResponse{}

// IngestionResponse struct for IngestionResponse
type IngestionResponse struct {
	Code int32 `json:"code"`
	Error NullableString `json:"error,omitempty"`
	Status []StreamStatus `json:"status,omitempty"`
}

type _IngestionResponse IngestionResponse

// NewIngestionResponse instantiates a new IngestionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionResponse(code int32) *IngestionResponse {
	this := IngestionResponse{}
	this.Code = code
	return &this
}

// NewIngestionResponseWithDefaults instantiates a new IngestionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionResponseWithDefaults() *IngestionResponse {
	this := IngestionResponse{}
	return &this
}

// GetCode returns the Code field value
func (o *IngestionResponse) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *IngestionResponse) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *IngestionResponse) SetCode(v int32) {
	o.Code = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestionResponse) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestionResponse) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *IngestionResponse) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *IngestionResponse) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *IngestionResponse) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *IngestionResponse) UnsetError() {
	o.Error.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IngestionResponse) GetStatus() []StreamStatus {
	if o == nil || IsNil(o.Status) {
		var ret []StreamStatus
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionResponse) GetStatusOk() ([]StreamStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IngestionResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []StreamStatus and assigns it to the Status field.
func (o *IngestionResponse) SetStatus(v []StreamStatus) {
	o.Status = v
}

func (o IngestionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *IngestionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionResponse := _IngestionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionResponse)

	if err != nil {
		return err
	}

	*o = IngestionResponse(varIngestionResponse)

	return err
}

type NullableIngestionResponse struct {
	value *IngestionResponse
	isSet bool
}

func (v NullableIngestionResponse) Get() *IngestionResponse {
	return v.value
}

func (v *NullableIngestionResponse) Set(val *IngestionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionResponse(val *IngestionResponse) *NullableIngestionResponse {
	return &NullableIngestionResponse{value: val, isSet: true}
}

func (v NullableIngestionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


