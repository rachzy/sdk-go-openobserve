/*
openobserve

Testing FoldersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/rachzy/sdk-go-openobserve"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_FoldersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FoldersAPIService CreateFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderType FolderType

		resp, httpRes, err := apiClient.FoldersAPI.CreateFolder(context.Background(), orgId, folderType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService CreateFolder_1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.FoldersAPI.CreateFolder_0(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService DeleteFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderType FolderType
		var folderId string

		resp, httpRes, err := apiClient.FoldersAPI.DeleteFolder(context.Background(), orgId, folderType, folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService DeleteFolder_2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderId string

		resp, httpRes, err := apiClient.FoldersAPI.DeleteFolder_0(context.Background(), orgId, folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService GetFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderType FolderType
		var folderId string

		resp, httpRes, err := apiClient.FoldersAPI.GetFolder(context.Background(), orgId, folderType, folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService GetFolderByName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderType FolderType
		var folderName string

		resp, httpRes, err := apiClient.FoldersAPI.GetFolderByName(context.Background(), orgId, folderType, folderName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService GetFolderByName_3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderName string

		resp, httpRes, err := apiClient.FoldersAPI.GetFolderByName_0(context.Background(), orgId, folderName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService GetFolder_4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderId string

		resp, httpRes, err := apiClient.FoldersAPI.GetFolder_0(context.Background(), orgId, folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService ListFolders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderType FolderType

		resp, httpRes, err := apiClient.FoldersAPI.ListFolders(context.Background(), orgId, folderType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService ListFolders_5", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.FoldersAPI.ListFolders_0(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService UpdateFolder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderType FolderType
		var folderId string

		resp, httpRes, err := apiClient.FoldersAPI.UpdateFolder(context.Background(), orgId, folderType, folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FoldersAPIService UpdateFolder_6", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var folderId string

		resp, httpRes, err := apiClient.FoldersAPI.UpdateFolder_0(context.Background(), orgId, folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
