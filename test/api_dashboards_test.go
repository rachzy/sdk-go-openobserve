/*
openobserve

Testing DashboardsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/rachzy/sdk-go-openobserve"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_DashboardsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DashboardsAPIService CreateAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		resp, httpRes, err := apiClient.DashboardsAPI.CreateAnnotations(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService CreateDashboard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DashboardsAPI.CreateDashboard(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService DeleteAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		httpRes, err := apiClient.DashboardsAPI.DeleteAnnotations(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService DeleteDashboard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		resp, httpRes, err := apiClient.DashboardsAPI.DeleteDashboard(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService GetAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		resp, httpRes, err := apiClient.DashboardsAPI.GetAnnotations(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService GetDashboard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		resp, httpRes, err := apiClient.DashboardsAPI.GetDashboard(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService ListDashboards", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DashboardsAPI.ListDashboards(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService MoveDashboard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		resp, httpRes, err := apiClient.DashboardsAPI.MoveDashboard(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService MoveDashboards", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DashboardsAPI.MoveDashboards(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService RemoveTimedAnnotationFromPanel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string
		var timedAnnotationId string

		httpRes, err := apiClient.DashboardsAPI.RemoveTimedAnnotationFromPanel(context.Background(), orgId, dashboardId, timedAnnotationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService UpdateAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string
		var timedAnnotationId string

		httpRes, err := apiClient.DashboardsAPI.UpdateAnnotations(context.Background(), orgId, dashboardId, timedAnnotationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DashboardsAPIService UpdateDashboard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var dashboardId string

		resp, httpRes, err := apiClient.DashboardsAPI.UpdateDashboard(context.Background(), orgId, dashboardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
