/*
openobserve

Testing KVAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openobserve "github.com/rachzy/sdk-go-openobserve"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_KVAPIService(t *testing.T) {

	configuration := openobserve.NewConfiguration()
	apiClient := openobserve.NewAPIClient(configuration)

	t.Run("Test KVAPIService GetKVValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var key string

		resp, httpRes, err := apiClient.KVAPI.GetKVValue(context.Background(), orgId, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService ListKVKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.KVAPI.ListKVKeys(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService RemoveKVValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var key string

		resp, httpRes, err := apiClient.KVAPI.RemoveKVValue(context.Background(), orgId, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KVAPIService SetKVValue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var key string

		resp, httpRes, err := apiClient.KVAPI.SetKVValue(context.Background(), orgId, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
