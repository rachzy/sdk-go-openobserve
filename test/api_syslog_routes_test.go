/*
openobserve

Testing SyslogRoutesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/rachzy/sdk-go-openobserve"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_SyslogRoutesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SyslogRoutesAPIService CreateSyslogRoute", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.SyslogRoutesAPI.CreateSyslogRoute(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyslogRoutesAPIService DeleteSyslogRoute", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.SyslogRoutesAPI.DeleteSyslogRoute(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyslogRoutesAPIService ListSyslogRoutes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.SyslogRoutesAPI.ListSyslogRoutes(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SyslogRoutesAPIService UpdateSyslogRoute", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var id string

		resp, httpRes, err := apiClient.SyslogRoutesAPI.UpdateSyslogRoute(context.Background(), orgId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
