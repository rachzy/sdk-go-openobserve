/*
openobserve

Testing SavedViewsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/rachzy/sdk-go-openobserve"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_SavedViewsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SavedViewsAPIService CreateSavedViews", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.SavedViewsAPI.CreateSavedViews(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SavedViewsAPIService DeleteSavedViews", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var viewId string

		resp, httpRes, err := apiClient.SavedViewsAPI.DeleteSavedViews(context.Background(), orgId, viewId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SavedViewsAPIService GetSavedView", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var viewId string

		resp, httpRes, err := apiClient.SavedViewsAPI.GetSavedView(context.Background(), orgId, viewId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SavedViewsAPIService ListSavedViews", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.SavedViewsAPI.ListSavedViews(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SavedViewsAPIService UpdateSavedViews", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var viewId string

		resp, httpRes, err := apiClient.SavedViewsAPI.UpdateSavedViews(context.Background(), orgId, viewId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
