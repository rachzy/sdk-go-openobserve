/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FolderType Indicates the type of data that the folder can contain.
type FolderType string

// All allowed values of FolderType enum
var AllowedFolderTypeEnumValues = []FolderType{
	"dashboards",
	"alerts",
}

func (v *FolderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FolderType(value)
	for _, existing := range AllowedFolderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FolderType", value)
}

// NewFolderTypeFromValue returns a pointer to a valid FolderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFolderTypeFromValue(v string) (*FolderType, error) {
	ev := FolderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FolderType: valid values are %v", v, AllowedFolderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FolderType) IsValid() bool {
	for _, existing := range AllowedFolderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FolderType value
func (v FolderType) Ptr() *FolderType {
	return &v
}

type NullableFolderType struct {
	value *FolderType
	isSet bool
}

func (v NullableFolderType) Get() *FolderType {
	return v.value
}

func (v *NullableFolderType) Set(val *FolderType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderType(val *FolderType) *NullableFolderType {
	return &NullableFolderType{value: val, isSet: true}
}

func (v NullableFolderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

