/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreamStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamStats{}

// StreamStats struct for StreamStats
type StreamStats struct {
	CompressedSize float64 `json:"compressed_size"`
	CreatedAt int64 `json:"created_at"`
	DocNum int64 `json:"doc_num"`
	DocTimeMax int64 `json:"doc_time_max"`
	DocTimeMin int64 `json:"doc_time_min"`
	FileNum int64 `json:"file_num"`
	IndexSize float64 `json:"index_size"`
	StorageSize float64 `json:"storage_size"`
}

type _StreamStats StreamStats

// NewStreamStats instantiates a new StreamStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamStats(compressedSize float64, createdAt int64, docNum int64, docTimeMax int64, docTimeMin int64, fileNum int64, indexSize float64, storageSize float64) *StreamStats {
	this := StreamStats{}
	this.CompressedSize = compressedSize
	this.CreatedAt = createdAt
	this.DocNum = docNum
	this.DocTimeMax = docTimeMax
	this.DocTimeMin = docTimeMin
	this.FileNum = fileNum
	this.IndexSize = indexSize
	this.StorageSize = storageSize
	return &this
}

// NewStreamStatsWithDefaults instantiates a new StreamStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamStatsWithDefaults() *StreamStats {
	this := StreamStats{}
	return &this
}

// GetCompressedSize returns the CompressedSize field value
func (o *StreamStats) GetCompressedSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CompressedSize
}

// GetCompressedSizeOk returns a tuple with the CompressedSize field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetCompressedSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompressedSize, true
}

// SetCompressedSize sets field value
func (o *StreamStats) SetCompressedSize(v float64) {
	o.CompressedSize = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *StreamStats) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *StreamStats) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetDocNum returns the DocNum field value
func (o *StreamStats) GetDocNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DocNum
}

// GetDocNumOk returns a tuple with the DocNum field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetDocNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocNum, true
}

// SetDocNum sets field value
func (o *StreamStats) SetDocNum(v int64) {
	o.DocNum = v
}

// GetDocTimeMax returns the DocTimeMax field value
func (o *StreamStats) GetDocTimeMax() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DocTimeMax
}

// GetDocTimeMaxOk returns a tuple with the DocTimeMax field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetDocTimeMaxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocTimeMax, true
}

// SetDocTimeMax sets field value
func (o *StreamStats) SetDocTimeMax(v int64) {
	o.DocTimeMax = v
}

// GetDocTimeMin returns the DocTimeMin field value
func (o *StreamStats) GetDocTimeMin() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DocTimeMin
}

// GetDocTimeMinOk returns a tuple with the DocTimeMin field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetDocTimeMinOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocTimeMin, true
}

// SetDocTimeMin sets field value
func (o *StreamStats) SetDocTimeMin(v int64) {
	o.DocTimeMin = v
}

// GetFileNum returns the FileNum field value
func (o *StreamStats) GetFileNum() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileNum
}

// GetFileNumOk returns a tuple with the FileNum field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetFileNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileNum, true
}

// SetFileNum sets field value
func (o *StreamStats) SetFileNum(v int64) {
	o.FileNum = v
}

// GetIndexSize returns the IndexSize field value
func (o *StreamStats) GetIndexSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.IndexSize
}

// GetIndexSizeOk returns a tuple with the IndexSize field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetIndexSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexSize, true
}

// SetIndexSize sets field value
func (o *StreamStats) SetIndexSize(v float64) {
	o.IndexSize = v
}

// GetStorageSize returns the StorageSize field value
func (o *StreamStats) GetStorageSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.StorageSize
}

// GetStorageSizeOk returns a tuple with the StorageSize field value
// and a boolean to check if the value has been set.
func (o *StreamStats) GetStorageSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageSize, true
}

// SetStorageSize sets field value
func (o *StreamStats) SetStorageSize(v float64) {
	o.StorageSize = v
}

func (o StreamStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compressed_size"] = o.CompressedSize
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["doc_num"] = o.DocNum
	toSerialize["doc_time_max"] = o.DocTimeMax
	toSerialize["doc_time_min"] = o.DocTimeMin
	toSerialize["file_num"] = o.FileNum
	toSerialize["index_size"] = o.IndexSize
	toSerialize["storage_size"] = o.StorageSize
	return toSerialize, nil
}

func (o *StreamStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compressed_size",
		"created_at",
		"doc_num",
		"doc_time_max",
		"doc_time_min",
		"file_num",
		"index_size",
		"storage_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamStats := _StreamStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamStats)

	if err != nil {
		return err
	}

	*o = StreamStats(varStreamStats)

	return err
}

type NullableStreamStats struct {
	value *StreamStats
	isSet bool
}

func (v NullableStreamStats) Get() *StreamStats {
	return v.value
}

func (v *NullableStreamStats) Set(val *StreamStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamStats(val *StreamStats) *NullableStreamStats {
	return &NullableStreamStats{value: val, isSet: true}
}

func (v NullableStreamStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


