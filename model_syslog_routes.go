/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SyslogRoutes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyslogRoutes{}

// SyslogRoutes struct for SyslogRoutes
type SyslogRoutes struct {
	Routes []SyslogRoute `json:"routes"`
}

type _SyslogRoutes SyslogRoutes

// NewSyslogRoutes instantiates a new SyslogRoutes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyslogRoutes(routes []SyslogRoute) *SyslogRoutes {
	this := SyslogRoutes{}
	this.Routes = routes
	return &this
}

// NewSyslogRoutesWithDefaults instantiates a new SyslogRoutes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyslogRoutesWithDefaults() *SyslogRoutes {
	this := SyslogRoutes{}
	return &this
}

// GetRoutes returns the Routes field value
func (o *SyslogRoutes) GetRoutes() []SyslogRoute {
	if o == nil {
		var ret []SyslogRoute
		return ret
	}

	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value
// and a boolean to check if the value has been set.
func (o *SyslogRoutes) GetRoutesOk() ([]SyslogRoute, bool) {
	if o == nil {
		return nil, false
	}
	return o.Routes, true
}

// SetRoutes sets field value
func (o *SyslogRoutes) SetRoutes(v []SyslogRoute) {
	o.Routes = v
}

func (o SyslogRoutes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyslogRoutes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routes"] = o.Routes
	return toSerialize, nil
}

func (o *SyslogRoutes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyslogRoutes := _SyslogRoutes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyslogRoutes)

	if err != nil {
		return err
	}

	*o = SyslogRoutes(varSyslogRoutes)

	return err
}

type NullableSyslogRoutes struct {
	value *SyslogRoutes
	isSet bool
}

func (v NullableSyslogRoutes) Get() *SyslogRoutes {
	return v.value
}

func (v *NullableSyslogRoutes) Set(val *SyslogRoutes) {
	v.value = val
	v.isSet = true
}

func (v NullableSyslogRoutes) IsSet() bool {
	return v.isSet
}

func (v *NullableSyslogRoutes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyslogRoutes(val *SyslogRoutes) *NullableSyslogRoutes {
	return &NullableSyslogRoutes{value: val, isSet: true}
}

func (v NullableSyslogRoutes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyslogRoutes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


