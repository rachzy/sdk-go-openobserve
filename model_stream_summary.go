/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreamSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamSummary{}

// StreamSummary struct for StreamSummary
type StreamSummary struct {
	NumStreams int64 `json:"num_streams"`
	TotalCompressedSize float64 `json:"total_compressed_size"`
	TotalIndexSize float64 `json:"total_index_size"`
	TotalRecords int64 `json:"total_records"`
	TotalStorageSize float64 `json:"total_storage_size"`
}

type _StreamSummary StreamSummary

// NewStreamSummary instantiates a new StreamSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamSummary(numStreams int64, totalCompressedSize float64, totalIndexSize float64, totalRecords int64, totalStorageSize float64) *StreamSummary {
	this := StreamSummary{}
	this.NumStreams = numStreams
	this.TotalCompressedSize = totalCompressedSize
	this.TotalIndexSize = totalIndexSize
	this.TotalRecords = totalRecords
	this.TotalStorageSize = totalStorageSize
	return &this
}

// NewStreamSummaryWithDefaults instantiates a new StreamSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamSummaryWithDefaults() *StreamSummary {
	this := StreamSummary{}
	return &this
}

// GetNumStreams returns the NumStreams field value
func (o *StreamSummary) GetNumStreams() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumStreams
}

// GetNumStreamsOk returns a tuple with the NumStreams field value
// and a boolean to check if the value has been set.
func (o *StreamSummary) GetNumStreamsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumStreams, true
}

// SetNumStreams sets field value
func (o *StreamSummary) SetNumStreams(v int64) {
	o.NumStreams = v
}

// GetTotalCompressedSize returns the TotalCompressedSize field value
func (o *StreamSummary) GetTotalCompressedSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCompressedSize
}

// GetTotalCompressedSizeOk returns a tuple with the TotalCompressedSize field value
// and a boolean to check if the value has been set.
func (o *StreamSummary) GetTotalCompressedSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCompressedSize, true
}

// SetTotalCompressedSize sets field value
func (o *StreamSummary) SetTotalCompressedSize(v float64) {
	o.TotalCompressedSize = v
}

// GetTotalIndexSize returns the TotalIndexSize field value
func (o *StreamSummary) GetTotalIndexSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalIndexSize
}

// GetTotalIndexSizeOk returns a tuple with the TotalIndexSize field value
// and a boolean to check if the value has been set.
func (o *StreamSummary) GetTotalIndexSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalIndexSize, true
}

// SetTotalIndexSize sets field value
func (o *StreamSummary) SetTotalIndexSize(v float64) {
	o.TotalIndexSize = v
}

// GetTotalRecords returns the TotalRecords field value
func (o *StreamSummary) GetTotalRecords() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalRecords
}

// GetTotalRecordsOk returns a tuple with the TotalRecords field value
// and a boolean to check if the value has been set.
func (o *StreamSummary) GetTotalRecordsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRecords, true
}

// SetTotalRecords sets field value
func (o *StreamSummary) SetTotalRecords(v int64) {
	o.TotalRecords = v
}

// GetTotalStorageSize returns the TotalStorageSize field value
func (o *StreamSummary) GetTotalStorageSize() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalStorageSize
}

// GetTotalStorageSizeOk returns a tuple with the TotalStorageSize field value
// and a boolean to check if the value has been set.
func (o *StreamSummary) GetTotalStorageSizeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalStorageSize, true
}

// SetTotalStorageSize sets field value
func (o *StreamSummary) SetTotalStorageSize(v float64) {
	o.TotalStorageSize = v
}

func (o StreamSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["num_streams"] = o.NumStreams
	toSerialize["total_compressed_size"] = o.TotalCompressedSize
	toSerialize["total_index_size"] = o.TotalIndexSize
	toSerialize["total_records"] = o.TotalRecords
	toSerialize["total_storage_size"] = o.TotalStorageSize
	return toSerialize, nil
}

func (o *StreamSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"num_streams",
		"total_compressed_size",
		"total_index_size",
		"total_records",
		"total_storage_size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamSummary := _StreamSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamSummary)

	if err != nil {
		return err
	}

	*o = StreamSummary(varStreamSummary)

	return err
}

type NullableStreamSummary struct {
	value *StreamSummary
	isSet bool
}

func (v NullableStreamSummary) Get() *StreamSummary {
	return v.value
}

func (v *NullableStreamSummary) Set(val *StreamSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamSummary(val *StreamSummary) *NullableStreamSummary {
	return &NullableStreamSummary{value: val, isSet: true}
}

func (v NullableStreamSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


