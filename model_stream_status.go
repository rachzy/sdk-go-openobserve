/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StreamStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamStatus{}

// StreamStatus struct for StreamStatus
type StreamStatus struct {
	Error *string `json:"error,omitempty"`
	Failed int32 `json:"failed"`
	Successful int32 `json:"successful"`
	Name string `json:"name"`
}

type _StreamStatus StreamStatus

// NewStreamStatus instantiates a new StreamStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamStatus(failed int32, successful int32, name string) *StreamStatus {
	this := StreamStatus{}
	this.Failed = failed
	this.Successful = successful
	this.Name = name
	return &this
}

// NewStreamStatusWithDefaults instantiates a new StreamStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamStatusWithDefaults() *StreamStatus {
	this := StreamStatus{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *StreamStatus) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamStatus) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *StreamStatus) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *StreamStatus) SetError(v string) {
	o.Error = &v
}

// GetFailed returns the Failed field value
func (o *StreamStatus) GetFailed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *StreamStatus) GetFailedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *StreamStatus) SetFailed(v int32) {
	o.Failed = v
}

// GetSuccessful returns the Successful field value
func (o *StreamStatus) GetSuccessful() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value
// and a boolean to check if the value has been set.
func (o *StreamStatus) GetSuccessfulOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Successful, true
}

// SetSuccessful sets field value
func (o *StreamStatus) SetSuccessful(v int32) {
	o.Successful = v
}

// GetName returns the Name field value
func (o *StreamStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StreamStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StreamStatus) SetName(v string) {
	o.Name = v
}

func (o StreamStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	toSerialize["failed"] = o.Failed
	toSerialize["successful"] = o.Successful
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *StreamStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"failed",
		"successful",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamStatus := _StreamStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamStatus)

	if err != nil {
		return err
	}

	*o = StreamStatus(varStreamStatus)

	return err
}

type NullableStreamStatus struct {
	value *StreamStatus
	isSet bool
}

func (v NullableStreamStatus) Get() *StreamStatus {
	return v.value
}

func (v *NullableStreamStatus) Set(val *StreamStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamStatus(val *StreamStatus) *NullableStreamStatus {
	return &NullableStreamStatus{value: val, isSet: true}
}

func (v NullableStreamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


