/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FrequencyType the model 'FrequencyType'
type FrequencyType string

// List of FrequencyType
const (
	CRON FrequencyType = "cron"
	MINUTES FrequencyType = "minutes"
)

// All allowed values of FrequencyType enum
var AllowedFrequencyTypeEnumValues = []FrequencyType{
	"cron",
	"minutes",
}

func (v *FrequencyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FrequencyType(value)
	for _, existing := range AllowedFrequencyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FrequencyType", value)
}

// NewFrequencyTypeFromValue returns a pointer to a valid FrequencyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFrequencyTypeFromValue(v string) (*FrequencyType, error) {
	ev := FrequencyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FrequencyType: valid values are %v", v, AllowedFrequencyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FrequencyType) IsValid() bool {
	for _, existing := range AllowedFrequencyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FrequencyType value
func (v FrequencyType) Ptr() *FrequencyType {
	return &v
}

type NullableFrequencyType struct {
	value *FrequencyType
	isSet bool
}

func (v NullableFrequencyType) Get() *FrequencyType {
	return v.value
}

func (v *NullableFrequencyType) Set(val *FrequencyType) {
	v.value = val
	v.isSet = true
}

func (v NullableFrequencyType) IsSet() bool {
	return v.isSet
}

func (v *NullableFrequencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrequencyType(val *FrequencyType) *NullableFrequencyType {
	return &NullableFrequencyType{value: val, isSet: true}
}

func (v NullableFrequencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrequencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

