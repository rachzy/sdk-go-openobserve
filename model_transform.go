/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transform type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transform{}

// Transform struct for Transform
type Transform struct {
	Function string `json:"function"`
	Name *string `json:"name,omitempty"`
	NumArgs *int32 `json:"numArgs,omitempty"`
	Params *string `json:"params,omitempty"`
	Streams []StreamOrder `json:"streams,omitempty"`
	TransType NullableInt32 `json:"transType,omitempty"`
}

type _Transform Transform

// NewTransform instantiates a new Transform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransform(function string) *Transform {
	this := Transform{}
	this.Function = function
	return &this
}

// NewTransformWithDefaults instantiates a new Transform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformWithDefaults() *Transform {
	this := Transform{}
	return &this
}

// GetFunction returns the Function field value
func (o *Transform) GetFunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *Transform) GetFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *Transform) SetFunction(v string) {
	o.Function = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Transform) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transform) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Transform) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Transform) SetName(v string) {
	o.Name = &v
}

// GetNumArgs returns the NumArgs field value if set, zero value otherwise.
func (o *Transform) GetNumArgs() int32 {
	if o == nil || IsNil(o.NumArgs) {
		var ret int32
		return ret
	}
	return *o.NumArgs
}

// GetNumArgsOk returns a tuple with the NumArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transform) GetNumArgsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumArgs) {
		return nil, false
	}
	return o.NumArgs, true
}

// HasNumArgs returns a boolean if a field has been set.
func (o *Transform) HasNumArgs() bool {
	if o != nil && !IsNil(o.NumArgs) {
		return true
	}

	return false
}

// SetNumArgs gets a reference to the given int32 and assigns it to the NumArgs field.
func (o *Transform) SetNumArgs(v int32) {
	o.NumArgs = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *Transform) GetParams() string {
	if o == nil || IsNil(o.Params) {
		var ret string
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transform) GetParamsOk() (*string, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *Transform) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given string and assigns it to the Params field.
func (o *Transform) SetParams(v string) {
	o.Params = &v
}

// GetStreams returns the Streams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transform) GetStreams() []StreamOrder {
	if o == nil {
		var ret []StreamOrder
		return ret
	}
	return o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transform) GetStreamsOk() ([]StreamOrder, bool) {
	if o == nil || IsNil(o.Streams) {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *Transform) HasStreams() bool {
	if o != nil && !IsNil(o.Streams) {
		return true
	}

	return false
}

// SetStreams gets a reference to the given []StreamOrder and assigns it to the Streams field.
func (o *Transform) SetStreams(v []StreamOrder) {
	o.Streams = v
}

// GetTransType returns the TransType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transform) GetTransType() int32 {
	if o == nil || IsNil(o.TransType.Get()) {
		var ret int32
		return ret
	}
	return *o.TransType.Get()
}

// GetTransTypeOk returns a tuple with the TransType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transform) GetTransTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransType.Get(), o.TransType.IsSet()
}

// HasTransType returns a boolean if a field has been set.
func (o *Transform) HasTransType() bool {
	if o != nil && o.TransType.IsSet() {
		return true
	}

	return false
}

// SetTransType gets a reference to the given NullableInt32 and assigns it to the TransType field.
func (o *Transform) SetTransType(v int32) {
	o.TransType.Set(&v)
}
// SetTransTypeNil sets the value for TransType to be an explicit nil
func (o *Transform) SetTransTypeNil() {
	o.TransType.Set(nil)
}

// UnsetTransType ensures that no value is present for TransType, not even an explicit nil
func (o *Transform) UnsetTransType() {
	o.TransType.Unset()
}

func (o Transform) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transform) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["function"] = o.Function
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumArgs) {
		toSerialize["numArgs"] = o.NumArgs
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if o.Streams != nil {
		toSerialize["streams"] = o.Streams
	}
	if o.TransType.IsSet() {
		toSerialize["transType"] = o.TransType.Get()
	}
	return toSerialize, nil
}

func (o *Transform) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransform := _Transform{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransform)

	if err != nil {
		return err
	}

	*o = Transform(varTransform)

	return err
}

type NullableTransform struct {
	value *Transform
	isSet bool
}

func (v NullableTransform) Get() *Transform {
	return v.value
}

func (v *NullableTransform) Set(val *Transform) {
	v.value = val
	v.isSet = true
}

func (v NullableTransform) IsSet() bool {
	return v.isSet
}

func (v *NullableTransform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransform(val *Transform) *NullableTransform {
	return &NullableTransform{value: val, isSet: true}
}

func (v NullableTransform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


