/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrgUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgUser{}

// OrgUser struct for OrgUser
type OrgUser struct {
	Email string `json:"email"`
	FirstName string `json:"first_name"`
	LastName string `json:"last_name"`
}

type _OrgUser OrgUser

// NewOrgUser instantiates a new OrgUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgUser(email string, firstName string, lastName string) *OrgUser {
	this := OrgUser{}
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	return &this
}

// NewOrgUserWithDefaults instantiates a new OrgUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgUserWithDefaults() *OrgUser {
	this := OrgUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *OrgUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *OrgUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *OrgUser) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value
func (o *OrgUser) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *OrgUser) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *OrgUser) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *OrgUser) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *OrgUser) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *OrgUser) SetLastName(v string) {
	o.LastName = v
}

func (o OrgUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	return toSerialize, nil
}

func (o *OrgUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"first_name",
		"last_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrgUser := _OrgUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrgUser)

	if err != nil {
		return err
	}

	*o = OrgUser(varOrgUser)

	return err
}

type NullableOrgUser struct {
	value *OrgUser
	isSet bool
}

func (v NullableOrgUser) Get() *OrgUser {
	return v.value
}

func (v *NullableOrgUser) Set(val *OrgUser) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgUser) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgUser(val *OrgUser) *NullableOrgUser {
	return &NullableOrgUser{value: val, isSet: true}
}

func (v NullableOrgUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


