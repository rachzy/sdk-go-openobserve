/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnableAlertResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableAlertResponseBody{}

// EnableAlertResponseBody HTTP response body for `EnableAlert` endpoint.
type EnableAlertResponseBody struct {
	Enabled bool `json:"enabled"`
}

type _EnableAlertResponseBody EnableAlertResponseBody

// NewEnableAlertResponseBody instantiates a new EnableAlertResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableAlertResponseBody(enabled bool) *EnableAlertResponseBody {
	this := EnableAlertResponseBody{}
	this.Enabled = enabled
	return &this
}

// NewEnableAlertResponseBodyWithDefaults instantiates a new EnableAlertResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableAlertResponseBodyWithDefaults() *EnableAlertResponseBody {
	this := EnableAlertResponseBody{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *EnableAlertResponseBody) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *EnableAlertResponseBody) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *EnableAlertResponseBody) SetEnabled(v bool) {
	o.Enabled = v
}

func (o EnableAlertResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableAlertResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *EnableAlertResponseBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnableAlertResponseBody := _EnableAlertResponseBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnableAlertResponseBody)

	if err != nil {
		return err
	}

	*o = EnableAlertResponseBody(varEnableAlertResponseBody)

	return err
}

type NullableEnableAlertResponseBody struct {
	value *EnableAlertResponseBody
	isSet bool
}

func (v NullableEnableAlertResponseBody) Get() *EnableAlertResponseBody {
	return v.value
}

func (v *NullableEnableAlertResponseBody) Set(val *EnableAlertResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableAlertResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableAlertResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableAlertResponseBody(val *EnableAlertResponseBody) *NullableEnableAlertResponseBody {
	return &NullableEnableAlertResponseBody{value: val, isSet: true}
}

func (v NullableEnableAlertResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableAlertResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


