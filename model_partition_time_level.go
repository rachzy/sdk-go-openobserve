/*
openobserve

OpenObserve API documents [https://openobserve.ai/docs/](https://openobserve.ai/docs/)

API version: 0.14.5
Contact: hello@zinclabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PartitionTimeLevel the model 'PartitionTimeLevel'
type PartitionTimeLevel string

// List of PartitionTimeLevel
const (
	UNSET PartitionTimeLevel = "unset"
	HOURLY PartitionTimeLevel = "hourly"
	DAILY PartitionTimeLevel = "daily"
)

// All allowed values of PartitionTimeLevel enum
var AllowedPartitionTimeLevelEnumValues = []PartitionTimeLevel{
	"unset",
	"hourly",
	"daily",
}

func (v *PartitionTimeLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PartitionTimeLevel(value)
	for _, existing := range AllowedPartitionTimeLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PartitionTimeLevel", value)
}

// NewPartitionTimeLevelFromValue returns a pointer to a valid PartitionTimeLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartitionTimeLevelFromValue(v string) (*PartitionTimeLevel, error) {
	ev := PartitionTimeLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PartitionTimeLevel: valid values are %v", v, AllowedPartitionTimeLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PartitionTimeLevel) IsValid() bool {
	for _, existing := range AllowedPartitionTimeLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PartitionTimeLevel value
func (v PartitionTimeLevel) Ptr() *PartitionTimeLevel {
	return &v
}

type NullablePartitionTimeLevel struct {
	value *PartitionTimeLevel
	isSet bool
}

func (v NullablePartitionTimeLevel) Get() *PartitionTimeLevel {
	return v.value
}

func (v *NullablePartitionTimeLevel) Set(val *PartitionTimeLevel) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionTimeLevel) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionTimeLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionTimeLevel(val *PartitionTimeLevel) *NullablePartitionTimeLevel {
	return &NullablePartitionTimeLevel{value: val, isSet: true}
}

func (v NullablePartitionTimeLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionTimeLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

